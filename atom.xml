<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>舒克贝塔</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sukbeta.github.io/"/>
  <updated>2024-08-27T06:01:44.870Z</updated>
  <id>https://sukbeta.github.io/</id>
  
  <author>
    <name>北极企鹅</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>setfacl 命令详解</title>
    <link href="https://sukbeta.github.io/setfacl-command/"/>
    <id>https://sukbeta.github.io/setfacl-command/</id>
    <published>2024-08-27T03:48:25.000Z</published>
    <updated>2024-08-27T06:01:44.870Z</updated>
    
    <content type="html"><![CDATA[<p>setfacl命令详解</p><p><code>setfacl</code>命令提供了强大的工具来管理文件和目录的权限，允许比传统UNIX权限模型更细粒度的控制。通过掌握这些选项和语法，可以灵活地配置系统中的访问控制策略。</p><p><code>setfacl</code> 命令用于设置或修改文件和目录的访问控制列表（ACL），ACL允许为文件或目录分配更精细的权限，超越传统的所有者、组、和其他用户权限模型。</p><h3 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h3><ul><li>-m：修改ACL。用于添加或修改文件或目录的ACL条目。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setfacl -m u:username:rwx file</span><br></pre></td></tr></table></figure><p>解释：为用户username设置文件file的权限为rwx。</p><ul><li>-x：移除ACL。用于从文件或目录中移除指定的ACL条目。</li></ul><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setfacl -x u:username file</span><br></pre></td></tr></table></figure><p>解释：移除用户username对文件file的ACL条目。</p><ul><li>-b：删除所有ACL。用于移除文件或目录的所有ACL条目。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setfacl -b file</span><br></pre></td></tr></table></figure><p>解释：删除文件file的所有ACL条目，使其恢复为仅使用传统的rwx权限。</p><ul><li>-k：删除默认ACL。用于删除目录的默认ACL条目，但保留其他ACL条目。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setfacl -k directory</span><br></pre></td></tr></table></figure><p>解释：删除目录directory的默认ACL条目。</p><ul><li>-d：默认ACL。用于设置目录的默认ACL条目，这些条目会被自动继承到新创建的文件和子目录。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setfacl -d -m d:u:username:rwx directory</span><br></pre></td></tr></table></figure><p>解释：为目录directory设置用户username的默认ACL条目rwx。</p><ul><li>-R：递归应用ACL。用于递归设置指定目录及其子目录和文件的ACL。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setfacl -R -m u:username:rwx directory</span><br></pre></td></tr></table></figure><p>解释：递归地为目录directory及其所有子目录和文件设置用户username的权限为rwx。</p><ul><li>-n：不重写掩码。在修改ACL时，保留现有的掩码值。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setfacl -n -m u:username:rwx file</span><br></pre></td></tr></table></figure><p>解释：在不更改现有掩码的情况下，为用户username设置文件file的权限为rwx。</p><ul><li>--set：设置ACL。完全覆盖现有ACL，用新的ACL条目集替换现有的ACL。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setfacl --<span class="built_in">set</span> u:username:rwx file</span><br></pre></td></tr></table></figure><p>解释：将文件file的ACL设置为仅用户username拥有rwx权限，删除所有其他ACL条目。</p><ul><li>-M：从文件读取ACL。用于从指定文件中读取ACL条目，并将其应用于目标文件或目录。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setfacl -M aclfile file</span><br></pre></td></tr></table></figure><p>解释：从文件aclfile中读取ACL条目，并将其应用于文件file。</p><ul><li>-X：从文件中删除ACL。用于从指定文件中读取要删除的ACL条目。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setfacl -X aclfile file</span><br></pre></td></tr></table></figure><p>解释：从文件aclfile中读取要删除的ACL条目，并将其从文件file的ACL中删除。</p><h3 id="ACL-条目格式"><a href="#ACL-条目格式" class="headerlink" title="ACL 条目格式"></a>ACL 条目格式</h3><p>ACL条目格式为<code>[d[efault]:][u[ser]:uid|g[roup]:gid|m[ask]|o[ther]]:perms</code>，其中：</p><ul><li><code>default</code>：指定为默认ACL，仅适用于目录。</li><li><code>user:uid</code>：用户权限条目。</li><li><code>group:gid</code>：组权限条目。</li><li><code>mask</code>：限制对文件的最大允许权限。</li><li><code>other</code>：其他用户的权限条目。</li><li><code>perms</code>：权限，<code>r</code>表示读取，<code>w</code>表示写入，<code>x</code>表示执行。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ol><li><p><strong>为文件设置特定用户的读写执行权限：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setfacl -m u:john:rwx myfile</span><br></pre></td></tr></table></figure><p>为用户<code>john</code>设置文件<code>myfile</code>的<code>rwx</code>权限。</p></li></ol><ol start="2"><li><p><strong>为目录及其子目录和文件递归设置权限：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setfacl -R -m g:developers:rwx /mydir</span><br></pre></td></tr></table></figure><p>为组<code>developers</code>递归地设置目录<code>/mydir</code>及其内容的<code>rwx</code>权限。</p></li></ol><ol start="3"><li><p><strong>删除某个用户的ACL条目：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setfacl -x u:john myfile</span><br></pre></td></tr></table></figure><p>移除用户<code>john</code>在文件<code>myfile</code>上的ACL条目。</p></li></ol><ol start="4"><li><p><strong>查看文件的ACL：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getfacl myfile</span><br></pre></td></tr></table></figure><p>使用<code>getfacl</code>查看文件或目录的ACL条目。</p></li></ol><h4 id="设置目录下所有新创建的子目录和文件的默认权限为775"><a href="#设置目录下所有新创建的子目录和文件的默认权限为775" class="headerlink" title="设置目录下所有新创建的子目录和文件的默认权限为775"></a>设置目录下所有新创建的子目录和文件的默认权限为775</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setfacl -m d:u::rwx,d:g::rwx,d:o::r-x /path/to/directory</span><br></pre></td></tr></table></figure><p>解释：</p><p>d\:u::rwx - 设置默认的用户权限为775 (rwx表示7)。 d\:g::rwx - 设置默认的组权限为775 (rwx表示7)。 d\:o::r-x - 设置默认的其他用户权限为775 (r-x表示5)。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;setfacl命令详解&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setfacl&lt;/code&gt;命令提供了强大的工具来管理文件和目录的权限，允许比传统UNIX权限模型更细粒度的控制。通过掌握这些选项和语法，可以灵活地配置系统中的访问控制策略。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setfacl&lt;/code&gt; 命令用于设置或修改文件和目录的访问控制列表（ACL），ACL允许为文件或目录分配更精细的权限，超越传统的所有者、组、和其他用户权限模型。&lt;/p&gt;
&lt;h3 id=&quot;常用选项&quot;&gt;&lt;a href=&quot;#常用选项&quot; class=&quot;headerlink&quot; title=&quot;常用选项&quot;&gt;&lt;/a&gt;常用选项&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;-m：修改ACL。用于添加或修改文件或目录的ACL条目。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;setfacl -m u:username:rwx file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解释：为用户username设置文件file的权限为rwx。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-x：移除ACL。用于从文件或目录中移除指定的ACL条目。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="shell" scheme="https://sukbeta.github.io/categories/shell/"/>
    
    
      <category term="command" scheme="https://sukbeta.github.io/tags/command/"/>
    
  </entry>
  
  <entry>
    <title>github-hosts</title>
    <link href="https://sukbeta.github.io/github-hosts/"/>
    <id>https://sukbeta.github.io/github-hosts/</id>
    <published>2023-06-25T09:28:23.000Z</published>
    <updated>2023-06-25T09:48:39.488Z</updated>
    
    <content type="html"><![CDATA[<p>  访问github的话，可以不用梯子，用配置hosts的方式来访问，hosts是变化的，可以用过gitlab地址来获取。</p><p>获取地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gitlab.com/ineo6/hosts/-/raw/master/next-hosts</span><br></pre></td></tr></table></figure><p>内容如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"># New！欢迎使用基于DNS的新方案</span><br><span class="line"># https://gitlab.com/ineo6/hosts/-/raw/master/next-hosts</span><br><span class="line"># 地址可能会变动，请务必关注GitHub、Gitlab获取最新消息</span><br><span class="line"># 也可以关注公众号：湖中剑，保证不迷路</span><br><span class="line"># GitHub Host Start</span><br><span class="line"></span><br><span class="line">185.199.109.154              github.githubassets.com</span><br><span class="line">140.82.113.22                central.github.com</span><br><span class="line">185.199.110.133              desktop.githubusercontent.com</span><br><span class="line">185.199.111.153              assets-cdn.github.com</span><br><span class="line">185.199.108.133              camo.githubusercontent.com</span><br><span class="line">185.199.109.133              github.map.fastly.net</span><br><span class="line">151.101.193.194              github.global.ssl.fastly.net</span><br><span class="line">140.82.114.3                 gist.github.com</span><br><span class="line">185.199.109.153              github.io</span><br><span class="line">140.82.114.3                 github.com</span><br><span class="line">140.82.113.5                 api.github.com</span><br><span class="line">185.199.108.133              raw.githubusercontent.com</span><br><span class="line">185.199.109.133              user-images.githubusercontent.com</span><br><span class="line">185.199.111.133              favicons.githubusercontent.com</span><br><span class="line">185.199.108.133              avatars5.githubusercontent.com</span><br><span class="line">185.199.110.133              avatars4.githubusercontent.com</span><br><span class="line">185.199.110.133              avatars3.githubusercontent.com</span><br><span class="line">185.199.110.133              avatars2.githubusercontent.com</span><br><span class="line">185.199.111.133              avatars1.githubusercontent.com</span><br><span class="line">185.199.109.133              avatars0.githubusercontent.com</span><br><span class="line">185.199.109.133              avatars.githubusercontent.com</span><br><span class="line">140.82.112.9                 codeload.github.com</span><br><span class="line">52.217.229.241               github-cloud.s3.amazonaws.com</span><br><span class="line">52.217.133.73                github-com.s3.amazonaws.com</span><br><span class="line">52.217.130.81                github-production-release-asset-2e65be.s3.amazonaws.com</span><br><span class="line">52.217.138.161               github-production-user-asset-6210df.s3.amazonaws.com</span><br><span class="line">52.217.132.241               github-production-repository-file-5c1aeb.s3.amazonaws.com</span><br><span class="line">185.199.111.153              githubstatus.com</span><br><span class="line">140.82.112.17                github.community</span><br><span class="line">185.199.108.133              media.githubusercontent.com</span><br><span class="line">185.199.111.133              objects.githubusercontent.com</span><br><span class="line">185.199.109.133              raw.github.com</span><br><span class="line">20.221.80.166                copilot-proxy.githubusercontent.com</span><br><span class="line"></span><br><span class="line"># Please Star : https://github.com/ineo6/hosts</span><br><span class="line"># Mirror Repo : https://gitlab.com/ineo6/hosts</span><br><span class="line"></span><br><span class="line"># Update at: 2023-06-25 16:14:11</span><br><span class="line"></span><br><span class="line"># GitHub Host End</span><br></pre></td></tr></table></figure><p>将内容配置到hosts中即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  访问github的话，可以不用梯子，用配置hosts的方式来访问，hosts是变化的，可以用过gitlab地址来获取。&lt;/p&gt;
&lt;p&gt;获取地址：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
      <category term="doc" scheme="https://sukbeta.github.io/categories/doc/"/>
    
    
      <category term="github" scheme="https://sukbeta.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>alluxio-install</title>
    <link href="https://sukbeta.github.io/alluxio-install/"/>
    <id>https://sukbeta.github.io/alluxio-install/</id>
    <published>2022-12-27T02:31:25.000Z</published>
    <updated>2024-07-10T05:44:47.308Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Alluxio-安装文档"><a href="#Alluxio-安装文档" class="headerlink" title="Alluxio 安装文档"></a>Alluxio 安装文档</h1><p>  Alluxio是一个基于内存的分布式文件系统，它是架构在底层分布式文件系统和上层分布式计算框架之间的一个中间件，主要职责是以文件形式在内存或其它存储设施中提供数据的存取服务。<br><br>  <br></p><h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><!-- ![架构图.jpg](https://file.moetu.org/images/2022/12/27/1122e07b6ea41cc259ac.jpg)<br> --><p><img src="https://i.niupic.com/images/2023/12/26/ekIf.png" alt="架构图.jpg"><br></p><a id="more"></a><p>  在大数据生态系统中，Alluxio 位于数据驱动框架或应用（如 Apache Spark、Presto、Tensorflow、Apache HBase、Apache Hive 或 Apache Flink）和各种持久化存储系统（如 Amazon S3、Google Cloud Storage、OpenStack Swift、HDFS、GlusterFS、IBM Cleversafe、EMC ECS、Ceph、NFS 、Minio和 Alibaba OSS）之间。 Alluxio 统一了存储在这些不同存储系统中的数据，为其上层数据驱动型应用提供统一的客户端 API 和全局命名空间。<br><br><br></p><h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><p>下载地址：<br><br><a href="https://www.alluxio.io/download/releases/" target="_blank" rel="noopener">https://www.alluxio.io/download/releases/</a><br><br>wget <a href="https://downloads.alluxio.io/downloads/files/2.8.1/alluxio-2.8.1-bin.tar.gz" target="_blank" rel="noopener">https://downloads.alluxio.io/downloads/files/2.8.1/alluxio-2.8.1-bin.tar.gz</a> <br></p><p>Alluxio 集群安装分为两种，zookeeper 和 raft 两种方式。<br></p><p>Zookeeper 方式，集群master通过zk来选择主节点。<br></p><p>安装说明：<br><br>两个master节点，两个work节点。<br><br>用hadoop用户启动，每个节点之间ssh免密<br></p><p>####修改配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">su – hadoop </span><br><span class="line">cd apache-hadoop </span><br><span class="line">tar -zxvf alluxio-2.8.1-bin.tar.gz</span><br><span class="line">cd alluxio-2.8.1/conf/</span><br></pre></td></tr></table></figure><p>软连hdfs配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s $HADOOP_CONF_DIR/hdfs-site.xml hdfs-site.xml</span><br><span class="line">ln -s $HADOOP_CONF_DIR/core-site.xml core-site.xml</span><br></pre></td></tr></table></figure><p>vim master       #  写上master 节点的主机名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shining-bigdata00.host.com</span><br><span class="line">shining-bigdata01.host.com</span><br></pre></td></tr></table></figure><p>vim workers       # 写上 worker 节点的主机名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shining-bigdata02.host.com</span><br><span class="line">shining-bigdata04.host.com</span><br></pre></td></tr></table></figure><p>vim alluxio-site.properties    #  alluxio主配置文件  zookeeper HA 配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#########&lt;--  zookeeper ha #######</span><br><span class="line"># Common properties</span><br><span class="line">alluxio.master.hostname=shining-bigdata00.host.com      #  每个master 设置自己的主机名，每个worker 节点不用配置，  需要注意！！！</span><br><span class="line">#配置日志文件目录</span><br><span class="line">alluxio.master.mount.table.root.ufs=hdfs://shininghadoop/underFSStorage</span><br><span class="line">alluxio.underfs.hdfs.configuration=/home/hadoop/apache-hadoop/hadoop/etc/hadoop/core-site.xml:/home/hadoop/pache-hadoop/hadoop/etc/hadoop/hdfs-site.xml</span><br><span class="line">alluxio.debug=true</span><br><span class="line"></span><br><span class="line">##下面是高可用的配置</span><br><span class="line">alluxio.master.hostname=shining-bigdata00.host.com</span><br><span class="line">alluxio.zookeeper.enabled=true</span><br><span class="line">alluxio.zookeeper.address=shining-bigdata00.host.com:2181,shining-bigdata01.host.com:2181,shining-bigdata03.host.com2181,shining-bigdata04.host.com:2181,shining-bigdata02.host.com:2181</span><br><span class="line">alluxio.master.journal.type=UFS</span><br><span class="line">alluxio.master.journal.folder=hdfs://shininghadoop/alluxio/journal</span><br><span class="line"></span><br><span class="line"># Security properties</span><br><span class="line">alluxio.security.authorization.permission.enabled=false</span><br><span class="line">alluxio.security.authentication.type=NOSASL</span><br><span class="line">##配置用户模拟，允许yarn用户模拟任意用户</span><br><span class="line">alluxio.master.security.impersonation.yarn.users=*</span><br><span class="line"></span><br><span class="line"># Worker properties</span><br><span class="line">alluxio.worker.ramdisk.size=5GB</span><br><span class="line">alluxio.worker.tieredstore.levels=1</span><br><span class="line">alluxio.worker.tieredstore.level0.alias=MEM</span><br><span class="line">alluxio.worker.tieredstore.level0.dirs.path=/home/hadoop/alluxio_ramdisk</span><br><span class="line"></span><br><span class="line"># User properties</span><br><span class="line">#alluxio.user.file.readtype.default=CACHE</span><br><span class="line">#alluxio.user.file.writetype.default=ASYNC_THROUGH</span><br><span class="line">#########   zookeeper  ha  --&gt; ######</span><br></pre></td></tr></table></figure><p>vim alluxio-site.properties    #  alluxio主配置文件  RAFT HA 配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">######### &lt;-- raft ha #####</span><br><span class="line"># raft ha</span><br><span class="line">alluxio.master.hostname=shining-bigdata00.host.com</span><br><span class="line">alluxio.master.mount.table.root.ufs=hdfs://shininghadoop/underFSStorage</span><br><span class="line">alluxio.master.embedded.journal.addresses=shining-bigdata00.host.com:19200,shining-bigdata01.host.com:19200</span><br><span class="line">alluxio.underfs.hdfs.configuration=/home/hadoop/apache-hadoop/hadoop/etc/hadoop/core-site.xml:/home/hadoop/apache-hadoop/hadoop/etc/hadoop/hdfs-site.xml</span><br><span class="line">alluxio.debug=true</span><br><span class="line">alluxio.master.journal.type=UFS</span><br><span class="line">alluxio.master.journal.folder=hdfs://shininghadoop/alluxio/journal</span><br><span class="line"></span><br><span class="line"># Security properties</span><br><span class="line">alluxio.security.authorization.permission.enabled=false</span><br><span class="line">alluxio.security.authentication.type=NOSASL</span><br><span class="line">##配置用户模拟，允许yarn用户模拟任意用户</span><br><span class="line">alluxio.master.security.impersonation.yarn.users=*</span><br><span class="line"></span><br><span class="line"># Worker properties</span><br><span class="line">alluxio.worker.ramdisk.size=5GB</span><br><span class="line">alluxio.worker.tieredstore.levels=1</span><br><span class="line">alluxio.worker.tieredstore.level0.alias=MEM</span><br><span class="line">alluxio.worker.tieredstore.level0.dirs.path=/home/hadoop/alluxio_ramdisk</span><br><span class="line">######### raft ha --&gt; #####</span><br></pre></td></tr></table></figure><p>根据上面的配置，需要准备的配置：<br><br>HDFS 上创建目录：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -mkdir /alluxio/journal</span><br><span class="line">hdfs dfs -mkdir /underFSStorage</span><br><span class="line">hdfs dfs -chmod  777 /underFSStorage  /alluxio/journal</span><br><span class="line">worker 节点上执行：</span><br><span class="line">su – Hadoop</span><br><span class="line">mkdir -p /home/hadoop/alluxio_ramdisk</span><br><span class="line">chmod 777 /home/hadoop/alluxio_ramdisk</span><br></pre></td></tr></table></figure><p>同步配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home/hadoop/alluxio-2.8.1</span><br><span class="line">alluxio copyDir conf/   # 会将此节点的conf目录下的所有配置同步到master和worker节点上，（前提需要ssh免密）</span><br><span class="line">workers 上 修改visudo  让hadoop用户有sudo权限</span><br></pre></td></tr></table></figure><p>启动和停止Alluxio集群：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">启动：</span><br><span class="line">cd /home/hadoop /alluxio-2.8.1</span><br><span class="line">./bin/alluxio formatMaster</span><br><span class="line">./bin/alluxio-start.sh all SudoMount</span><br><span class="line">./bin/alluxio fs leader     #  查看当前leader节点</span><br><span class="line">./bin/alluxio runTests     # 运行一个测试</span><br><span class="line">停止：</span><br><span class="line">./bin/alluxio-stop.sh all</span><br><span class="line">下次再启动的时候就用用</span><br><span class="line">./bin/alluxio-start.sh all</span><br><span class="line">其他启动命令：</span><br><span class="line">Master：</span><br><span class="line">alluxio-start.sh master</span><br><span class="line">alluxio-start.sh job_master</span><br><span class="line">alluxio-start.sh proxy</span><br></pre></td></tr></table></figure><p>worker：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alluxio-start.sh worker</span><br><span class="line">alluxio-start.sh job_worker</span><br><span class="line">alluxio-start.sh proxy</span><br><span class="line">停止用 alluxio-stop.sh 后面跟相同服务即可</span><br></pre></td></tr></table></figure><p>Web UI 访问地址：<br><br><a href="http://shining-bigdata00.host.com:19999/overview" target="_blank" rel="noopener">http://shining-bigdata00.host.com:19999/overview</a> <br></p><h3 id="HDFS支持Alluxio"><a href="#HDFS支持Alluxio" class="headerlink" title="HDFS支持Alluxio"></a>HDFS支持Alluxio</h3><p>修改hdfs配置文件<br></p><p>cd $HADOOP_CONF_DIR<br><br>vim core-site.xml<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;fs.alluxio.impl&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;alluxio.hadoop.FileSystem&lt;/value&gt;</span><br><span class="line">  &lt;description&gt;The Alluxio FileSystem (Hadoop 1.x and 2.x)&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;fs.AbstractFileSystem.alluxio.impl&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;alluxio.hadoop.AlluxioFileSystem&lt;/value&gt;</span><br><span class="line">  &lt;description&gt;The Alluxio AbstractFileSystem (Hadoop 2.x)&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- alluxio zookeeper 集群时，配置</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;alluxio.zookeeper.enabled&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;alluxio.zookeeper.address&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;shining-bigdata00.host.com:2181&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;!—alluxio raft 集群时配置</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;alluxio.master.rpc.addresses&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;shining-bigdata00.host.com:19998,shining-bigdata01.host.com:19998&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>添加jar包，将alluxio-client 的jar包放到hdfs的lib加载目录下。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /home/hadoop/alluxio-2.8.1/client/alluxio-2.8.1-client.jar /home/hadoop/apache-hadoop/hadoop/share/hadoop/common/lib/</span><br><span class="line">分发到每台datanode上</span><br></pre></td></tr></table></figure><p>重启 hadoop 集群<br><br>之后，可以用hdfs命令查看alluxio上文件<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -ls alluxio:///ys</span><br></pre></td></tr></table></figure><h3 id="hive-配置alluxio"><a href="#hive-配置alluxio" class="headerlink" title="hive 配置alluxio"></a>hive 配置alluxio</h3><p>copy alluxio client jar 包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /home/hadoop/alluxio-2.8.1/client/alluxio-2.8.1-client.jar $HIVE_HOME/lib/</span><br></pre></td></tr></table></figure><p>hive 配置文件中 hive-site.xml 中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;alluxio.zookeeper.enabled&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;alluxio.zookeeper.address&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;shining-bigdata00.host.com:2181&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;alluxio.master.rpc.addresse&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;shining-bigdata00.host.com:19998,shining-bigdata01.host.com:19998&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>Hive 客户端和hive meta 都需要添加。<br><br><br><br>Hive中创建 alluxio 文件系统的表。<br><br>Alluxio 官网提供一个测试的hive数据，<br><br>可以在 <a href="http://grouplens.org/datasets/movielens/" target="_blank" rel="noopener">http://grouplens.org/datasets/movielens/</a> <br><br>下载数据文件（如：ml-100k.zip）。然后接下该文件，并且将文件u.user上传到Alluxio的ml-100k/下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./bin/alluxio fs mkdir /ml-100k</span><br><span class="line">./bin/alluxio fs copyFromLocal /path/to/ml-100k/u.user  /ml-100k/</span><br></pre></td></tr></table></figure><p>创建表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; CREATE TABLE u_user (</span><br><span class="line">userid INT,</span><br><span class="line">age INT,</span><br><span class="line">gender CHAR(1),</span><br><span class="line">occupation STRING,</span><br><span class="line">zipcode STRING)</span><br><span class="line">ROW FORMAT DELIMITED</span><br><span class="line">FIELDS TERMINATED BY &apos;|&apos;</span><br><span class="line">STORED AS TEXTFILE</span><br><span class="line">LOCATION &apos;alluxio://shining-bigdata00.host.com:19998,shining-bigdata01.host.com:19998/ml-100k&apos;;</span><br></pre></td></tr></table></figure><p>执行查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select * from u_user limit 5;</span><br></pre></td></tr></table></figure><p>常用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">./bin/alluxio copyDir conf/</span><br><span class="line"></span><br><span class="line">./bin/alluxio formatMaster</span><br><span class="line">./bin/alluxio-start.sh all SudoMount</span><br><span class="line">./bin/alluxio runTests</span><br><span class="line">./bin/alluxio fs leader</span><br><span class="line">alluxio fs masterInfo</span><br><span class="line">alluxio fsadmin report</span><br><span class="line">./bin/alluxio fs ls /</span><br><span class="line">alluxio fs loadMetadata -R /ys/</span><br><span class="line">alluxio fs copyToLocal /ml-100k/u.user 123</span><br><span class="line"></span><br><span class="line">alluxio fs stat /ys/hdfs_file_num/000000_0</span><br><span class="line">alluxio fs setTtl /ys/hdfs_file_num/000000_0 60000</span><br><span class="line">alluxio fs setTtl --action /ys/hdfs_file_num/000000_0 60000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hadoop fs -ls alluxio:///ys</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Alluxio-安装文档&quot;&gt;&lt;a href=&quot;#Alluxio-安装文档&quot; class=&quot;headerlink&quot; title=&quot;Alluxio 安装文档&quot;&gt;&lt;/a&gt;Alluxio 安装文档&lt;/h1&gt;&lt;p&gt;  Alluxio是一个基于内存的分布式文件系统，它是架构在底层分布式文件系统和上层分布式计算框架之间的一个中间件，主要职责是以文件形式在内存或其它存储设施中提供数据的存取服务。&lt;br&gt;&lt;br&gt;  &lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;架构图&quot;&gt;&lt;a href=&quot;#架构图&quot; class=&quot;headerlink&quot; title=&quot;架构图&quot;&gt;&lt;/a&gt;架构图&lt;/h3&gt;&lt;!-- ![架构图.jpg](https://file.moetu.org/images/2022/12/27/1122e07b6ea41cc259ac.jpg)&lt;br&gt; --&gt;
&lt;p&gt;&lt;img src=&quot;https://i.niupic.com/images/2023/12/26/ekIf.png&quot; alt=&quot;架构图.jpg&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="alluxio" scheme="https://sukbeta.github.io/categories/alluxio/"/>
    
    
      <category term="hadoop" scheme="https://sukbeta.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>素书-原文及译文</title>
    <link href="https://sukbeta.github.io/sushu/"/>
    <id>https://sukbeta.github.io/sushu/</id>
    <published>2022-04-13T00:55:36.000Z</published>
    <updated>2022-04-13T01:18:53.429Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《素书》"><a href="#《素书》" class="headerlink" title="《素书》"></a>《素书》</h2><p>《素书》以道家思想为宗旨，集儒、法、兵的思想发挥道的作用及功能，同时以道、德、仁、义、礼为立身治国的根本、揆度宇宙万物自然运化的理数，以此认识事物，对应事物、处理事物的智能之作。</p><p>有一个典故大概大家都知道，黄石公故意把鞋子弄到桥下，张良毕恭毕敬的为老人拾鞋穿鞋，后来老人又几次考验张良，张良终于通过了考验，于是黄石公就把自己的一本书传授给了张良，这部书的名字有传说叫做《太公兵法》，其实是以讹传讹，这部书的名字应该叫做《素书》。张良却没有把这部书传给后人，而是将书埋进了自己的坟墓。张良死后大约五百年，盗墓人从张良墓里偷了这本书，才在民间流传开来。这段故事记载于宋朝人张商英为《素书》写的序里。张良虽然用这部书里的知识帮助刘邦取得了天下，但是张良也没有完全领悟书中的奥义。此典故正式名曰“圯桥授书”。</p><p>《素书》全书一百三十二句，共六章：原始、正道、求人之志、本德宗道、遵义和安礼。但这本书的内容可非同寻常，不仅包含治国安邦大谋略，更有修身处世、为人之道的智慧，每一句箴言都是切中要害，一针见血，读来如醍醐灌顶、豁然顿悟，其对人生的指导意义不言而喻，值得我们每个人读上一读。</p><a id="more"></a><h3 id="第一章-原始"><a href="#第一章-原始" class="headerlink" title="第一章 原始"></a>第一章 原始</h3><p>【原文】</p><p>夫道、德、仁、义、礼五者，一体也。道者，人之所蹈，使万物不知其所由。德者，人之所使，使万物各得其所欲。仁者，人之所亲，有慈慧恻隐之心，以遂其生成。义者，人之所宜，赏善罚恶，以立功立事。礼者，人之所履，夙兴夜寐，以成人伦之序。夫欲为人之本，不可无一焉。贤人君子，明于盛衰之道，通乎成败之数，审乎治乱之势，达乎去就之理。故潜居抱道，以待其时。若时至而行，则能极人臣之位；得机而动，则能成绝代之功。如其不遇，没身而已。是以其道足高，而名重于后代。</p><p>【译文】</p><p>道、德、仁、义、礼五者，本为一体，不可分离。</p><p>道，是一种自然规律，人人都在遵循著自然规律，自己却意识不到这一点，自然界万事万物亦是如此。德、即是获得，依德而行，可使一己的欲求得到满足，自然界万事万物也是如此。仁、是人所独具的仁慈、爱人的心理，人能关心、同情人，各种善良的愿望和行动就会产生。义、是人所认为符合某种道德观念的行为，人们根据义的原则奖善惩恶，以建立功业。礼、是规定社会行为的法则，规范仪式的总称。人人必须遵循礼的规范，兢兢业业，夙兴夜寐，按照君臣、父子、夫妻、兄弟等人伦关系所排列的顺序行事。这五个条目是做人的根本，缺一不可的。贤明能干的人物，品德高尚的君子，都能看清国家兴盛、衰弱、存亡的道理，通晓事业成败的规律，明白社会政治修明与纷乱的形势，懂得隐退仕进的原则。因此，当条件不适宜之时，都能默守正道，甘于隐伏，等待时机的到来。一旦时机到来而有所行动，常能建功立业位极人臣。如果所遇非时，也不过是淡泊以终而已。也就因此，像这样的人物常能树立极为崇高的典范，名重于后世呵！</p><h3 id="第二章-正道"><a href="#第二章-正道" class="headerlink" title="第二章 正道"></a>第二章 正道</h3><p>【原文】</p><p>德足以怀远，信足以一异，义足以得众，才足以鉴古，明足以照下，此人之俊也；</p><p>行足以为仪表，智足以决嫌疑，信可以使守约，廉可以使分财，此人之豪也；</p><p>守职而不废，处义而不回，见嫌而不茍免，见利而不茍得，此人之杰也。</p><p>【译文】</p><p>品德高尚，则可使远方之人前来归顺。诚实不欺，可以统一不同的意见。道理充分可以得到部下群众的拥戴。才识杰出，可以借鉴历史。聪明睿智可以知众而容众。这样的人，可以称他为人中之俊。行为端正，可以为人表率。足智多谋，可以解决疑难问题。天无信，四时失序，人无信，行止不立。如果能忠诚守信，这是立身成名之本。君子寡言，言而有信，一言议定，再不肯改议、失约。是故讲究信用，可以守约而无悔。廉洁公正，且疏财仗义。这样的人，可以称他为人中之豪。见嫌而不苟免，克尽职守，而无所废弛；恪守信义，而不稍加改变；受到嫌疑，而能居义而不反顾；利字当头，懂得不悖理苟得。这样的人，可以称为人中之杰。</p><h3 id="第三章-求人之志"><a href="#第三章-求人之志" class="headerlink" title="第三章 求人之志"></a>第三章 求人之志</h3><p>【原文】</p><p>绝嗜禁欲，所以除累。抑非损恶，所以让过。贬酒阙色，所以无污。</p><p>避嫌远疑，所以不误。博学切问，所以广知。高行微言，所以修身。</p><p>恭俭谦约，所以自守。深计远虑，所以不穷。亲仁友直，所以扶颠。</p><p>近恕笃行，所以接人。任材使能，所以济物。殚恶斥谗，所以止乱。</p><p>推古验今，所以不惑。先揆后度，所以应卒。设变致权，所以解结。</p><p>括囊顺会，所以无咎。橛橛梗梗，所以立功。孜孜淑淑，所以保终。</p><p>【译文】</p><p>杜绝不良的嗜好，禁止非分的欲望，这样可以免除各种牵累；抑制不合理的行为，减少邪恶的行径，这样可以避免过失；谢绝酒色侵扰，这样可以不受玷污；回避嫌疑，远离惑乱，这样可以不出错误。广泛地学习，仔细地提出各种问题，这样可以丰富自己的知识；行为高尚，辞锋不露，这样可以修养身心、陶冶性情；肃敬、节俭、谦逊、简约，这样可以守身不辱；深谋远虑，这样可以不至于困危；亲近仁义之士，结交正直之人，这样可以在逆境中得到帮助。为人尽量宽容，行为敦厚，这是待人处世之道。任才使能，使人人能尽其才，这是用人成事之要领；抑制邪恶，斥退谗佞之徒，这样可以防止动乱；推求往古，验证当今，这样可以不受迷惑；了解事态，心中有数，这样可以应付仓卒事变；采用灵活手法，施展权变之术，这样可以解开纠结；心中有数，闭口不言，凡事能顺从时机，这样可以远怨无咎；坚定不移，正直刚强，这样才能建功立业；勤勉惕励；心地善良，这样才能善始善终。</p><h3 id="第四章-本德宗道"><a href="#第四章-本德宗道" class="headerlink" title="第四章 本德宗道"></a>第四章 本德宗道</h3><p>【原文】</p><p>夫志心笃行之术。长莫长于博谋，安莫安于忍辱，先莫先于修德，乐莫乐于好善，神莫神于至诚，明莫明于体物，吉莫吉于知足，苦莫苦于多愿，悲莫悲于精散，病莫病于无常，短莫短于苟得，幽莫幽于贪鄙，孤莫孤于自恃，危莫危于任疑，败莫败于多私。</p><p>【译文】</p><p>欲始志向坚定，笃实力行：最好的方法，莫过于深思多谋；最安全的方式，莫过于安于忍辱；最优先的要务，莫过于进德修业；最快乐的态度，莫过于乐于好善；最神奇的效验，莫过于用心至诚；最高明的做法，莫过于明察秋毫；最吉祥的想法，莫过于安分知足；最痛苦的缺点，莫过于欲求太多；最悲哀的情形，莫过于心神离散；最麻烦的病态，莫过于反覆无常；最无聊的妄念，莫过于不劳而获；最愚昧的观念，莫过于贪婪卑鄙；最孤独的念头，莫过于目空一切；最危险的举措，莫过于任人而疑；最失败的行径；莫过于自私自利；</p><h3 id="第五章-道义"><a href="#第五章-道义" class="headerlink" title="第五章 道义"></a>第五章 道义</h3><p>【原文】</p><p>以明示下者暗，有过不知者蔽，迷而不返者惑，以言取怨者祸，令与心乖者废，后令缪前者毁，怒而无威者犯，好众辱人者殃，戮辱所任者危，慢其所敬者凶，貌合心离者孤，亲谗远忠者亡，近色远贤者昏，女谒公行者乱，私人以官者浮，凌下取胜者侵，名不胜实者耗。略己而责人者不治，自厚而薄人者弃废。以过弃功者损，群下外异者沦，既用不任者疏，行赏吝色者沮，多许少与者怨，既迎而拒者乖。薄施厚望者不报，贵而忘贱者不久。念旧而弃新功者凶，用人不得正者殆，强用人者不畜，为人择官者乱，失其所强者弱，决策于不仁者险，阴计外泄者败，厚敛薄施者凋。战士贫，游士富者衰；货赂公行者昧；闻善忽略，记过不忘者暴；所任不可信，所信不可任者浊。牧人以德者集，绳人以刑者散。小功不赏，则大功不立；小怨不赦，则大怨必生。赏不服人，罚不甘心者叛。赏及无功，罚及无罪者酷。听谗而美，闻谏而仇者亡。能有其有者安，贪人之有者残。</p><p>【译文】</p><p>在部下面前显示高明，一定会遭到愚弄。有过错而不能自知，一定会受到蒙蔽。走入迷途而不知返回正道，一定是神志惑乱。因为语言招致怨恨，一定会有祸患。思想与政令矛盾，一定会坏事。政令前后不一，一定会失败。发怒却无人畏惧，一定会受到侵犯。喜欢当众侮辱别人，一定会有灾难。对手下的大将罚之过当，一定会有危险。怠慢应受尊重的人，一定会招致不幸。表面上关系密切，实际上心怀异志的，一定会陷于孤独。亲近谗慝，远离忠良，一定会灭亡。亲近女色，疏远贤人，必是昏瞆目盲。女子干涉大政，一定会有动乱。随便将官职到处乱送，政治就会出现乱相。欺凌下属而获得胜利的，自己也一定会受到下属的侵犯。所享受的名声超过自己的实际才能，即使耗尽精力也治理不好事务。对自己马虎，对别人求全责备的，无法处理事务。对自己宽厚，对别人刻薄的，一定被众人遗弃。因为小过失便取消别人的功劳的，一定会大失人心。部下纷纷有离异之心，必定沦亡。既然用了人却不给予信任，必定导致关系疏远。论功行赏时吝啬小气，形于颜色，必定使人感到沮丧。承诺多，兑现少，必招致怨恨。起初竭诚欢迎，末了又拒于门外，一定会恩断义绝。给予别人很少，却希望得到厚报的，一定会大失所望。富贵之后就忘却贫贱时候的情状，一定不会长久。念及别人旧恶，忘记其所立新功的，一定遭来大凶。任用邪恶之徒，一定会有危险。勉强用人，一定留不住人。用人无法摆脱人情纠结，政事必越理越乱。失去自己的优势，力量必然削弱。处理问题、制定决策时向不仁之人问计，必有危险。秘密的计划泄露出去，一定会失败。横征暴敛、薄施寡恩，一定会衰落。奋勇征战的将士生活贫穷，鼓舌摇唇的游士安享富贵，国势一定会衰落。贿赂政府官员的事到处可见，政治必定十分昏暗。知道别人的优点长处却不重视，对别人的缺点错误反而耿耿于怀的，则是作风粗暴。使用的人不堪信任，信任的人又不能胜任其职，这样的政治一定很混浊。依靠道德的力量来治理人民，人民就会团结；若一味地依靠刑法来维持统治，则人民将离散而去。小的功劳不奖赏，便不会建立大功劳；小的怨恨不宽赦，大的怨恨便会产生。奖赏不能服人，处罚不能让人甘心，必定引起叛乱；赏及无功之人，罚及无罪之人，就是所谓的残酷。听到谗佞之言就十分高兴，听到忠谏之言便心生怨恨，一定灭亡。藏富于民，以百姓的富有作为本身的富有，这样才会安定；欲壑难填，总是贪求别人所有的，必然残民以逞。</p><h3 id="第六章-安礼"><a href="#第六章-安礼" class="headerlink" title="第六章 安礼"></a>第六章 安礼</h3><p>【原文】</p><p>怨在不舍小过，患在不预定谋。福在积善，祸在积恶。饥在贱农，寒在堕织。安在得人，危在失事。富在迎来，贫在弃时。上无常操，下多疑心。轻上生罪，侮下无亲。近臣不重，远臣轻之。自疑不信人，自信不疑人。枉士无正友，曲上无直下。危国无贤人，乱政无善人。爱人深者求贤急，乐得贤者养人厚。国将霸者士皆归，邦将亡者贤先避。地薄者大物不产，水浅者大鱼不游，树秃者大禽不栖，林疏者大兽不居。山峭者崩，泽满者溢。弃玉取石者盲，羊质虎皮者柔。衣不举领者倒，走不视地者颠。柱弱者屋坏，辅弱者国倾。足寒伤心，人怨伤国。山将崩者下先隳，国将衰者人先弊。根枯枝朽，人困国残。与覆车同轨者倾，与亡国同事者灭。见已生者慎将生，恶其迹者须避之。畏危者安，畏亡者存。夫人之所行，有道则吉，无道则凶。吉者，百福所归；凶者，百祸所攻。非其神圣，自然所钟。务善策者无恶事，无远虑者有近忧。同志相得，同仁相忧，同恶相党，同爱相求，同美相妒，同智相谋，同贵相害，同利相忌，同声相应，同气相感，同类相依，同义相亲，同难相济，同道相成，同艺相规，同巧相胜：此乃数之所得，不可与理违。释己而教人者逆，正己而化人者顺。逆者难从，顺者易行，难从则乱，易行则理。如此理身、理国、理家，可也！</p><p>【译文】</p><p>怨恨产生于不肯赦免小的过失；祸患产生于事前未作仔细的谋画；幸福在于积善累德；灾难在于多行不义。轻视农业，必招致饥馑；惰于蚕桑，必挨冷受冻。得人必安，失士则危。招来远客即富，荒废农时则贫。上位者反覆无常，言行不一，部属必生猜疑之心，以求自保。对上官轻视怠慢，必定获罪；对下属侮辱傲慢，必定失去亲附。近幸左右之臣不受尊重，关系疏远之臣必不安其位。自己怀疑自己，则不会信任别人；自己相信自己，则不会怀疑别人。邪恶之士决无正直的朋友；邪僻的上司必没有公正刚直的部下。行将灭亡的国家，决不会有贤人辅政；陷于混乱的政治，决不会有善人参与。爱人深者，一定急于求贤才，乐得于贤才者，待人一定丰厚。国家即将称霸，人才都会聚集来归；邦国即将败亡，贤者先行隐避。土地贫瘠，大物不产；水浅之处，大鱼不游；秃树之上，大禽不栖；疏林之中，大兽不居。山势过于陡峭，则容易崩塌；沼泽蓄水过满，则会漫溢出来。弃玉抱石者目光如盲，羊质虎皮者虚于矫饰。拿衣服时不提领子，势必把衣服拿倒。走路不看地面的一定会跌倒。</p><p>房屋梁柱软弱，屋子会倒塌；才力不足的人掌政，国家会倾覆。脚下受寒，心肺受损；人心怀恨，国家受伤。大山将要崩塌，土质会先毁坏；国家将要衰亡，人民先受损害。树根干枯，枝条就会腐朽；人民困窘，国家将受伤害。与倾覆的车子走同一轨道的车，也会倾覆；与灭亡的国家做相同的事，也会灭亡。见到已发生的事情，应警惕还将发生类似的事情；预见险恶的人事，应事先回避。害怕危险，常能得安全；害怕灭亡，反而能生存。人的所作所为，符合行事之道则吉，不符合行事之道则凶。吉祥的人，各种各样的好处都到他那里；不吉祥的人，各种各样的恶运灾祸都向他袭来。这并不是什么奥妙的事，而是自然之理。务善策者无恶事，无远虑者有近忧。同志相得，同仁同忧，同恶相党，同爱同求，同美相妒，同智相谋，同贵相害，同利相忌。同声相应，同气相感，同类相似，同义相亲，同难相济。同道相成，同艺相窥，同巧相胜。以上这些都是自然而然的道理，凡人类有所举措，均应遵守这些规律，不可与理相抗。把自己放在一边，单纯去教育别人，别人就不接受他的大道理；如果严格要求自己，进而去感化别人，别人就会顺服。违反常理，部属则难以顺从；合乎常理，则办事容易。部属难以顺从，则容易产生动乱；办事容易，则能得到畅通的治理。</p><blockquote><p>以上所述的各项事理，用在修身、持家、治国，均会获得丰硕的效果。</p></blockquote><blockquote><p>传播国学文化，分享智慧人生！</p></blockquote><blockquote><p>以上内容均来之互联网，如有侵权请联系我。 </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;《素书》&quot;&gt;&lt;a href=&quot;#《素书》&quot; class=&quot;headerlink&quot; title=&quot;《素书》&quot;&gt;&lt;/a&gt;《素书》&lt;/h2&gt;&lt;p&gt;《素书》以道家思想为宗旨，集儒、法、兵的思想发挥道的作用及功能，同时以道、德、仁、义、礼为立身治国的根本、揆度宇宙万物自然运化的理数，以此认识事物，对应事物、处理事物的智能之作。&lt;/p&gt;
&lt;p&gt;有一个典故大概大家都知道，黄石公故意把鞋子弄到桥下，张良毕恭毕敬的为老人拾鞋穿鞋，后来老人又几次考验张良，张良终于通过了考验，于是黄石公就把自己的一本书传授给了张良，这部书的名字有传说叫做《太公兵法》，其实是以讹传讹，这部书的名字应该叫做《素书》。张良却没有把这部书传给后人，而是将书埋进了自己的坟墓。张良死后大约五百年，盗墓人从张良墓里偷了这本书，才在民间流传开来。这段故事记载于宋朝人张商英为《素书》写的序里。张良虽然用这部书里的知识帮助刘邦取得了天下，但是张良也没有完全领悟书中的奥义。此典故正式名曰“圯桥授书”。&lt;/p&gt;
&lt;p&gt;《素书》全书一百三十二句，共六章：原始、正道、求人之志、本德宗道、遵义和安礼。但这本书的内容可非同寻常，不仅包含治国安邦大谋略，更有修身处世、为人之道的智慧，每一句箴言都是切中要害，一针见血，读来如醍醐灌顶、豁然顿悟，其对人生的指导意义不言而喻，值得我们每个人读上一读。&lt;/p&gt;
    
    </summary>
    
      <category term="doc" scheme="https://sukbeta.github.io/categories/doc/"/>
    
    
      <category term="doc" scheme="https://sukbeta.github.io/tags/doc/"/>
    
  </entry>
  
  <entry>
    <title>制作rsyslog服务将日志输入到kafka</title>
    <link href="https://sukbeta.github.io/rsyslog-to-kafka/"/>
    <id>https://sukbeta.github.io/rsyslog-to-kafka/</id>
    <published>2021-12-07T09:49:18.000Z</published>
    <updated>2024-07-10T05:47:08.818Z</updated>
    
    <content type="html"><![CDATA[<p>有一些服务，需要将日志打到UDP端口， 其实也可以打到本机的rsyslog服务，但是我的服务已经上容器了， 还不想没个容器都封装rsyslog服务，也不像挂载， 就想着把rsyslog封装成为一个服务发布。谁都可以调用。</p><p>那么问题来了， rsyslog将日志怎么处理，怎么区分？</p><ul><li>我这是比较固定的日志格式， 不用做过多处理，</li><li>rsyslog 将收到的日志，直接抓发到kafka上。本地不留数据。</li><li>rsyslog启多个端口，通过端口来区别放到哪个kafka topic上。</li><li>也可以通过local级别来区分，我这里没做。</li></ul><a id="more"></a><p>简单的是有 Dcokerfile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line">MAINTAINER Shining-YS</span><br><span class="line">RUN yum install -y rsyslog rsyslog-kafka lz4 libfastjson libestr</span><br><span class="line"></span><br><span class="line">COPY rsyslog.conf /etc/rsyslog.conf</span><br><span class="line">COPY tokafka.conf /etc/rsyslog.d/tokafka.conf</span><br><span class="line">COPY rsyslog  /etc/sysconfig/rsyslog</span><br><span class="line"></span><br><span class="line">EXPOSE 514</span><br><span class="line"></span><br><span class="line">#CMD [&quot;/usr/sbin/rsyslogd&quot;,&quot;-dn&quot;]</span><br><span class="line">CMD [&quot;/usr/sbin/rsyslogd&quot;,&quot;-n&quot;]</span><br></pre></td></tr></table></figure><p>这其中包括及个文件， 我就直接列出来了</p><p>rsyslog.conf   主要是开启514端口，TCP和UDP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"># rsyslog configuration file</span><br><span class="line"></span><br><span class="line"># For more information see /usr/share/doc/rsyslog-*/rsyslog_conf.html</span><br><span class="line"># If you experience problems, see http://www.rsyslog.com/doc/troubleshoot.html</span><br><span class="line"></span><br><span class="line">#### MODULES ####</span><br><span class="line"></span><br><span class="line"># The imjournal module bellow is now used as a message source instead of imuxsock.</span><br><span class="line">$ModLoad imuxsock # provides support for local system logging (e.g. via logger command)</span><br><span class="line">$ModLoad imjournal # provides access to the systemd journal</span><br><span class="line">#$ModLoad imklog # reads kernel messages (the same are read from journald)</span><br><span class="line">#$ModLoad immark  # provides --MARK-- message capability</span><br><span class="line"></span><br><span class="line"># Provides UDP syslog reception</span><br><span class="line">$ModLoad imudp</span><br><span class="line">$UDPServerRun 514</span><br><span class="line"></span><br><span class="line"># Provides TCP syslog reception</span><br><span class="line">$ModLoad imtcp</span><br><span class="line">$InputTCPServerRun 514</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### GLOBAL DIRECTIVES ####</span><br><span class="line"></span><br><span class="line"># Where to place auxiliary files</span><br><span class="line">$WorkDirectory /var/lib/rsyslog</span><br><span class="line"></span><br><span class="line"># Use default timestamp format</span><br><span class="line">$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat</span><br><span class="line"></span><br><span class="line"># File syncing capability is disabled by default. This feature is usually not required,</span><br><span class="line"># not useful and an extreme performance hit</span><br><span class="line">#$ActionFileEnableSync on</span><br><span class="line"></span><br><span class="line"># Include all config files in /etc/rsyslog.d/</span><br><span class="line">$IncludeConfig /etc/rsyslog.d/*.conf</span><br><span class="line"></span><br><span class="line"># Turn off message reception via local log socket;</span><br><span class="line"># local messages are retrieved through imjournal now.</span><br><span class="line">$OmitLocalLogging on</span><br><span class="line"></span><br><span class="line"># File to store the position in the journal</span><br><span class="line">$IMJournalStateFile imjournal.state</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### RULES ####</span><br><span class="line"></span><br><span class="line"># Log all kernel messages to the console.</span><br><span class="line"># Logging much else clutters up the screen.</span><br><span class="line">#kern.*                                                 /dev/console</span><br><span class="line"></span><br><span class="line"># Log anything (except mail) of level info or higher.</span><br><span class="line"># Don&apos;t log private authentication messages!</span><br><span class="line">*.info;mail.none;authpriv.none;cron.none                /var/log/messages</span><br><span class="line"></span><br><span class="line"># The authpriv file has restricted access.</span><br><span class="line">authpriv.*                                              /var/log/secure</span><br><span class="line"></span><br><span class="line"># Log all the mail messages in one place.</span><br><span class="line">mail.*                                                  -/var/log/maillog</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Log cron stuff</span><br><span class="line">cron.*                                                  /var/log/cron</span><br><span class="line"></span><br><span class="line"># Everybody gets emergency messages</span><br><span class="line">*.emerg                                                 :omusrmsg:*</span><br><span class="line"></span><br><span class="line"># Save news errors of level crit and higher in a special file.</span><br><span class="line">uucp,news.crit                                          /var/log/spooler</span><br><span class="line"></span><br><span class="line"># Save boot messages also to boot.log</span><br><span class="line">local7.*                                                /var/log/boot.log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ### begin forwarding rule ###</span><br><span class="line"># The statement between the begin ... end define a SINGLE forwarding</span><br><span class="line"># rule. They belong together, do NOT split them. If you create multiple</span><br><span class="line"># forwarding rules, duplicate the whole block!</span><br><span class="line"># Remote Logging (we use TCP for reliable delivery)</span><br><span class="line">#</span><br><span class="line"># An on-disk queue is created for this action. If the remote host is</span><br><span class="line"># down, messages are spooled to disk and sent when it is up again.</span><br><span class="line">#$ActionQueueFileName fwdRule1 # unique name prefix for spool files</span><br><span class="line">#$ActionQueueMaxDiskSpace 1g   # 1gb space limit (use as much as possible)</span><br><span class="line">#$ActionQueueSaveOnShutdown on # save messages to disk on shutdown</span><br><span class="line">#$ActionQueueType LinkedList   # run asynchronously</span><br><span class="line">#$ActionResumeRetryCount -1    # infinite retries if host is down</span><br><span class="line"># remote host is: name/ip:port, e.g. 192.168.0.1:514, port optional</span><br><span class="line">#*.* @@remote-host:514</span><br><span class="line"># ### end of the forwarding rule ###</span><br></pre></td></tr></table></figure><p>rsyslog 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Options for rsyslogd</span><br><span class="line"># Syslogd options are deprecated since rsyslog v3.</span><br><span class="line"># If you want to use them, switch to compatibility mode 2 by &quot;-c 2&quot;</span><br><span class="line"># See rsyslogd(8) for more details</span><br><span class="line">SYSLOGD_OPTIONS=&quot;-r -m 0&quot;</span><br></pre></td></tr></table></figure><p>tokafka.conf  通过端口将日志写入到kakfa不同topic</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">module(load=&quot;omkafka&quot;)</span><br><span class="line">module(load=&quot;imudp&quot;)</span><br><span class="line">module(load=&quot;imtcp&quot;)</span><br><span class="line">input(type=&quot;imudp&quot; port=&quot;514&quot; ruleset=&quot;tokafka&quot;)</span><br><span class="line">input(type=&quot;imtcp&quot; port=&quot;514&quot; ruleset=&quot;tokafka&quot;)</span><br><span class="line"></span><br><span class="line">ruleset(name=&quot;tokafka&quot;) &#123;</span><br><span class="line">      #输出到kafka</span><br><span class="line">      action(type=&quot;omkafka&quot; topic=&quot;shining_test1&quot; broker=&quot;kafka1:9092,kafka2:9092,hkafka3:9092&quot; partitions.number=&quot;5&quot;)</span><br><span class="line">      #输出到文件</span><br><span class="line">      #action(type=&quot;omfile&quot; file=&quot;/tmp/shining_test1.log&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ruleset(name=&quot;shining_test2&quot;) &#123;</span><br><span class="line">      action(type=&quot;omkafka&quot; topic=&quot;shining_test2&quot; broker=&quot;kafka1:9092,kafka2:9092,hkafka3:9092&quot; partitions.number=&quot;5&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ruleset(name=&quot;shining_test3&quot;) &#123;</span><br><span class="line">      action(type=&quot;omkafka&quot; topic=&quot;shining_test2&quot; broker=&quot;kafka1:9092,kafka2:9092,hkafka3:9092&quot; partitions.number=&quot;5&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ruleset(name=&quot;shining_test4&quot;) &#123;</span><br><span class="line">      action(type=&quot;omkafka&quot; topic=&quot;shining_test3&quot; broker=&quot;kafka1:9092,kafka2:9092,hkafka3:9092&quot; partitions.number=&quot;5&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input(type=&quot;imudp&quot; port=&quot;7510&quot; ruleset=&quot;shining_test4&quot;)</span><br><span class="line">input(type=&quot;imtcp&quot; port=&quot;7510&quot; ruleset=&quot;shining_test4&quot;)</span><br><span class="line">input(type=&quot;imudp&quot; port=&quot;7511&quot; ruleset=&quot;shining_test2&quot;)</span><br><span class="line">input(type=&quot;imtcp&quot; port=&quot;7511&quot; ruleset=&quot;shining_test2&quot;)</span><br><span class="line">input(type=&quot;imudp&quot; port=&quot;7512&quot; ruleset=&quot;shining_test3&quot;)</span><br><span class="line">input(type=&quot;imtcp&quot; port=&quot;7512&quot; ruleset=&quot;shining_test3&quot;)</span><br></pre></td></tr></table></figure><p>其中 omkafka 模块参数说明，可以参考：<br><a href="https://rsyslog.readthedocs.io/en/latest/configuration/modules/omkafka.html" target="_blank" rel="noopener">https://rsyslog.readthedocs.io/en/latest/configuration/modules/omkafka.html</a></p><p>For Example</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#加载omkafka和imfile模块</span><br><span class="line">module(load=&quot;omkafka&quot;)</span><br><span class="line">module(load=&quot;imfile&quot;)</span><br><span class="line"></span><br><span class="line"># nginx template</span><br><span class="line">template(name=&quot;nginxAccessTemplate&quot; type=&quot;string&quot; string=&quot;%hostname%&lt;-+&gt;%syslogtag%&lt;-+&gt;%msg%\n&quot;)</span><br><span class="line"></span><br><span class="line"># ruleset</span><br><span class="line">ruleset(name=&quot;nginx-kafka&quot;) &#123;</span><br><span class="line">    #日志转发kafka</span><br><span class="line">    action (</span><br><span class="line">        type=&quot;omkafka&quot;</span><br><span class="line">        template=&quot;nginxAccessTemplate&quot;</span><br><span class="line">        confParam=[&quot;compression.codec=snappy&quot;, &quot;queue.buffering.max.messages=400000&quot;]</span><br><span class="line">        partitions.number=&quot;4&quot;</span><br><span class="line">        topic=&quot;test_nginx&quot;</span><br><span class="line">        broker=&quot;localhost:9092&quot;</span><br><span class="line">        queue.spoolDirectory=&quot;/tmp&quot;</span><br><span class="line">        queue.filename=&quot;test_nginx_kafka&quot;</span><br><span class="line">        queue.size=&quot;360000&quot;</span><br><span class="line">        queue.maxdiskspace=&quot;2G&quot;</span><br><span class="line">        queue.highwatermark=&quot;216000&quot;</span><br><span class="line">        queue.discardmark=&quot;350000&quot;</span><br><span class="line">        queue.type=&quot;LinkedList&quot; </span><br><span class="line">        queue.dequeuebatchsize=&quot;4096&quot;</span><br><span class="line">        queue.timeoutenqueue=&quot;0&quot;</span><br><span class="line">        queue.maxfilesize=&quot;10M&quot; </span><br><span class="line">        queue.saveonshutdown=&quot;on&quot;</span><br><span class="line">        queue.workerThreads=&quot;4&quot;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 定义消息来源及设置相关的action</span><br><span class="line">input(type=&quot;imfile&quot; Tag=&quot;nginx,aws&quot; File=&quot;/usr/local/nginx/logs/access.log&quot; Ruleset=&quot;nginx-kafka&quot;)</span><br></pre></td></tr></table></figure><p>docker 镜像编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t rsyslog-to-kafka:latest .</span><br></pre></td></tr></table></figure><p>启动容器，还需要映射UDP端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name rsyslog-to -kafka -p 514:514 -p 514:514/udp  -p 7510: 7510 -p 7510: 7510/udp -p 7511: 7511 -p 7511: 7511/udp -p 7512: 7512 -p 7512: 7512/udp rsyslog-to-kafka:latest</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有一些服务，需要将日志打到UDP端口， 其实也可以打到本机的rsyslog服务，但是我的服务已经上容器了， 还不想没个容器都封装rsyslog服务，也不像挂载， 就想着把rsyslog封装成为一个服务发布。谁都可以调用。&lt;/p&gt;
&lt;p&gt;那么问题来了， rsyslog将日志怎么处理，怎么区分？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我这是比较固定的日志格式， 不用做过多处理，&lt;/li&gt;
&lt;li&gt;rsyslog 将收到的日志，直接抓发到kafka上。本地不留数据。&lt;/li&gt;
&lt;li&gt;rsyslog启多个端口，通过端口来区别放到哪个kafka topic上。&lt;/li&gt;
&lt;li&gt;也可以通过local级别来区分，我这里没做。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="docker" scheme="https://sukbeta.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://sukbeta.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>marathon通过api更新update app id</title>
    <link href="https://sukbeta.github.io/marathon-api-update/"/>
    <id>https://sukbeta.github.io/marathon-api-update/</id>
    <published>2021-10-01T11:06:36.000Z</published>
    <updated>2024-07-10T07:32:36.580Z</updated>
    
    <content type="html"><![CDATA[<h3 id="marathon-api-方法"><a href="#marathon-api-方法" class="headerlink" title="marathon api 方法"></a>marathon api 方法</h3><p>发布程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如： json文件名为  nginx-test.json</span><br><span class="line">curl -X POST http://10.0.0.25:8080/v2/apps -d @nginx-test.json -H &quot;Content-type: application/json”</span><br></pre></td></tr></table></figure><p>更新程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例如： nginx-test 这个app</span><br><span class="line">更新 nginx-test.json </span><br><span class="line">id 为 ：  /nginx/nginx-test</span><br><span class="line">curl -X PUT http://10.0.0.25:8080/v2/apps/nginx/nginx-test -d @nginx-test.json -H &quot;Content-type: application/json”</span><br></pre></td></tr></table></figure><p>强制杀掉 deployment:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">marathonAddr=&quot;http://ip:8080&quot;;</span><br><span class="line">deployment_id=&quot;1463-672-414-839-cb32&quot;;</span><br><span class="line">apiPath=&quot;/v2/deployments/$&#123;deployment_id&#125;&quot;</span><br><span class="line">curl -X DELETE $&#123;marathonAddr&#125;$&#123;apiPath&#125;?force=true</span><br><span class="line">或</span><br><span class="line">curl -X DELETE http://localhost:8080/v2/apps/io-test?force=true  -H &quot;Content-type: application/json&quot;</span><br></pre></td></tr></table></figure><a id="more"></a><p>更新某个变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 更新实例数</span><br><span class="line">curl -XPUT localhost:8080/v2/apps/path/to/app/app123 -d &apos;&#123;&quot;instances&quot;:20&#125;&apos;</span><br><span class="line"></span><br><span class="line"># 更新节点亲和性</span><br><span class="line">ID=/test/abc123</span><br><span class="line">curl -u user1:passwd -H &quot;Content-type: application/json&quot; -X PUT http://localhost:8080/v2/apps$&#123;ID&#125; -d &apos;&#123;&quot;constraints&quot;: [[&quot;node1&quot;, &quot;LIKE&quot;, &quot;true&quot;]]&#125;&apos;</span><br><span class="line"></span><br><span class="line"># 更新j镜像</span><br><span class="line">ID=/test/abc123</span><br><span class="line">curl -u user1:passwd -H &quot;Content-type: application/json&quot; -X PUT http://localhost:8080/v2/apps$&#123;ID&#125; -d &apos;&#123;&quot;container&quot;: &#123;&quot;docker&quot;: &#123;&quot;image&quot;:&quot;nginx:1.13&quot;&#125;&#125;&#125;&apos;</span><br></pre></td></tr></table></figure><p>获取 app 信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 获取到所有的id</span><br><span class="line">curl -s http://cmc-marathon.inc-mtime.com/v2/apps | jq .apps[].id</span><br></pre></td></tr></table></figure><p>restart</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ID=/test/test-mysql</span><br><span class="line">curl -u user:passwd123 -X POST -H &quot;Content-type: application/json&quot; http://localhost:8080/v2/apps/$&#123;ID&#125;/restart</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;marathon-api-方法&quot;&gt;&lt;a href=&quot;#marathon-api-方法&quot; class=&quot;headerlink&quot; title=&quot;marathon api 方法&quot;&gt;&lt;/a&gt;marathon api 方法&lt;/h3&gt;&lt;p&gt;发布程序：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;例如： json文件名为  nginx-test.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	curl -X POST http://10.0.0.25:8080/v2/apps -d @nginx-test.json -H &amp;quot;Content-type: application/json”&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更新程序：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;例如： nginx-test 这个app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	更新 nginx-test.json &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	id 为 ：  /nginx/nginx-test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	curl -X PUT http://10.0.0.25:8080/v2/apps/nginx/nginx-test -d @nginx-test.json -H &amp;quot;Content-type: application/json”&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;强制杀掉 deployment:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;marathonAddr=&amp;quot;http://ip:8080&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deployment_id=&amp;quot;1463-672-414-839-cb32&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apiPath=&amp;quot;/v2/deployments/$&amp;#123;deployment_id&amp;#125;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl -X DELETE $&amp;#123;marathonAddr&amp;#125;$&amp;#123;apiPath&amp;#125;?force=true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;或&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl -X DELETE http://localhost:8080/v2/apps/io-test?force=true  -H &amp;quot;Content-type: application/json&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="marathon" scheme="https://sukbeta.github.io/categories/marathon/"/>
    
    
      <category term="marathoin" scheme="https://sukbeta.github.io/tags/marathoin/"/>
    
  </entry>
  
  <entry>
    <title>mac iterm2 login shell</title>
    <link href="https://sukbeta.github.io/mac-iterm-shell/"/>
    <id>https://sukbeta.github.io/mac-iterm-shell/</id>
    <published>2021-08-30T07:33:02.000Z</published>
    <updated>2023-12-26T02:06:13.525Z</updated>
    
    <content type="html"><![CDATA[<p>Mac OS自带的终端，用起来虽然有些不太方便，界面也不够友好,iTerm2是一款相对比较好用的终端工具.iTerm2常用操作包括主题选择、声明高亮、自动填充建议、隐藏用户名和主机名、分屏效果等.  </p><p>Mac 暗转 itrem2 的文章很多， 我就不写太多了。  </p><p>itrem2 官网下载： <a href="https://iterm2.com/downloads.html" target="_blank" rel="noopener">https://iterm2.com/downloads.html</a></p><p>可以用命令直接安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install iterm2</span><br></pre></td></tr></table></figure><p>创建登入脚本，密码设置好，通过传入参数，登入不同机器。</p><p>vim  allssh</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/expect</span><br><span class="line">set timeout 2</span><br><span class="line">set password loginpasswd</span><br><span class="line">set port [lindex $argv 0]</span><br><span class="line">set user [lindex $argv 1]</span><br><span class="line">set host [lindex $argv 2]</span><br><span class="line">spawn ssh -p  $port -l $user $host</span><br><span class="line">expect &#123;</span><br><span class="line">&quot;*continue connecting*&quot;</span><br><span class="line">&#123;send &quot;yes\r&quot;;exp_continue;&#125;</span><br><span class="line">        &quot;*password*&quot;</span><br><span class="line">        &#123;send &quot;$password\n&quot;&#125;</span><br><span class="line">&#125;</span><br><span class="line">interact</span><br></pre></td></tr></table></figure><p>保存脚本，执行的时候需要传入  端口、用户、主机地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./allssh 22 root 192.168.1.243</span><br></pre></td></tr></table></figure><p>在来一个例子：</p><p>密码也会传输。</p><p>vim  autossh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/expect</span><br><span class="line">set timeout 2</span><br><span class="line">set PORT 22</span><br><span class="line">set USER root</span><br><span class="line">set IP [lindex $argv 0]</span><br><span class="line">set PASS [lindex $argv 1]</span><br><span class="line">if ![string compare $PASS &quot;&quot;] &#123;   # //此处花括号前必须有一个空格，具体请参考TCL语言规范</span><br><span class="line">#    //如果PASS变量为空字符串</span><br><span class="line">    set PASS loginpasswd</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">spawn ssh -p $PORT -l $USER $IP</span><br><span class="line">expect &#123;</span><br><span class="line">&quot;*continue connecting*&quot;</span><br><span class="line">&#123;send &quot;yes\r&quot;;exp_continue;&#125;</span><br><span class="line">        &quot;*password*&quot;</span><br><span class="line">        &#123;send &quot;$PASS\n&quot;&#125;</span><br><span class="line">&#125;</span><br><span class="line">interact</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./autossh 192.168.1.243 </span><br><span class="line">或</span><br><span class="line">./autossh 192.168.1.243 newloginpasswd</span><br></pre></td></tr></table></figure><p>在来一个三级登入的例子，先登入堡垒机，在登入跳板机， 在登入内网的机器。</p><p>vim ssh-gate</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/expect</span><br><span class="line">set host [lindex $argv 0]</span><br><span class="line">set TERMSERV 192.168.2.2</span><br><span class="line">set USER baoleiji</span><br><span class="line">set PASSWORD baoleijipasswd</span><br><span class="line">set TBIP 192.168.2.3</span><br><span class="line">set UATUN tiaobanji</span><br><span class="line">set UATPWD tiaobanjipasswd</span><br><span class="line"></span><br><span class="line"># 登录堡垒机</span><br><span class="line">spawn ssh -p 22 -l $USER $TERMSERV</span><br><span class="line">expect &#123;</span><br><span class="line">        &quot;yes/no&quot; &#123;send &quot;yes\r&quot;;exp_continue;&#125;</span><br><span class="line">         &quot;*password:*&quot; &#123; send &quot;$PASSWORD\r&quot; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"># 登录跳板机</span><br><span class="line">expect &quot;*baoleiji@shining-gate00*&quot; &#123;send &quot;ssh -l $UATUN $TBIP\r&quot;&#125;</span><br><span class="line">expect &#123;</span><br><span class="line">        &quot;yes/no&quot; &#123;send &quot;yes\r&quot;;exp_continue;&#125;</span><br><span class="line">        &quot;*password:*&quot; &#123; send &quot;$UATPWD\r&quot; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"># 登入内网</span><br><span class="line">expect &quot;tiaobanji$*&quot; &#123;send &quot;ssh -l root $host\r&quot;&#125;</span><br><span class="line">interact</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ssh-gate  192.168.2.243</span><br></pre></td></tr></table></figure><p>另外，iterm2 的快捷键还是很好用的。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">登入可以在 Preferences -&gt; Profile -&gt; shortcut key  </span><br><span class="line">Command 里选择 Login Shell  </span><br><span class="line">Send text at start 填写你的脚本路径和命令： /home/autossh 192.168.1.243</span><br></pre></td></tr></table></figure><p>输入的快捷键也是很好用的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">可以在 Preferences -&gt; keys -&gt; 选择加号 ”+ “</span><br><span class="line">Keyboard Shortcut  设置快捷键，键盘输入</span><br><span class="line">Action 选择 Send Text</span><br><span class="line">下面输入你要输入的内容,  &quot;\n&quot;  代表回车，如：</span><br><span class="line">loginpasswd\n</span><br><span class="line">代表输入我呢密码之后回车。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mac OS自带的终端，用起来虽然有些不太方便，界面也不够友好,iTerm2是一款相对比较好用的终端工具.iTerm2常用操作包括主题选择、声明高亮、自动填充建议、隐藏用户名和主机名、分屏效果等.  &lt;/p&gt;
&lt;p&gt;Mac 暗转 itrem2 的文章很多， 我就不写太多了。  &lt;/p&gt;
&lt;p&gt;itrem2 官网下载： &lt;a href=&quot;https://iterm2.com/downloads.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://iterm2.com/downloads.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以用命令直接安装：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew cask install iterm2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建登入脚本，密码设置好，通过传入参数，登入不同机器。&lt;/p&gt;
&lt;p&gt;vim  allssh&lt;/p&gt;
    
    </summary>
    
      <category term="mac" scheme="https://sukbeta.github.io/categories/mac/"/>
    
    
      <category term="shell" scheme="https://sukbeta.github.io/tags/shell/"/>
    
      <category term="mac" scheme="https://sukbeta.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>nginx qat on docker</title>
    <link href="https://sukbeta.github.io/qat-on-docker/"/>
    <id>https://sukbeta.github.io/qat-on-docker/</id>
    <published>2021-08-02T04:00:36.000Z</published>
    <updated>2023-12-26T02:12:54.661Z</updated>
    
    <content type="html"><![CDATA[<p>Intel QAT 加速卡可以对HTTPS的请求进行异步请求， 加快证书处理， 降低系统性能消耗。<br>nginx 作为代理， 可以代理HTTPS请求， 需要重新编译，支持QAT加速卡，这样才能将请求给QAT加速卡。<br>Intel QAT 加速卡安装在上一遍文章已经提到， 这里就不在说了， 可以查看之前文章。<br>这回我们说说如何把QAT卡封装到docker容器中。<br>我测试过了， 就算在docker容器中安装驱动， 也需要在宿主机上安装驱动。是值代理服务可以不用在宿主机上安装。  </p><p>intel qat 加速卡安装配置 ： <a href="https://sukbeta.github.io/intel-qat/">https://sukbeta.github.io/intel-qat/</a><br>宿主机上nginx配置qat：<a href="https://sukbeta.github.io/nginx-qat/">https://sukbeta.github.io/nginx-qat/</a></p><h5 id="相关URL"><a href="#相关URL" class="headerlink" title="相关URL"></a>相关URL</h5><a id="more"></a><p>nginx qat  docker container install ： <a href="https://01.org/sites/default/files/downloads//337020-003-qatwcontaineranddocker.pdf" target="_blank" rel="noopener">https://01.org/sites/default/files/downloads//337020-003-qatwcontaineranddocker.pdf</a></p><h5 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h5><p>简单安装一个docker服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br><span class="line">yum-config-manager --add-repo  https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">yum install docker-ce</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>修改docker limit</p><p>vim /usr/lib/systemd/system/docker.service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line">添加</span><br><span class="line">LimitMEMLOCK=infinity</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure><h5 id="Dockerfile-qat-nginx-on-docker"><a href="#Dockerfile-qat-nginx-on-docker" class="headerlink" title="Dockerfile  qat nginx on docker"></a>Dockerfile  qat nginx on docker</h5><p>首先宿主上是安装qat驱动的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7 AS build</span><br><span class="line">RUN yum install -y -q epel-release centos-release-scl</span><br><span class="line">RUN yum -y groupinstall &quot;Development Tools&quot;</span><br><span class="line">RUN yum install -y wget tar gcc-c++ make bzip2 make gcc zlib-devel libtool autoconf cmake make python gcc gawk autoconf automake libtool pkg-config patch pcre-devel libxslt-devel openssl openssl-devel zlib pcre libxslt perl perl-devel pciutils libudev-devel gzip unzip net-tools lsof bzip2 bzip2-devel kernel kernel-devel &amp;&amp; \</span><br><span class="line">rm -rf /var/yum/cache/*</span><br><span class="line">#ADD QAT.tar.gz /home/</span><br><span class="line">ARG ICP_ROOT=/home/QAT</span><br><span class="line">RUN mkdir $ICP_ROOT</span><br><span class="line">ADD QAT1.7.L.4.13.0-00009.tar.gz $ICP_ROOT</span><br><span class="line">RUN cd $ICP_ROOT &amp;&amp; ./configure &amp;&amp; make &amp;&amp; make install &amp;&amp; make samples-install</span><br><span class="line"></span><br><span class="line">ENV OPENSSL_LIB /usr/local/ssl</span><br><span class="line">ENV OPENSSL_ENGINES /usr/local/ssl/lib/engines-1.1</span><br><span class="line">ENV PERL5LIB $PERL5LIB:/home/openssl</span><br><span class="line">ENV PATH $PATH:/usr/local/sbin</span><br><span class="line">ENV SSL_INC /usr/local/ssl/include</span><br><span class="line">ENV SSL_LIB /usr/local/ssl/lib</span><br><span class="line">ENV QZ_ROOT /home/QATzip</span><br><span class="line">ENV OPENSSL_LIB /usr/local/ssl</span><br><span class="line">ENV ICP_ROOT /home/QAT</span><br><span class="line">ENV LD_LIBRARY_PATH $LD_LIBRARY_PATH:$QZ_ROOT/utils:/usr/lib64:/usr/local/lib64:/usr/local/ssl/lib:/usr/local/ssl/lib/engines-1.1:/usr/lib64/openssl/engines:$ICP_ROOT/build:/usr/local/lib</span><br><span class="line"></span><br><span class="line">#RUN cd /home &amp;&amp; git clone https://github.com/openssl/openssl.git</span><br><span class="line">#ADD openssl_github.tar.gz /home/</span><br><span class="line">ADD OpenSSL_1_1_1j.tar.gz /home/</span><br><span class="line">RUN cd /home/ &amp;&amp; mv openssl-OpenSSL_1_1_1j openssl</span><br><span class="line">RUN yum -y install yum-utils perl* judy</span><br><span class="line">RUNcd /home/openssl &amp;&amp; \</span><br><span class="line">./config --prefix=/usr/local/ssl -Wl,-rpath,/usr/local/ssl/lib &amp;&amp;\</span><br><span class="line">make depend &amp;&amp; \</span><br><span class="line">make &amp;&amp; \</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">##RUN cd /home &amp;&amp; git clone https://github.com/intel/QAT_Engine.git</span><br><span class="line">ADD QAT_Engine_github.tar.gz /home/</span><br><span class="line">RUN cd /home/QAT_Engine &amp;&amp; \</span><br><span class="line">./autogen.sh &amp;&amp; \</span><br><span class="line">./configure \</span><br><span class="line">--with-qat_hw_dir=/home/QAT \</span><br><span class="line">--enable-qat_sw \</span><br><span class="line">--with-openssl_install_dir=/usr/local/ssl &amp;&amp; \</span><br><span class="line">make &amp;&amp; \</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">RUN cd /home/QAT_Engine/qat_contig_mem &amp;&amp; \</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">RUN cd /home &amp;&amp; git clone https://github.com/intel/asynch_mode_nginx.git</span><br><span class="line">RUN cd /home &amp;&amp; wget http://nginx.org/download/nginx-1.18.0.tar.gz &amp;&amp; tar -zxf nginx-1.18.0.tar.gz</span><br><span class="line">#RUN cd /home &amp;&amp; diff -Naru -x .git nginx-1.18.0 asynch_mode_nginx &gt; async_mode_nginx_1.18.0.patch</span><br><span class="line">ADD patch.sh /home/</span><br><span class="line">RUN chmod +x /home/patch.sh &amp;&amp; bash /home/patch.sh</span><br><span class="line">RUN cd /home/nginx-1.18.0 &amp;&amp; patch -p1 &lt; ../async_mode_nginx_1.18.0.patch</span><br><span class="line"></span><br><span class="line">#RUN cd /home &amp;&amp; git clone https://github.com/intel/QATzip.git</span><br><span class="line">ADD ./QATzip-master.zip /home/</span><br><span class="line">RUN cd /home &amp;&amp; unzip QATzip-master.zip &amp;&amp; mv QATzip-master QATzip</span><br><span class="line">RUN cd /home/QATzip &amp;&amp; \</span><br><span class="line">./configure --with-ICP_ROOT=$ICP_ROOT &amp;&amp; \</span><br><span class="line">make clean &amp;&amp; \</span><br><span class="line">make all install</span><br><span class="line">#RUN cd /home/QATzip &amp;&amp; ./setenv.sh</span><br><span class="line"></span><br><span class="line">ARG NGINX_INSTALL_DIR=/home/nginx</span><br><span class="line">RUN cd /home/nginx-1.18.0 &amp;&amp; \</span><br><span class="line">./configure \</span><br><span class="line">        --prefix=$NGINX_INSTALL_DIR \</span><br><span class="line">        --with-http_ssl_module \</span><br><span class="line">        --add-dynamic-module=modules/nginx_qatzip_module \</span><br><span class="line">        --add-dynamic-module=modules/nginx_qat_module/ \</span><br><span class="line">        --with-cc-opt=&quot;-DNGX_SECURE_MEM -I$OPENSSL_LIB/include -I$ICP_ROOT/quickassist/include -I$ICP_ROOT/quickassist/include/dc -I$QZ_ROOT/include -Wno-error=deprecated-declarations&quot; \</span><br><span class="line">        --with-ld-opt=&quot;-Wl,-rpath=$OPENSSL_LIB/lib -L$OPENSSL_LIB/lib -L$QZ_ROOT/src -lqatzip -lz&quot; &amp;&amp; \</span><br><span class="line">make &amp;&amp; \</span><br><span class="line">make install</span><br><span class="line">ADD ./nginx-conf.tar.gz /home/nginx/conf/</span><br><span class="line">RUN ls /home</span><br><span class="line"></span><br><span class="line">EXPOSE 80 443</span><br><span class="line">CMD [&quot;/home/nginx/sbin/nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</span><br></pre></td></tr></table></figure><p>build  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t qat-centos .</span><br></pre></td></tr></table></figure><p>docker run</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm --ulimit memlock=-1:-1  $devpara -p 80:80 -p 443:443 qat-centos:latest /bin/bash</span><br><span class="line"># /home/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><h5 id="挂载方式运行"><a href="#挂载方式运行" class="headerlink" title="挂载方式运行"></a>挂载方式运行</h5><p>用挂载方式运行， 将宿主安装的目录挂载到容器中运行， 这样可以运行多个容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm --ulimit memlock=-1:-1  -v /home:/home -v /usr/local/ssl:/usr/local/ssl -v /usr/local/lib64:/usr/local/lib64 -v /dev/hugepages:/dev/hugepages $devpara -p 80:80 -p 443:443  centos:7 /bin/bash</span><br><span class="line"></span><br><span class="line">#  容器中设置黄精变量</span><br><span class="line">export OPENSSL_LIB=/usr/local/ssl</span><br><span class="line">export OPENSSL_ENGINES=/usr/local/ssl/lib/engines-1.1</span><br><span class="line">export PERL5LIB=$PERL5LIB:/home/openssl</span><br><span class="line">export PATH=$PATH:/usr/local/sbin</span><br><span class="line">export SSL_INC=/usr/local/ssl/include</span><br><span class="line">export SSL_LIB=/usr/local/ssl/lib</span><br><span class="line">export QZ_ROOT=/home/QATzip</span><br><span class="line">export OPENSSL_LIB=/usr/local/ssl</span><br><span class="line">export ICP_ROOT=/home/QAT</span><br><span class="line">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$QZ_ROOT/utils:/usr/lib64:/usr/local/lib64:/usr/local/ssl/lib:/usr/local/ssl/lib/engines-1.1:/usr/lib64/openssl/engines:$ICP_ROOT/build:/usr/local/lib</span><br><span class="line"></span><br><span class="line"># 容器中验证 qat 卡</span><br><span class="line">/usr/local/ssl/bin/openssl  engine -t -c -vvvv qatengine</span><br><span class="line"></span><br><span class="line"># 容器中启动nginx</span><br><span class="line">/home/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><h5 id="验证加速卡处理数据"><a href="#验证加速卡处理数据" class="headerlink" title="验证加速卡处理数据"></a>验证加速卡处理数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /sys/kernel/debug/qat_dh895xcc_0000\:07\:00.0/fw_counters</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Intel QAT 加速卡可以对HTTPS的请求进行异步请求， 加快证书处理， 降低系统性能消耗。&lt;br&gt;nginx 作为代理， 可以代理HTTPS请求， 需要重新编译，支持QAT加速卡，这样才能将请求给QAT加速卡。&lt;br&gt;Intel QAT 加速卡安装在上一遍文章已经提到， 这里就不在说了， 可以查看之前文章。&lt;br&gt;这回我们说说如何把QAT卡封装到docker容器中。&lt;br&gt;我测试过了， 就算在docker容器中安装驱动， 也需要在宿主机上安装驱动。是值代理服务可以不用在宿主机上安装。  &lt;/p&gt;
&lt;p&gt;intel qat 加速卡安装配置 ： &lt;a href=&quot;https://sukbeta.github.io/intel-qat/&quot;&gt;https://sukbeta.github.io/intel-qat/&lt;/a&gt;&lt;br&gt;宿主机上nginx配置qat：&lt;a href=&quot;https://sukbeta.github.io/nginx-qat/&quot;&gt;https://sukbeta.github.io/nginx-qat/&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;相关URL&quot;&gt;&lt;a href=&quot;#相关URL&quot; class=&quot;headerlink&quot; title=&quot;相关URL&quot;&gt;&lt;/a&gt;相关URL&lt;/h5&gt;
    
    </summary>
    
      <category term="qat" scheme="https://sukbeta.github.io/categories/qat/"/>
    
    
      <category term="qat" scheme="https://sukbeta.github.io/tags/qat/"/>
    
      <category term="nginx" scheme="https://sukbeta.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx 配置 Intel QAT 加速卡</title>
    <link href="https://sukbeta.github.io/nginx-qat/"/>
    <id>https://sukbeta.github.io/nginx-qat/</id>
    <published>2021-07-20T10:25:22.000Z</published>
    <updated>2024-07-10T07:50:15.019Z</updated>
    
    <content type="html"><![CDATA[<h4 id="nginx-配置-Intel-QAT-加速卡"><a href="#nginx-配置-Intel-QAT-加速卡" class="headerlink" title="nginx 配置 Intel QAT 加速卡"></a>nginx 配置 Intel QAT 加速卡</h4><p>Intel QAT 加速卡可以对HTTPS的请求进行异步请求， 加快证书处理， 降低系统性能消耗。<br>nginx 作为代理， 可以代理HTTPS请求， 需要重新编译，支持QAT加速卡，这样才能将请求给QAT加速卡。<br> Intel QAT 加速卡安装在上一遍文章已经提到， 这里就不在说了， 可以查看之前文章。<br>intel qat 加速卡安装配置 ： <a href="https://sukbeta.github.io/intel-qat/">https://sukbeta.github.io/intel-qat/</a>  </p><h5 id="相关URL"><a href="#相关URL" class="headerlink" title="相关URL"></a>相关URL</h5><p>Nginx QAT Instasll： <a href="https://01.org/sites/default/files/downloads//337020-003-qatwcontaineranddocker.pdf" target="_blank" rel="noopener">https://01.org/sites/default/files/downloads//337020-003-qatwcontaineranddocker.pdf</a></p><h5 id="下载所需要的安装包"><a href="#下载所需要的安装包" class="headerlink" title="下载所需要的安装包"></a>下载所需要的安装包</h5><p>nginx package</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home</span><br><span class="line">wget http://nginx.org/download/nginx-1.18.0.tar.gz</span><br></pre></td></tr></table></figure><a id="more"></a><p>nginx path  ,， nginx 需要打的path文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home </span><br><span class="line">git clone https://github.com/intel/asynch_mode_nginx.git</span><br></pre></td></tr></table></figure><p>QATzip ， nginx 上的压缩</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home </span><br><span class="line">git clone https://github.com/intel/QATzip.git</span><br></pre></td></tr></table></figure><p>开始干活</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /home</span><br><span class="line">tar -zxf nginx-1.18.0.tar.gz</span><br><span class="line">diff -Naru -x .git nginx-1.18.0 asynch_mode_nginx &gt; async_mode_nginx_1.18.0.patch</span><br><span class="line">cd /home/nginx-1.18.0 </span><br><span class="line">patch -p1 &lt; ../async_mode_nginx_1.18.0.patch</span><br></pre></td></tr></table></figure><h5 id="编译-QATzip"><a href="#编译-QATzip" class="headerlink" title="编译 QATzip"></a>编译 QATzip</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cd /home </span><br><span class="line">git clone https://github.com/intel/QATzip.git</span><br><span class="line">export QZ_ROOT=/home/QATzip</span><br><span class="line">echo 1024 &gt; /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages</span><br><span class="line">rmmod usdm_drv</span><br><span class="line">insmod $ICP_ROOT/build/usdm_drv.ko max_huge_pages=1024 max_huge_pages_per_process=16</span><br><span class="line">cd $QZ_ROOT</span><br><span class="line">./configure --with-ICP_ROOT=$ICP_ROOT</span><br><span class="line">make clean</span><br><span class="line">make all install</span><br><span class="line"> ./setenv.sh</span><br><span class="line"> </span><br><span class="line"> /etc/init.d/qat_service restart</span><br><span class="line">systemctl restart qat_service</span><br></pre></td></tr></table></figure><p>QATzip run test</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $QZ_ROOT/test/performance_tests</span><br><span class="line">./run_perf_test.sh</span><br></pre></td></tr></table></figure><h5 id="nginx-编译"><a href="#nginx-编译" class="headerlink" title="nginx 编译"></a>nginx 编译</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd /home/nginx-1.18.0</span><br><span class="line"> export NGINX_INSTALL_DIR=/home/nginx</span><br><span class="line">./configure \</span><br><span class="line">    --prefix=$NGINX_INSTALL_DIR \</span><br><span class="line">    --with-http_ssl_module \</span><br><span class="line">    --add-dynamic-module=modules/nginx_qatzip_module \</span><br><span class="line">    --add-dynamic-module=modules/nginx_qat_module/ \</span><br><span class="line">    --with-cc-opt=&quot;-DNGX_SECURE_MEM -I$OPENSSL_LIB/include -I$ICP_ROOT/quickassist/include -I$ICP_ROOT/quickassist/include/dc -I$QZ_ROOT/include -Wno-error=deprecated-declarations&quot; \</span><br><span class="line">    --with-ld-opt=&quot;-Wl,-rpath=$OPENSSL_LIB/lib -L$OPENSSL_LIB/lib -L$QZ_ROOT/src -lqatzip -lz&quot; </span><br><span class="line">make </span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h5 id="nginx-配置文件"><a href="#nginx-配置文件" class="headerlink" title="nginx 配置文件"></a>nginx 配置文件</h5><p>vim conf/nginx.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  10;</span><br><span class="line">user root;</span><br><span class="line">error_log logs/error.log;</span><br><span class="line"></span><br><span class="line">load_module modules/ngx_http_qatzip_filter_module.so;</span><br><span class="line">load_module modules/ngx_ssl_engine_qat_module.so;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections 102400;</span><br><span class="line">    accept_mutex off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Enable QAT engine in heretic mode.</span><br><span class="line">ssl_engine &#123;</span><br><span class="line">    use_engine qatengine;</span><br><span class="line">    default_algorithms RSA,EC,DH,DSA;</span><br><span class="line">    qat_engine &#123;</span><br><span class="line">        qat_offload_mode async;</span><br><span class="line">        qat_notify_mode poll;</span><br><span class="line">        qat_poll_mode heuristic;</span><br><span class="line">        qat_sw_fallback on;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length     128;</span><br><span class="line">    gzip_comp_level     1;</span><br><span class="line">    gzip_types  text/css text/javascript text/xml text/plain text/x-component application/javascript application/json application/xml application/rss+xml font/truetype font/opentype application/vnd.ms-fontobject image/svg+xml;</span><br><span class="line">    gzip_vary            on;</span><br><span class="line">    gzip_disable        &quot;msie6&quot;;</span><br><span class="line">    gzip_http_version   1.0;</span><br><span class="line"></span><br><span class="line">    qatzip_sw failover;</span><br><span class="line">    qatzip_min_length 128;</span><br><span class="line">    qatzip_comp_level 1;</span><br><span class="line">    qatzip_buffers 16 8k;</span><br><span class="line">    qatzip_types text/css text/javascript text/xml text/plain text/x-component application/javascript application/json application/xml application/rss+xml font/truetype font/opentype application/vnd.ms-fontobject image/svg+xml application/octet-stream image/jpeg;</span><br><span class="line">    qatzip_chunk_size   64k;</span><br><span class="line">    qatzip_stream_size  256k;</span><br><span class="line">    qatzip_sw_threshold 256;</span><br><span class="line"></span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    include server/*.conf;</span><br><span class="line"></span><br><span class="line">    # HTTP server with QATZip enabled.</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # HTTPS server with async mode.</span><br><span class="line">    server &#123;</span><br><span class="line">        #If QAT Engine enabled,  `asynch` need to add to `listen` directive or just add `ssl_asynch  on;` to the context.</span><br><span class="line">        listen       443 ssl asynch;</span><br><span class="line">access_log  logs/access.log  main;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        ssl_protocols       TLSv1.2;</span><br><span class="line">        ssl_certificate crt/ca.com.crt;</span><br><span class="line">        ssl_certificate_key crt/ca.com.key;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件需要添加的很明确， 就不多说了。   </p><p>run nginx server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><h5 id="验证QAT卡是否工作"><a href="#验证QAT卡是否工作" class="headerlink" title="验证QAT卡是否工作"></a>验证QAT卡是否工作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /sys/kernel/debug/qat_dh895xcc_0000\:07\:00.0/fw_counters</span><br></pre></td></tr></table></figure><p>这个是QAT卡计数的， 当QAT卡处理请求时， 这里会变化的。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;nginx-配置-Intel-QAT-加速卡&quot;&gt;&lt;a href=&quot;#nginx-配置-Intel-QAT-加速卡&quot; class=&quot;headerlink&quot; title=&quot;nginx 配置 Intel QAT 加速卡&quot;&gt;&lt;/a&gt;nginx 配置 Intel QAT 加速卡&lt;/h4&gt;&lt;p&gt;Intel QAT 加速卡可以对HTTPS的请求进行异步请求， 加快证书处理， 降低系统性能消耗。&lt;br&gt;nginx 作为代理， 可以代理HTTPS请求， 需要重新编译，支持QAT加速卡，这样才能将请求给QAT加速卡。&lt;br&gt; Intel QAT 加速卡安装在上一遍文章已经提到， 这里就不在说了， 可以查看之前文章。&lt;br&gt;intel qat 加速卡安装配置 ： &lt;a href=&quot;https://sukbeta.github.io/intel-qat/&quot;&gt;https://sukbeta.github.io/intel-qat/&lt;/a&gt;  &lt;/p&gt;
&lt;h5 id=&quot;相关URL&quot;&gt;&lt;a href=&quot;#相关URL&quot; class=&quot;headerlink&quot; title=&quot;相关URL&quot;&gt;&lt;/a&gt;相关URL&lt;/h5&gt;&lt;p&gt;Nginx QAT Instasll： &lt;a href=&quot;https://01.org/sites/default/files/downloads//337020-003-qatwcontaineranddocker.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://01.org/sites/default/files/downloads//337020-003-qatwcontaineranddocker.pdf&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;下载所需要的安装包&quot;&gt;&lt;a href=&quot;#下载所需要的安装包&quot; class=&quot;headerlink&quot; title=&quot;下载所需要的安装包&quot;&gt;&lt;/a&gt;下载所需要的安装包&lt;/h5&gt;&lt;p&gt;nginx package&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd /home&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget http://nginx.org/download/nginx-1.18.0.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="qat" scheme="https://sukbeta.github.io/categories/qat/"/>
    
    
      <category term="qat" scheme="https://sukbeta.github.io/tags/qat/"/>
    
      <category term="nginx" scheme="https://sukbeta.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Haproxy 配置 Intel QAT 加速卡</title>
    <link href="https://sukbeta.github.io/haproxy-qat/"/>
    <id>https://sukbeta.github.io/haproxy-qat/</id>
    <published>2021-07-20T09:46:11.000Z</published>
    <updated>2023-12-26T02:13:35.235Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Haproxy-配置-Intel-QAT-加速卡"><a href="#Haproxy-配置-Intel-QAT-加速卡" class="headerlink" title="Haproxy 配置 Intel QAT 加速卡"></a>Haproxy 配置 Intel QAT 加速卡</h4><p>Intel QAT 加速卡可以对HTTPS的请求进行异步请求， 加快证书处理， 降低系统性能消耗。<br>Haproxy 作为代理， 可以代理HTTPS请求， 需要重新编译，支持QAT加速卡，这样才能将请求给QAT加速卡。<br> Intel QAT 加速卡安装在上一遍文章已经提到， 这里就不在说了， 可以查看之前文章。<br>intel qat 加速卡安装配置 ： <a href="https://sukbeta.github.io/intel-qat/">https://sukbeta.github.io/intel-qat/</a>  </p><h5 id="相关URL"><a href="#相关URL" class="headerlink" title="相关URL"></a>相关URL</h5><p>haproxy QAT Install： <a href="https://01.org/sites/default/files/downloads/621658-1.1-qat-debugging-guide.pdf" target="_blank" rel="noopener">https://01.org/sites/default/files/downloads/621658-1.1-qat-debugging-guide.pdf </a><br> haproxy intel 测试配置:  <a href="https://software.intel.com/content/www/cn/zh/develop/articles/accelerating-ssl-load-balancers-with-intel-xeon-v3-processors.html" target="_blank" rel="noopener">https://software.intel.com/content/www/cn/zh/develop/articles/accelerating-ssl-load-balancers-with-intel-xeon-v3-processors.html</a></p><h5 id="Hadproxy-下载"><a href="#Hadproxy-下载" class="headerlink" title="Hadproxy 下载"></a>Hadproxy 下载</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home</span><br><span class="line">wget https://www.haproxy.org/download/1.9/src/haproxy-1.9.16.tar.gz</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd haproxy-1.9.16</span><br><span class="line">make TARGET=linux2628 ARCH=x86_64 USE_PCRE=1 USE_OPENSSL=1 USE_ZLIB=1 USE_CRYPT_H=1 USE_LIBCRYPT=1 SSL_INC=/usr/local/ssl/include SSL_LIB=/usr/local/ssl/lib ADDLIB=-ldl</span><br><span class="line">make install PREFIX=/usr/local/haproxy</span><br></pre></td></tr></table></figure><h5 id="Hadproxy-配置文件"><a href="#Hadproxy-配置文件" class="headerlink" title="Hadproxy 配置文件"></a>Hadproxy 配置文件</h5><p>需要再配置文件中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssl-engine qatengine algo ALL</span><br><span class="line">ssl-mode-async</span><br></pre></td></tr></table></figure><p>具体内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">  daemon</span><br><span class="line">  log 127.0.0.1 local1 debug</span><br><span class="line">  maxconn 65535</span><br><span class="line">  ssl-engine qatengine algo ALL</span><br><span class="line">  ssl-mode-async</span><br><span class="line">  tune.ssl.default-dh-param 2048</span><br><span class="line">  ssl-default-bind-ciphers AES128-SHA</span><br><span class="line">  ssl-default-bind-options no-tls-tickets no-sslv3 no-tlsv10 no-tlsv11</span><br><span class="line">  nbproc 10</span><br><span class="line">defaults</span><br><span class="line">  log               global</span><br><span class="line">  modehttp</span><br><span class="line">  optionhttplog</span><br><span class="line">  optiondontlognull</span><br><span class="line">  retries                   3</span><br><span class="line">  backlog               10000</span><br><span class="line">  maxconn               65535</span><br><span class="line">  timeout connect          10s</span><br><span class="line">  timeout client          300s</span><br><span class="line">  timeout server          300s</span><br><span class="line">  timeout tunnel        3600s</span><br><span class="line">  timeout http-keep-alive  1s</span><br><span class="line">  timeout http-request    15s</span><br><span class="line">  timeout queue           300s</span><br><span class="line">  timeout tarpit          60s</span><br><span class="line">  option            dontlognull</span><br><span class="line">  option            http-server-close</span><br><span class="line">  option            redispatch</span><br><span class="line"></span><br><span class="line">frontend myfrontend</span><br><span class="line">        bind :443 ssl crt /usr/local/haproxy/crt/cacom.pem</span><br><span class="line">mode http</span><br><span class="line"></span><br><span class="line">frontend myfrontend_80</span><br><span class="line">        bind :80</span><br><span class="line">mode http</span><br><span class="line"></span><br><span class="line">backend mybackend</span><br><span class="line">        server s3 192.168.1.246:80</span><br></pre></td></tr></table></figure><h5 id="启动-Haproxy"><a href="#启动-Haproxy" class="headerlink" title="启动 Haproxy"></a>启动 Haproxy</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/haproxy/sbin</span><br><span class="line">./haproxy -f qat.conf</span><br></pre></td></tr></table></figure><h5 id="验证QAT卡是否工作"><a href="#验证QAT卡是否工作" class="headerlink" title="验证QAT卡是否工作"></a>验证QAT卡是否工作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /sys/kernel/debug/qat_dh895xcc_0000\:07\:00.0/fw_counters</span><br></pre></td></tr></table></figure><p>这个是QAT卡计数的， 当QAT卡处理请求时， 这里会变化的。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Haproxy-配置-Intel-QAT-加速卡&quot;&gt;&lt;a href=&quot;#Haproxy-配置-Intel-QAT-加速卡&quot; class=&quot;headerlink&quot; title=&quot;Haproxy 配置 Intel QAT 加速卡&quot;&gt;&lt;/a&gt;Haproxy 配置 Intel QAT 加速卡&lt;/h4&gt;&lt;p&gt;Intel QAT 加速卡可以对HTTPS的请求进行异步请求， 加快证书处理， 降低系统性能消耗。&lt;br&gt;Haproxy 作为代理， 可以代理HTTPS请求， 需要重新编译，支持QAT加速卡，这样才能将请求给QAT加速卡。&lt;br&gt; Intel QAT 加速卡安装在上一遍文章已经提到， 这里就不在说了， 可以查看之前文章。&lt;br&gt;intel qat 加速卡安装配置 ： &lt;a href=&quot;https://sukbeta.github.io/intel-qat/&quot;&gt;https://sukbeta.github.io/intel-qat/&lt;/a&gt;  &lt;/p&gt;
&lt;h5 id=&quot;相关URL&quot;&gt;&lt;a href=&quot;#相关URL&quot; class=&quot;headerlink&quot; title=&quot;相关URL&quot;&gt;&lt;/a&gt;相关URL&lt;/h5&gt;&lt;p&gt;haproxy QAT Install： &lt;a href=&quot;https://01.org/sites/default/files/downloads/621658-1.1-qat-debugging-guide.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://01.org/sites/default/files/downloads/621658-1.1-qat-debugging-guide.pdf &lt;/a&gt;&lt;br&gt; haproxy intel 测试配置:  &lt;a href=&quot;https://software.intel.com/content/www/cn/zh/develop/articles/accelerating-ssl-load-balancers-with-intel-xeon-v3-processors.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://software.intel.com/content/www/cn/zh/develop/articles/accelerating-ssl-load-balancers-with-intel-xeon-v3-processors.html&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;Hadproxy-下载&quot;&gt;&lt;a href=&quot;#Hadproxy-下载&quot; class=&quot;headerlink&quot; title=&quot;Hadproxy 下载&quot;&gt;&lt;/a&gt;Hadproxy 下载&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd /home&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget https://www.haproxy.org/download/1.9/src/haproxy-1.9.16.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="qat" scheme="https://sukbeta.github.io/categories/qat/"/>
    
    
      <category term="qat" scheme="https://sukbeta.github.io/tags/qat/"/>
    
      <category term="haproxy" scheme="https://sukbeta.github.io/tags/haproxy/"/>
    
  </entry>
  
  <entry>
    <title>intel qat 加速卡安装配置</title>
    <link href="https://sukbeta.github.io/intel-qat/"/>
    <id>https://sukbeta.github.io/intel-qat/</id>
    <published>2021-07-13T09:03:44.000Z</published>
    <updated>2023-12-26T02:04:30.627Z</updated>
    
    <content type="html"><![CDATA[<h3 id="intel-qat-加速卡安装配置"><a href="#intel-qat-加速卡安装配置" class="headerlink" title="intel qat 加速卡安装配置"></a>intel qat 加速卡安装配置</h3><p>  英特尔 Quick Assist Technology （以下简称 QAT ）是 英特尔 针对网络安全和数据存储 推出 的一个硬件 加速 技术。 QAT 支持对称数据加密算法（如AES）中的密码操作和验证操作运算和公钥非对称数据加密算法。<br>  Intel QAT加速卡结合Intel其QAT_Engine测试性能的提升，其支持的异步模式对性能的提升很大</p><h3 id="相关URL"><a href="#相关URL" class="headerlink" title="相关URL"></a>相关URL</h3><p>QAT 官网 ： <a href="https://www.intel.cn/content/www/cn/zh/architecture-and-technology/intel-quick-assist-technology-overview.html" target="_blank" rel="noopener">https://www.intel.cn/content/www/cn/zh/architecture-and-technology/intel-quick-assist-technology-overview.html</a><br>QAT卡说明：<a href="https://01.org/sites/default/files/downloads/intelr-quickassist-technology/intelquickassisttechnologyopensslperformance.pdf" target="_blank" rel="noopener">https://01.org/sites/default/files/downloads/intelr-quickassist-technology/intelquickassisttechnologyopensslperformance.pdf</a><br><a id="more"></a><br>QAT卡相关驱动、资料：<a href="https://01.org/intel-quickassist-technology" target="_blank" rel="noopener">https://01.org/intel-quickassist-technology</a><br>QAT驱动安装文档：<a href="https://01.org/sites/default/files/downloads//336212-intelrquickassisttechnology-gsg-revision008.pdf" target="_blank" rel="noopener">https://01.org/sites/default/files/downloads//336212-intelrquickassisttechnology-gsg-revision008.pdf</a><br>QAT安装视频：<a href="https://software.intel.com/content/www/us/en/develop/videos/intel-quickassist-technology-openssl-1-1-x-qat-engine.html" target="_blank" rel="noopener">https://software.intel.com/content/www/us/en/develop/videos/intel-quickassist-technology-openssl-1-1-x-qat-engine.html</a><br>性能对比：<a href="https://software.intel.com/content/www/cn/zh/develop/articles/improving-openssl-performance.html" target="_blank" rel="noopener">https://software.intel.com/content/www/cn/zh/develop/articles/improving-openssl-performance.html</a>  </p><h3 id="centos7-5-系统环境"><a href="#centos7-5-系统环境" class="headerlink" title="centos7.5  系统环境"></a>centos7.5  系统环境</h3><h5 id="yum-package"><a href="#yum-package" class="headerlink" title="yum package"></a>yum package</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release.noarch</span><br><span class="line">yum -y install  wget gcc gcc-c++ gcc-g77 autoconf automake zlib* fiex* libxml* ncurses-devel libmcrypt* libtool-ltdl-devel* make cmake bind-utils ntp ntpdate lrzsz rsync gzip unzip vim telnet openssl-devel nscd g++ sysstat ncurses-libs bzip2-devel git lsof sqlite-devel ftp net-tools</span><br><span class="line"></span><br><span class="line">yum install -y openssl-devel pciutils zlib-devel gcc libudev-devel boost-devel</span><br><span class="line"></span><br><span class="line">yum -y groupinstall &quot;Development Tools&quot;</span><br><span class="line">yum -y install pciutils</span><br><span class="line">yum -y install openssl-devel  zlib-devel  gcc   libudev-devel boost-devel  pciutils</span><br><span class="line"></span><br><span class="line">yum install perl perl-devel</span><br><span class="line">yum groupinstall perl*</span><br><span class="line">yum install -y kernel kernel-devel kernel-devel-$(uname -r)</span><br></pre></td></tr></table></figure><h5 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">systemctl stop NetworkManager</span><br><span class="line">systemctl disable NetworkManager</span><br><span class="line"></span><br><span class="line">sed -i &quot;/^SELINUX=/s/enforcing/disabled/g&quot; /etc/selinux/config</span><br><span class="line"></span><br><span class="line">vim  /etc/security/limits.conf</span><br><span class="line">*       soft nofile 655350</span><br><span class="line">*       hard nofile 655350</span><br><span class="line">*       soft nproc 655350</span><br><span class="line">*       hard nproc 655350</span><br><span class="line">*       soft core 655350</span><br><span class="line">*       hard core 655350</span><br><span class="line">*       soft memlock 655350</span><br><span class="line">*       hard memlock 655350</span><br></pre></td></tr></table></figure><p>###安装驱动：<br>驱动下载地址： <a href="https://01.org/packet-processing/intel%C2%AE-quickassist-technology-drivers-and-patches" target="_blank" rel="noopener">https://01.org/packet-processing/intel%C2%AE-quickassist-technology-drivers-and-patches</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cd /home</span><br><span class="line">wget https://downloadmirror.intel.com/30178/eng/QAT1.7.L.4.13.0-00009.tar.gz</span><br><span class="line">mkdir  /home/QAT</span><br><span class="line">tar -zxvf QAT1.7.L.4.13.0-00009.tar.gz -C /home/QAT</span><br><span class="line">cd /home/QAT</span><br><span class="line">./configure    开启api  ./configure --enable-kapi</span><br><span class="line">我的</span><br><span class="line">./configure --enable-qat-lkcf --enable-icp-dc-sym-only --enable-kapi</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">make samples-install  </span><br><span class="line"></span><br><span class="line">在build下， 会出 cpa_sample_code.ko 模块， 可以用  </span><br><span class="line">insmod ./build/cpa_sample_code.ko 加载</span><br><span class="line">cpa_sample_code   执行测试</span><br></pre></td></tr></table></figure><p>查看服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/qat_service status</span><br><span class="line">/etc/init.d/qat_service restart</span><br><span class="line">systemctl restart qat_service</span><br></pre></td></tr></table></figure><h3 id="升级-openssl"><a href="#升级-openssl" class="headerlink" title="升级 openssl"></a>升级 openssl</h3><p>qat 用到的 openssl 的版本需要 1.1.0 之上的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.openssl.org/source/openssl-1.1.1g.tar.gz</span><br><span class="line">tar -zxvf openssl-1.1.1g.tar.gz</span><br><span class="line">ln -s openssl-1.1.1g openssl</span><br><span class="line">cd openssl</span><br><span class="line">./config --prefix=/usr/local/ssl</span><br><span class="line">make depend</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">添加环境变量</span><br><span class="line">export OPENSSL_ENGINES=/usr/local/ssl/lib/engines-1.1   并添加到   vim /etc/profile   source /etc/profile</span><br><span class="line"></span><br><span class="line">添加动态库</span><br><span class="line">echo /usr/local/ssl/lib/ &gt; /etc/ld.so.conf.d/qat.conf</span><br><span class="line">ldconfig</span><br><span class="line"></span><br><span class="line">验证</span><br><span class="line">/usr/local/ssl/bin/openssl version</span><br></pre></td></tr></table></figure><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><p>统一在这里整理一份</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">export OPENSSL_LIB=/usr/local/ssl</span><br><span class="line">export OPENSSL_ENGINES=/usr/local/ssl/lib/engines-1.1</span><br><span class="line">export PERL5LIB=$PERL5LIB:/home/openssl</span><br><span class="line">export PATH=$PATH:/usr/local/sbin</span><br><span class="line">export SSL_INC=/usr/local/ssl/include</span><br><span class="line">export SSL_LIB=/usr/local/ssl/lib</span><br><span class="line">export QZ_ROOT=/home/QATzip</span><br><span class="line">export OPENSSL_LIB=/usr/local/ssl</span><br><span class="line">export ICP_ROOT=/home/QAT</span><br><span class="line">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$QZ_ROOT/utils:/usr/lib64:/usr/local/lib64:/usr/local/ssl/lib:/usr/local/ssl/lib/engines-1.1:/usr/lib64/openssl/engines:/$ICP_ROOT/build</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h3 id="QAT引擎编译"><a href="#QAT引擎编译" class="headerlink" title="QAT引擎编译"></a>QAT引擎编译</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cd /home</span><br><span class="line">git clone https://github.com/01org/QAT_Engine.git</span><br><span class="line">cd QAT_Engine</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure --with-qat_dir=/root/qat --with-openssl_dir=/root/openssl-1.1.1g --with-openssl_install_dir=/usr/local/ssl --with-qat_hw_dir=/root/qat --enable-upstream_driver --enable-usdm</span><br><span class="line">或</span><br><span class="line">./configure --with-qat_dir=$ICP_ROOT --with-openssl_dir=/home/openssl --with-openssl_install_dir=/usr/local/ssl --with-qat_hw_dir=$ICP_ROOT --enable-qat_sw --enable-upstream_driver  --enable-usdm</span><br><span class="line">export PERL5LIB=$PERL5LIB:/home/openssl   不配置这个 make 会报错</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">cd /home/QAT_Engine/qat_contig_mem</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">cp /etc/dh895xcc_dev0.conf /etc/dh895xcc_dev0.conf_backup1</span><br><span class="line">cp qat/config/dh895xcc/multi_process_optimized/dh895xcc_dev0.conf /etc/   后续需要整合配置文件</span><br><span class="line">/etc/init.d/qat_service restart</span><br><span class="line">systemctl restart qat_service</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><h5 id="测试验证："><a href="#测试验证：" class="headerlink" title="测试验证："></a>测试验证：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/ssl/bin/openssl  engine -t -c -vvvv qatengine</span><br><span class="line">或  (看生成的是名字， 是qat 还是 qatengine)</span><br><span class="line">/usr/local/ssl/bin/openssl  engine -t -c -vvvv qat</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>系统正常跑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/ssl/bin/openssl speed -elapsed rsa2048</span><br></pre></td></tr></table></figure><p>加速卡跑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/ssl/bin/openssl speed -engine qat_dev0 -elapsed rsa2048</span><br></pre></td></tr></table></figure><h5 id="openssl-speed测试命令"><a href="#openssl-speed测试命令" class="headerlink" title="openssl speed测试命令"></a>openssl speed测试命令</h5><ul><li>RSA2048</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  # Software 纯软</span><br><span class="line">/usr/local/ssl/bin/opensslspeed -elapsed rsa2048</span><br><span class="line">  # Synchronous 同步</span><br><span class="line">/usr/local/ssl/bin/opensslspeed -engine qatengine -elapsed rsa2048</span><br><span class="line">  # Asynchronous1 异步</span><br><span class="line">/usr/local/ssl/bin/openssl speed -engine qatengine -elapsed -async_jobs 36 rsa2048</span><br><span class="line">    # Asynchronous2 异步</span><br><span class="line">/usr/local/ssl/bin/openssl speed -engine qatengine -elapsed -async_jobs 72 rsa2048</span><br></pre></td></tr></table></figure><ul><li>ECDSA-P256</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  # Software 纯软</span><br><span class="line">/usr/local/ssl/bin/openssl speed -elapsed ecdsap256</span><br><span class="line">  # Synchronous 同步</span><br><span class="line">/usr/local/ssl/bin/openssl speed -engine qatengine -elapsed ecdsap256</span><br><span class="line">  # Asynchronous1 异步1</span><br><span class="line">/usr/local/ssl/bin/openssl speed -engine qatengine -elapsed -async_jobs 36 ecdsap256</span><br><span class="line">    # Asynchronous2 异步2</span><br><span class="line">/usr/local/ssl/bin/opensslspeed -engine qatengine -elapsed -async_jobs 72 ecdsap256</span><br></pre></td></tr></table></figure><h3 id="查看-qat-卡-接受处理数据"><a href="#查看-qat-卡-接受处理数据" class="headerlink" title="查看 qat 卡 接受处理数据"></a>查看 qat 卡 接受处理数据</h3><p>QAT卡在工作的时候，计数会一直变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /sys/kernel/debug/qat_dh895xcc_0000\:07\:00.0/fw_counters</span><br></pre></td></tr></table></figure><h3 id="配置文件："><a href="#配置文件：" class="headerlink" title="配置文件："></a>配置文件：</h3><p>QAT 默认配置文件   /etc/dh895xcc_dev0.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line">#########################################################################</span><br><span class="line">#</span><br><span class="line"># @par</span><br><span class="line"># This file is provided under a dual BSD/GPLv2 license.  When using or</span><br><span class="line">#   redistributing this file, you may do so under either license.</span><br><span class="line">#</span><br><span class="line">#   GPL LICENSE SUMMARY</span><br><span class="line">#</span><br><span class="line">#   Copyright(c) 2007-2021 Intel Corporation. All rights reserved.</span><br><span class="line">#</span><br><span class="line">#   This program is free software; you can redistribute it and/or modify</span><br><span class="line">#   it under the terms of version 2 of the GNU General Public License as</span><br><span class="line">#   published by the Free Software Foundation.</span><br><span class="line">#</span><br><span class="line">#   This program is distributed in the hope that it will be useful, but</span><br><span class="line">#   WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="line">#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span><br><span class="line">#   General Public License for more details.</span><br><span class="line">#</span><br><span class="line">#   You should have received a copy of the GNU General Public License</span><br><span class="line">#   along with this program; if not, write to the Free Software</span><br><span class="line">#   Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.</span><br><span class="line">#   The full GNU General Public License is included in this distribution</span><br><span class="line">#   in the file called LICENSE.GPL.</span><br><span class="line">#</span><br><span class="line">#   Contact Information:</span><br><span class="line">#   Intel Corporation</span><br><span class="line">#</span><br><span class="line">#   BSD LICENSE</span><br><span class="line">#</span><br><span class="line">#   Copyright(c) 2007-2021 Intel Corporation. All rights reserved.</span><br><span class="line">#</span><br><span class="line">#   Redistribution and use in source and binary forms, with or without</span><br><span class="line">#   modification, are permitted provided that the following conditions</span><br><span class="line">#   are met:</span><br><span class="line">#</span><br><span class="line">#     * Redistributions of source code must retain the above copyright</span><br><span class="line">#       notice, this list of conditions and the following disclaimer.</span><br><span class="line">#     * Redistributions in binary form must reproduce the above copyright</span><br><span class="line">#       notice, this list of conditions and the following disclaimer in</span><br><span class="line">#       the documentation and/or other materials provided with the</span><br><span class="line">#       distribution.</span><br><span class="line">#     * Neither the name of Intel Corporation nor the names of its</span><br><span class="line">#       contributors may be used to endorse or promote products derived</span><br><span class="line">#       from this software without specific prior written permission.</span><br><span class="line">#</span><br><span class="line">#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span><br><span class="line">#   &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span><br><span class="line">#   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span><br><span class="line">#   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span><br><span class="line">#   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span><br><span class="line">#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span><br><span class="line">#   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span><br><span class="line">#   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span><br><span class="line">#   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span><br><span class="line">#   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span><br><span class="line">#   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#########################################################################</span><br><span class="line">[GENERAL]</span><br><span class="line">ServicesEnabled = dc;cy</span><br><span class="line"></span><br><span class="line"># Set the service profile to determine available features</span><br><span class="line"># =====================================================================</span><br><span class="line">#                               DEFAULT    CRYPTO  COMPRESSION  CUSTOM1</span><br><span class="line"># Asymmetric Crypto                *         *                     *</span><br><span class="line"># Symmetric Crypto                 *         *                     *</span><br><span class="line"># MGF KeyGen                       *         *</span><br><span class="line"># SSL/TLS KeyGen                   *         *                     *</span><br><span class="line"># HKDF                                       *                     *</span><br><span class="line"># Compression                      *                    *          *</span><br><span class="line"># Decompression (stateless)        *                    *          *</span><br><span class="line"># Decompression (stateful)         *                    *</span><br><span class="line"># Service Chaining                                      *</span><br><span class="line"># Device Utilization                         *                     *</span><br><span class="line"># Rate Limiting                              *                     *</span><br><span class="line"># =====================================================================</span><br><span class="line">ServicesProfile = DEFAULT</span><br><span class="line"></span><br><span class="line">ConfigVersion = 2</span><br><span class="line"></span><br><span class="line">#Default values for number of concurrent requests*/</span><br><span class="line">CyNumConcurrentSymRequests = 512</span><br><span class="line">CyNumConcurrentAsymRequests = 64</span><br><span class="line"></span><br><span class="line">#Statistics, valid values: 1,0</span><br><span class="line">statsGeneral = 1</span><br><span class="line">statsDh = 1</span><br><span class="line">statsDrbg = 1</span><br><span class="line">statsDsa = 1</span><br><span class="line">statsEcc = 1</span><br><span class="line">statsKeyGen = 1</span><br><span class="line">statsDc = 1</span><br><span class="line">statsLn = 1</span><br><span class="line">statsPrime = 1</span><br><span class="line">statsRsa = 1</span><br><span class="line">statsSym = 1</span><br><span class="line"></span><br><span class="line"># Debug feature, if set to 1 it enables additional entries in /proc filesystem</span><br><span class="line">ProcDebug = 1</span><br><span class="line"></span><br><span class="line"># This flag is to enable device auto reset on heartbeat error</span><br><span class="line">AutoResetOnError = 0</span><br><span class="line"></span><br><span class="line">##############################################</span><br><span class="line"># Kernel Instances Section</span><br><span class="line">##############################################</span><br><span class="line">[KERNEL]</span><br><span class="line">NumberCyInstances = 0</span><br><span class="line">NumberDcInstances = 0</span><br><span class="line"></span><br><span class="line">##############################################</span><br><span class="line"># User Process Instance Section</span><br><span class="line">##############################################</span><br><span class="line">[SHIM]</span><br><span class="line">NumberCyInstances = 1</span><br><span class="line">NumberDcInstances = 0</span><br><span class="line">NumProcesses = 32</span><br><span class="line">LimitDevAccess = 1</span><br><span class="line"></span><br><span class="line"># Crypto - User space</span><br><span class="line">Cy0Name = &quot;UserCY0&quot;</span><br><span class="line">Cy0IsPolled = 1</span><br><span class="line">Cy0CoreAffinity = 0-31</span><br><span class="line"></span><br><span class="line">##############################################</span><br><span class="line"># User Process Instance Section</span><br><span class="line">##############################################</span><br><span class="line">[SSL]</span><br><span class="line">NumberCyInstances = 2</span><br><span class="line">NumberDcInstances = 2</span><br><span class="line">NumProcesses = 1</span><br><span class="line">LimitDevAccess = 0</span><br><span class="line"></span><br><span class="line"># Crypto - User instance #0</span><br><span class="line">Cy0Name = &quot;SSL0&quot;</span><br><span class="line">Cy0IsPolled = 1</span><br><span class="line"># List of core affinities</span><br><span class="line">Cy0CoreAffinity = 0</span><br><span class="line"></span><br><span class="line"># Crypto - User instance #1</span><br><span class="line">Cy1Name = &quot;SSL1&quot;</span><br><span class="line">Cy1IsPolled = 1</span><br><span class="line"># List of core affinities</span><br><span class="line">Cy1CoreAffinity = 1</span><br><span class="line"></span><br><span class="line"># Data Compression - User instance #0</span><br><span class="line">Dc0Name = &quot;Dc0&quot;</span><br><span class="line">Dc0IsPolled = 1</span><br><span class="line"># List of core affinities</span><br><span class="line">Dc0CoreAffinity = 0</span><br><span class="line"></span><br><span class="line"># Data Compression - User instance #1</span><br><span class="line">Dc1Name = &quot;Dc1&quot;</span><br><span class="line">Dc1IsPolled = 1</span><br><span class="line"># List of core affinities</span><br><span class="line">Dc1CoreAffinity = 1</span><br><span class="line"></span><br><span class="line">[KERNEL_QAT]</span><br><span class="line">NumberCyInstances = 2</span><br><span class="line">NumberDcInstances = 2</span><br><span class="line"></span><br><span class="line"># Crypto - Kernel instance #0</span><br><span class="line">Cy0Name = &quot;IPSec0&quot;</span><br><span class="line">Cy0IsPolled = 0</span><br><span class="line">Cy0CoreAffinity = 1</span><br><span class="line"></span><br><span class="line"># Crypto - Kernel instance #1</span><br><span class="line">Cy1Name = &quot;IPSec1&quot;</span><br><span class="line">Cy1IsPolled = 0</span><br><span class="line">Cy1CoreAffinity = 2</span><br><span class="line"></span><br><span class="line"># Data Compression - Kernel instance #0</span><br><span class="line">Dc0Name = &quot;IPComp0&quot;</span><br><span class="line">Dc0IsPolled = 0</span><br><span class="line">Dc0CoreAffinity = 3</span><br><span class="line"></span><br><span class="line"># Data Compression - Kernel instance #1</span><br><span class="line">Dc1Name = &quot;IPComp1&quot;</span><br><span class="line">Dc1IsPolled = 0</span><br><span class="line">Dc1CoreAffinity = 4</span><br></pre></td></tr></table></figure><h5 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/qat_service restart</span><br><span class="line">systemctl restart qat_service</span><br><span class="line"></span><br><span class="line">验证</span><br><span class="line">/usr/local/ssl/bin/openssl  engine -t -c -vvvv qatengine</span><br><span class="line">和</span><br><span class="line">cpa_sample_code</span><br><span class="line">都可以跑了</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;intel-qat-加速卡安装配置&quot;&gt;&lt;a href=&quot;#intel-qat-加速卡安装配置&quot; class=&quot;headerlink&quot; title=&quot;intel qat 加速卡安装配置&quot;&gt;&lt;/a&gt;intel qat 加速卡安装配置&lt;/h3&gt;&lt;p&gt;  英特尔 Quick Assist Technology （以下简称 QAT ）是 英特尔 针对网络安全和数据存储 推出 的一个硬件 加速 技术。 QAT 支持对称数据加密算法（如AES）中的密码操作和验证操作运算和公钥非对称数据加密算法。&lt;br&gt;  Intel QAT加速卡结合Intel其QAT_Engine测试性能的提升，其支持的异步模式对性能的提升很大&lt;/p&gt;
&lt;h3 id=&quot;相关URL&quot;&gt;&lt;a href=&quot;#相关URL&quot; class=&quot;headerlink&quot; title=&quot;相关URL&quot;&gt;&lt;/a&gt;相关URL&lt;/h3&gt;&lt;p&gt;QAT 官网 ： &lt;a href=&quot;https://www.intel.cn/content/www/cn/zh/architecture-and-technology/intel-quick-assist-technology-overview.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.intel.cn/content/www/cn/zh/architecture-and-technology/intel-quick-assist-technology-overview.html&lt;/a&gt;&lt;br&gt;QAT卡说明：&lt;a href=&quot;https://01.org/sites/default/files/downloads/intelr-quickassist-technology/intelquickassisttechnologyopensslperformance.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://01.org/sites/default/files/downloads/intelr-quickassist-technology/intelquickassisttechnologyopensslperformance.pdf&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="qat" scheme="https://sukbeta.github.io/categories/qat/"/>
    
    
      <category term="qat" scheme="https://sukbeta.github.io/tags/qat/"/>
    
  </entry>
  
  <entry>
    <title>RKE 安装 rancher server HA</title>
    <link href="https://sukbeta.github.io/rke-rancher-ha/"/>
    <id>https://sukbeta.github.io/rke-rancher-ha/</id>
    <published>2020-07-14T01:40:31.000Z</published>
    <updated>2023-12-26T02:15:20.272Z</updated>
    
    <content type="html"><![CDATA[<p>RKE 安装 rancher HA server 一般要有4台机器， 一台是lvs、nginx代理机器，3台为K8S机器，做etc、rancher server。</p><p>版本：  </p><ul><li>docker: 19.03.5  </li><li>rancher server： 2.4.5  </li><li>kubrctl: 1.18.5  </li><li>rke: 1.0.10  </li><li>helm：2.16.6  </li></ul><a id="more"></a><h3 id="机器列表"><a href="#机器列表" class="headerlink" title="机器列表"></a>机器列表</h3><table><thead><tr><th>IP</th><th>主机名</th><th>备注</th></tr></thead><tbody><tr><td>192.168.5.100</td><td>bigdata00.shining.com</td><td>k8s、etcd、rancher server</td></tr><tr><td>192.168.5.101</td><td>bigdata01.shining.com</td><td>k8s、etcd、rancher server</td></tr><tr><td>192.168.5.103</td><td>bigdata03.shining.com</td><td>k8s、etcd、rancher server</td></tr><tr><td>192.168.5.237</td><td>rancher.shining.com</td><td>nginx</td></tr></tbody></table><p>centos7 永久修改主机名，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname xxx</span><br></pre></td></tr></table></figure><h3 id="安装-RKE"><a href="#安装-RKE" class="headerlink" title="安装 RKE"></a>安装 RKE</h3><p>Rancher Kubernetes Engine(RKE)是一款轻量级Kubernetes安装程序，支持在裸机和虚拟化服务器上安装Kubernetes。 RKE解决了Kubernettes社区中的一个常见问题，比如:安装复杂性。RKE支持多种平台运行，比如MacOS,linux,windows。  </p><p>50.100 机器上安装  </p><p>1、下载二进制文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/rancher/rke/releases/latest</span><br></pre></td></tr></table></figure><p> 现在稳定版本是 1.0.10<br>下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/rancher/rke/releases/download/v1.0.10/rke_linux-amd64</span><br><span class="line">chmod +x rke_linux-amd64</span><br><span class="line">mv rke_linux-amd64 /usr/bin/rke</span><br><span class="line">rke --version</span><br></pre></td></tr></table></figure><h3 id="安装kubectl"><a href="#安装kubectl" class="headerlink" title="安装kubectl"></a>安装kubectl</h3><p>kubectl是一个CLI命令行工具，用于运行Kubernetes集群的命令。Rancher 2.x中的许多维护和管理都需要它。  </p><p>这里在5.100上安装kubectl:  </p><p>kubectl 安装方式：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">wget https://storage.googleapis.com/kubernetes-release/release/v1.18.5/kubernetes-client-linux-amd64.tar.gz</span><br><span class="line">(需要翻墙，正常下载不了)</span><br><span class="line"></span><br><span class="line">官方下载说明：</span><br><span class="line">curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl</span><br><span class="line">若需要下载特定版本的 kubectl，请将上述命令中的 $(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt) 部分替换成为需要下载的 kubectl 的具体版本即可。</span><br><span class="line">curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.18.5/bin/linux/amd64/kubectl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl</span><br><span class="line">有时候可以连接</span><br><span class="line"></span><br><span class="line">chmpd +x kubectl</span><br><span class="line">mv kubectl /usr/bin/</span><br><span class="line">kubectl version</span><br></pre></td></tr></table></figure><p>配置kubectl的shell补全<br>CentOS Linux上，您可能需要安装默认情况下未安装的bash-completion软件包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install bash-completion -y</span><br></pre></td></tr></table></figure><p>运行source &lt;(kubectl completion bash)可将kubectl自动补全添加到当前shell，要使kubectl自动补全命令自动加载:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><p>退出，重新登录一下即可。</p><h3 id="使用-RKE-安装-kubernetes"><a href="#使用-RKE-安装-kubernetes" class="headerlink" title="使用 RKE 安装 kubernetes"></a>使用 RKE 安装 kubernetes</h3><p>下面使用 RKE(Kubernetes Engine) 安装高可用的 Kubernetes。<br>rancher server 之间建立 ssh 信任<br>我们目前有三台服务器用作 local 集群，首先要确保我们主机能够通过 ssh 访问到另外两台主机并执行相关操作。  </p><h4 id="创建用户rancher"><a href="#创建用户rancher" class="headerlink" title="创建用户rancher"></a>创建用户rancher</h4><p>注意：使用rke安装kubernetes时，不能以root用户执行。必须是一个普通用户才行！！！<br>在5.100、5.101、5.103执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd rancher</span><br><span class="line">passwd rancher</span><br></pre></td></tr></table></figure><h4 id="授权docker权限"><a href="#授权docker权限" class="headerlink" title="授权docker权限"></a>授权docker权限</h4><p>在5.100、5.101、5.103执行以下命令：<br>使用root账号登录  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#将登陆用户rancher加入到docker用户组中</span><br><span class="line">gpasswd -a rancher docker</span><br><span class="line">#更新用户组</span><br><span class="line">newgrp docker</span><br><span class="line">切换到rancher用户进行测试</span><br><span class="line">su - rancher</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><h4 id="ssh信任"><a href="#ssh信任" class="headerlink" title="ssh信任"></a>ssh信任</h4><p>在5.100、5.101、5.103执行以下命令：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">每台机器上的rancher用户都执行  </span><br><span class="line"># su rancher</span><br><span class="line">$ ssh-keygen -t rsa -P &quot;&quot; -f ~/.ssh/id_rsa</span><br><span class="line">#$ cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line">$$ chmod 600 ~/.ssh/authorized_keys</span><br><span class="line"></span><br><span class="line">$ ssh-copy-id 192.168.5.100</span><br><span class="line">$ ssh-copy-id 192.168.5.101</span><br><span class="line">$ ssh-copy-id 192.168.5.103</span><br></pre></td></tr></table></figure><p>编写 rancher-cluster.yml 文件  </p><p>在5.100上执行<br>注意：以rancher用户执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ vi rancher-cluster.yml</span><br><span class="line">nodes:</span><br><span class="line">  - address: 192.168.5.100</span><br><span class="line">    internal_address: 192.168.5.100</span><br><span class="line">    user: rancher</span><br><span class="line">    role: [controlplane,worker,etcd]</span><br><span class="line">    hostname_override: bigdata00.shining.com</span><br><span class="line">  - address: 192.168.5.101</span><br><span class="line">    internal_address: 192.168.5.101</span><br><span class="line">    user: rancher</span><br><span class="line">    role: [controlplane,worker,etcd]</span><br><span class="line">    hostname_override: bigdata01.shining.com</span><br><span class="line">  - address: 192.168.5.103</span><br><span class="line">    internal_address: 192.168.5.103</span><br><span class="line">    user: rancher</span><br><span class="line">    role: [controlplane,worker,etcd]</span><br><span class="line">    hostname_override: bigdata03.shining.com</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  etcd:</span><br><span class="line">    backup_config:</span><br><span class="line">        enabled: true</span><br><span class="line">        interval_hours: 6</span><br><span class="line">        retention: 60</span><br></pre></td></tr></table></figure><p>备注：</p><ul><li>address 公共域名或IP地址</li><li>user 可以运行docker命令的用户</li><li>role 分配给节点的Kubernetes角色列表</li><li>internal_address 内部集群通信的私有域名或IP地址</li><li>开启了etcd的备份机制，每隔6小时备份一次，保存60天数据</li></ul><h3 id="运行-RKE-构建-kubernetes-集群"><a href="#运行-RKE-构建-kubernetes-集群" class="headerlink" title="运行 RKE 构建 kubernetes 集群"></a>运行 RKE 构建 kubernetes 集群</h3><p>在5.100上执行<br>注意：以rancher用户执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ rke up --config ./rancher-cluster.yml</span><br><span class="line">INFO[0000] Running RKE version: v1.0.8                  </span><br><span class="line">INFO[0000] Initiating Kubernetes cluster                </span><br><span class="line">INFO[0000] [dialer] Setup tunnel for host [192.168.5.100] </span><br><span class="line">INFO[0000] [dialer] Setup tunnel for host [192.168.5.101] </span><br><span class="line">INFO[0000] [dialer] Setup tunnel for host [192.168.5.103] </span><br><span class="line">INFO[0000] Checking if container [cluster-state-deployer] is running on host [192.168.5.100], try #1 </span><br><span class="line">INFO[0000] Image [rancher/rke-tools:v0.1.56] exists on host [192.168.5.100] </span><br><span class="line">...</span><br><span class="line">INFO[0128] [ingress] ingress controller nginx deployed successfully </span><br><span class="line">INFO[0128] [addons] Setting up user addons              </span><br><span class="line">INFO[0128] [addons] no user addons defined              </span><br><span class="line">INFO[0128] Finished building Kubernetes cluster successfully</span><br></pre></td></tr></table></figure><p>以上输出，表示安装成功了。<br>执行成功会在当前目录生成2个文件，分别是rancher-cluster.rkestate和kube_config_rancher-cluster.yml  </p><p>文件说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rancher-cluster.yml：RKE集群配置文件。</span><br><span class="line">kube_config_rancher-cluster.yml：群集的Kubeconfig文件，此文件包含完全访问群集的凭据。</span><br><span class="line">rancher-cluster.rkestate：Kubernetes群集状态文件，此文件包含完全访问群集的凭据。</span><br></pre></td></tr></table></figure><h4 id="错误集锦"><a href="#错误集锦" class="headerlink" title="错误集锦"></a>错误集锦</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARN[0000] Failed to set up SSH tunneling for host [192.168.5.103]: Can&apos;t retrieve Docker Info: error during connect: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.24/info: Unable to access node with address [10.212.20.97:22] using SSH. Please check if you are able to SSH to the node using the specified SSH Private Key and if you have configured the correct SSH username. Error: ssh: handshake failed: ssh: unable to authenticate, attempted methods [none publickey], no supported methods remain</span><br></pre></td></tr></table></figure><p>ssh信任没有做好，请确保是普通用户执行rke。不能是root用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to get job complete status for job rke-network-plugin-deploy-job in namespace kube-system</span><br></pre></td></tr></table></figure><p>重新执行一遍 rke_linux-amd64 up –config ./rancher-cluster.yml即可。<br>docker 和系统代理 （如果需要代理上网的话， docker需要拉取镜像，本机也需要出去下载yaml文件）  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/docker.service.d//http-proxy.conf</span><br><span class="line">[Service]</span><br><span class="line">Environment=&quot;HTTP_PROXY=//user:password@192.168.1.1:78/&quot;</span><br><span class="line">Environment=&quot;HTTPS_PROXY=http://user:password@192.168.1.1:79/&quot;</span><br><span class="line">Environment=&quot;NO_PROXY=localhost,127.0.0.1,0.0.0.0,10.0.0.0/8,192.168.0.0/16,shining.com,shining.com&quot;</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br><span class="line"></span><br><span class="line">vim /etc/profile</span><br><span class="line">use_proxy=yes</span><br><span class="line">export https_proxy=http://user:password@192.168.1.1:78</span><br><span class="line">export http_proxy=http://user:password@192.168.1.1:78</span><br><span class="line">export NO_PROXY=&quot;localhost,127.0.0.1,0.0.0.0,10.0.0.0/8,192.168.0.0/16,shining.com,shining.com&quot;</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">NO_PROXY  根据自己的ip、域名、主机配置</span><br></pre></td></tr></table></figure><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><p>在5.100上执行<br>注意：以rancher用户执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.kube</span><br><span class="line">cp kube_config_rancher-cluster.yml ~/.kube/config</span><br><span class="line">export KUBECONFIG=$(pwd)/kube_config_rancher-cluster.yml</span><br></pre></td></tr></table></figure><p>查看node</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get node</span><br><span class="line">NAME                 STATUS   ROLES                      AGE   VERSION</span><br><span class="line">bigdata00.shining.com   Ready    controlplane,etcd,worker   42h   v1.17.6</span><br><span class="line">bigdata01.shining.com   Ready    controlplane,etcd,worker   42h   v1.17.6</span><br><span class="line">bigdata03.shining.com   Ready    controlplane,etcd,worker   42h   v1.17.6</span><br></pre></td></tr></table></figure><p>如果需要root用户执行kubectl，切换到root用户，执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.kube</span><br><span class="line">cp /home/rancher/kube_config_rancher-cluster.yml ~/.kube/config</span><br><span class="line">export KUBECONFIG=~/.kube/config</span><br></pre></td></tr></table></figure><p>查看 k8s pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -A</span><br><span class="line">ingress-nginx   default-http-backend-67cf578fc4-kqwlc     1/1     Running            1          42h</span><br><span class="line">ingress-nginx   nginx-ingress-controller-hwgxq            1/1     Running            2          42h</span><br><span class="line">ingress-nginx   nginx-ingress-controller-jqc6g            1/1     Running            3          42h</span><br><span class="line">ingress-nginx   nginx-ingress-controller-wttkx            1/1     Running            2          42h</span><br><span class="line">kube-system     canal-j28c2                               2/2     Running            4          42h</span><br><span class="line">kube-system     canal-k244c                               2/2     Running            6          42h</span><br><span class="line">kube-system     canal-pt74w                               2/2     Running            5          42h</span><br><span class="line">kube-system     coredns-7c5566588d-d6742                  1/1     Running            2          42h</span><br><span class="line">kube-system     coredns-7c5566588d-wclvc                  1/1     Running            2          42h</span><br><span class="line">kube-system     coredns-autoscaler-65bfc8d47d-8phv4       1/1     Running            2          42h</span><br><span class="line">kube-system     metrics-server-6b55c64f86-pc8qk           1/1     Running            2          42h</span><br><span class="line">kube-system     rke-coredns-addon-deploy-job-zg68c        0/1     Completed          0          42h</span><br><span class="line">kube-system     rke-ingress-controller-deploy-job-fw5fn   0/1     Completed          0          42h</span><br><span class="line">kube-system     rke-metrics-addon-deploy-job-j9tgw        0/1     Completed          0          42h</span><br><span class="line">kube-system     rke-network-plugin-deploy-job-85z6d       0/1     Completed          0          42h</span><br></pre></td></tr></table></figure><h3 id="安装和配置Helm"><a href="#安装和配置Helm" class="headerlink" title="安装和配置Helm"></a>安装和配置Helm</h3><p>Helm是Kubernetes首选的包管理工具。Helmcharts为Kubernetes YAML清单文档提供模板语法。使用Helm，可以创建可配置的部署，而不仅仅是使用静态文件。Helm有两个部分：Helm客户端(helm)和Helm服务端(Tiller)。  </p><h4 id="配置Helm客户端访问权限"><a href="#配置Helm客户端访问权限" class="headerlink" title="配置Helm客户端访问权限"></a>配置Helm客户端访问权限</h4><p>在5.100上执行，下面提到的所有命令，都可以在root用户执行了。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system create serviceaccount tiller</span><br><span class="line">kubectl create clusterrolebinding tiller \</span><br><span class="line">--clusterrole cluster-admin --serviceaccount=kube-system:tiller</span><br></pre></td></tr></table></figure><p>备注：在kube-system命名空间中创建ServiceAccount；创建ClusterRoleBinding以授予tiller帐户对集群的访问权限；helm初始化tiller服务</p><h4 id="安装Helm客户端"><a href="#安装Helm客户端" class="headerlink" title="安装Helm客户端"></a>安装Helm客户端</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://get.helm.sh/helm-v2.16.6-linux-amd64.tar.gz</span><br><span class="line">tar zxvf helm-v2.16.6-linux-amd64.tar.gz -C /usr/src/</span><br><span class="line">cp /usr/src/linux-amd64/helm /usr/local/bin/</span><br><span class="line">cp /usr/src/linux-amd64/tiller /usr/local/bin/</span><br></pre></td></tr></table></figure><p>安装Helm服务端（Tiller）  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">helm_version=`helm version |grep Client | awk -F&quot;&quot;\&quot; &apos;&#123;print $2&#125;&apos;`</span><br><span class="line">helm init  \</span><br><span class="line">--service-account tiller --skip-refresh \</span><br><span class="line">--tiller-image registry.cn-shanghai.aliyuncs.com/rancher/tiller:$helm_version</span><br></pre></td></tr></table></figure><p>备注：</p><p>1、RKE默认启用RBAC,所以在安装tiller时需要指定ServiceAccount。<br>2、helm init在缺省配置下，会去谷歌镜像仓库拉取gcr.io/kubernetes-helm/tiller镜像，在Kubernetes集群上安装配置Tiller；由于在国内可能无法访问gcr.io、storage.googleapis.com等域名，可以通过–tiller-image指定私有镜像仓库镜像。<br>3、helm init在缺省配置下，会利用<a href="https://kubernetes-charts.storage.googleapis.com作为缺省的stable" target="_blank" rel="noopener">https://kubernetes-charts.storage.googleapis.com作为缺省的stable</a> repository地址,并去更新相关索引文件。在国内可能无法访问storage.googleapis.com地址, 可以通过–stable-repo-url指定chart国内加速镜像地址。<br>4、如果您是离线安装Tiller, 假如没有内部的chart仓库, 可通过添加–skip-refresh参数禁止Tiller更新索引。  </p><h4 id="遇到问题："><a href="#遇到问题：" class="headerlink" title="遇到问题："></a>遇到问题：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">helm status</span><br><span class="line">Error: could not find a ready tiller pod</span><br><span class="line"></span><br><span class="line">查看一下 tiller 有没有运行起来</span><br><span class="line">kubectl -n kube-system get po</span><br><span class="line">.....</span><br><span class="line">tiller-deploy-86dfb4886-4544p             0/1     ERRORIMAGE    0          25h</span><br></pre></td></tr></table></figure><p>image 没有下来的话， 可以改为其他镜像地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">helm init --service-account tiller --skip-refresh --tiller-image jessestuart/tiller:$helm_version --upgrade</span><br><span class="line">helm init --service-account tiller</span><br></pre></td></tr></table></figure><p>如果没起来。可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm init --upgrade</span><br></pre></td></tr></table></figure><p>如果报错信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This command needs 1 argument: chart name</span><br></pre></td></tr></table></figure><p>那么需要添加 –name 参数  ：  如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm init --service-account --name tiller</span><br></pre></td></tr></table></figure><h3 id="Helm安装Rancher"><a href="#Helm安装Rancher" class="headerlink" title="Helm安装Rancher"></a>Helm安装Rancher</h3><p>添加Chart仓库地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">helm repo add rancher-stable \</span><br><span class="line">https://releases.rancher.com/server-charts/stable</span><br><span class="line"></span><br><span class="line">helm repo update</span><br></pre></td></tr></table></figure><font color="#FF0000"> 如果自己有证书：可以用下面方法：</font> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">配置SSL</span><br><span class="line">注意：rancher默认使用https访问，因此，需要有一个公网的SSL才行。我在阿里云上面买了一个通配符的SSL证书。</span><br><span class="line">将证书上传到5.100</span><br><span class="line">在5.100上执行</span><br><span class="line">创建secret</span><br><span class="line">kubectl create ns cattle-system</span><br><span class="line">kubectl -n cattle-system create secret tls tls-rancher-ingress --cert=./123pem --key=./123key</span><br><span class="line">通过helm安装rancher</span><br><span class="line">helm install rancher-stable/rancher   --name rancher   --namespace cattle-system   --set hostname=rancher.shining.com   --set ingress.tls.source=secret</span><br><span class="line">注意：这里指定了hostname=rancher.shining.com，必须使用域名访问才行。</span><br></pre></td></tr></table></figure><font color="#FF0000"> 没有证书， 需要rancher自己创建证书，需要配置：</font> <p>仅在使用 Rancher 生成的证书 ingress.tls.source=rancher 或 Let’s Encrypt 颁发的证书 ingress.tls.source=letsEncrypt时才需要 cert-manager。<br>这些说明来自官方的 cert-manager 文档。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 安装 CustomResourceDefinition 资源</span><br><span class="line">kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v0.15.0/cert-manager.crds.yaml</span><br><span class="line"></span><br><span class="line"># **重要：**</span><br><span class="line"># 如果您正在运行 Kubernetes v1.15 或更低版本，</span><br><span class="line"># 则需要在上方的 kubectl apply 命令中添加`--validate=false`标志，</span><br><span class="line"># 否则您将在 cert-manager 的 CustomResourceDefinition 资源中收到与</span><br><span class="line"># x-kubernetes-preserve-unknown-fields 字段有关的验证错误。</span><br><span class="line"># 这是一个良性错误，是由于 kubectl 执行资源验证的方式造成的。</span><br><span class="line"></span><br><span class="line"># 为 cert-manager 创建命名空间</span><br><span class="line">kubectl create namespace cert-manager</span><br><span class="line"># 添加 Jetstack Helm 仓库</span><br><span class="line">helm repo add jetstack https://charts.jetstack.io</span><br><span class="line"># 更新本地 Helm chart 仓库缓存</span><br><span class="line">helm repo update</span><br><span class="line"># 安装 cert-manager Helm chart</span><br><span class="line">helm install \</span><br><span class="line"> --name cert-manager jetstack/cert-manager \</span><br><span class="line"> --namespace cert-manager \</span><br><span class="line"> --version v0.15.0</span><br></pre></td></tr></table></figure><p>安装完 cert-manager 后，您可以通过检查 cert-manager 命名空间中正在运行的 Pod 来验证它是否已正确部署：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods --namespace cert-manager</span><br><span class="line">NAME                                      READY   STATUS    RESTARTS   AGE</span><br><span class="line">cert-manager-6557d7bd98-dqjxh             1/1     Running   0          25h</span><br><span class="line">cert-manager-cainjector-6749f5b67-p46rd   1/1     Running   0          25h</span><br><span class="line">cert-manager-webhook-d886869c4-x6r7f      1/1     Running   0          25h</span><br></pre></td></tr></table></figure><h3 id="通过helm安装rancher"><a href="#通过helm安装rancher" class="headerlink" title="通过helm安装rancher"></a>通过helm安装rancher</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm install rancher-stable/rancher   --name rancher   --namespace cattle-system  --set hostname=rancher.shining.com  --set ingress.tls.source=rancher</span><br></pre></td></tr></table></figure><p>注意：这里指定了hostname=rancher.shining.com，必须使用域名访问才行。<br>查看rancher 运行状况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> kubectl get pods --namespace cattle-system</span><br><span class="line">NAME                                    READY   STATUS             RESTARTS   AGE</span><br><span class="line">cattle-cluster-agent-85695669b4-fh27p   0/1     CrashLoopBackOff   297        25h</span><br><span class="line">cattle-node-agent-7js5j                 1/1     Running            0          25h</span><br><span class="line">cattle-node-agent-p9ft2                 1/1     Running            0          25h</span><br><span class="line">cattle-node-agent-zdrb7                 1/1     Running            0          25h</span><br><span class="line">rancher-7d578c767b-5f2fv                1/1     Running            0          25h</span><br><span class="line">rancher-7d578c767b-9b72j                1/1     Running            0          25h</span><br><span class="line">rancher-7d578c767b-khrv6                1/1     Running            0          25h</span><br></pre></td></tr></table></figure><p>可以临时配置域名解析，或hosts方式访问，后期可以配置到DNS中 ， agent添加到server中都需要这个域名。</p><p>编辑主机 hosts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.5.100  rancher.shining.com</span><br></pre></td></tr></table></figure><p>注释，5.100、5.101、5.103 指向任何一台机器都可以访问。</p><p>访问页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://rancher.shining.com</span><br></pre></td></tr></table></figure><p>页面提示设置密码，rangcher就配置好了。</p><h3 id="nginx-代理配置："><a href="#nginx-代理配置：" class="headerlink" title="nginx 代理配置："></a>nginx 代理配置：</h3><p>nginx是作为前端访问的代理地址， 祈祷负载作用。agent 也会通过这么域名访问到server的   </p><p>5.237 机器上配置 nginx。<br>添加repo 源  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/nginx.repo</span><br><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure><p>修改配置文件：  vim /etc/nginx/nginx.conf  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">user nginx;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 8192;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line">    # Load modular configuration files from the /etc/nginx/conf.d directory.</span><br><span class="line">    # See http://nginx.org/en/docs/ngx_core_module.html#include</span><br><span class="line">    # for more information.</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen         80;</span><br><span class="line">        return 301 https://$host$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">stream &#123;</span><br><span class="line">    upstream rancher_servers &#123;</span><br><span class="line">        least_conn;</span><br><span class="line">        server 192.168.5.100:443 max_fails=3 fail_timeout=5s;</span><br><span class="line">        server 192.168.5.101:443 max_fails=3 fail_timeout=5s;</span><br><span class="line">        server 192.168.5.103:443 max_fails=3 fail_timeout=5s;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen     443;</span><br><span class="line">        proxy_pass rancher_servers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动nginx  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx</span><br><span class="line">或</span><br><span class="line">systemctl reload nginx</span><br></pre></td></tr></table></figure><p>以后域名地址解析到 5.237 机器上就可以访问了。当然nginx也可以安装到集群中，或其他负载方式。</p><h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><p>1、执行以下命令为Rancher Server容器配置hosts:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[rancher@5.100 ~]$ kubectl -n cattle-system patch deployments rancher --patch &apos;&#123;</span><br><span class="line">    &quot;spec&quot;: &#123;</span><br><span class="line">        &quot;template&quot;: &#123;</span><br><span class="line">            &quot;spec&quot;: &#123;</span><br><span class="line">                &quot;hostAliases&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;hostnames&quot;:</span><br><span class="line">                        [</span><br><span class="line">                            &quot;rancher.shining.com&quot;</span><br><span class="line">                        ],</span><br><span class="line">                            &quot;ip&quot;: &quot;192.168.100.237&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure><p>2、在Rancher Web UI中依次进入local集群/system项目，在cattle-system命名空间中查看是否有cattle-cluster-agent Pod和cattle-node-agent pod被创建。如果有创建则进行下面的步骤，没有创建则等待；<br>cattle-cluster-agent pod  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[rancher@5.100 ~]$ kubectl -n cattle-system \</span><br><span class="line">patch deployments cattle-cluster-agent --patch &apos;&#123;</span><br><span class="line">    &quot;spec&quot;: &#123;</span><br><span class="line">        &quot;template&quot;: &#123;</span><br><span class="line">            &quot;spec&quot;: &#123;</span><br><span class="line">                &quot;dnsPolicy&quot;: &quot;ClusterFirstWithHostNet&quot;,</span><br><span class="line">                &quot;hostNetwork&quot;: true,</span><br><span class="line">                &quot;hostAliases&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;hostnames&quot;:</span><br><span class="line">                        [</span><br><span class="line">                            &quot;rancher.shining.com&quot;</span><br><span class="line">                        ],</span><br><span class="line">                            &quot;ip&quot;: &quot;192.168.5.237&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure><p>cattle-node-agent pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[rancher@node1 ~]$ kubectl -n cattle-system \</span><br><span class="line">patch  daemonsets cattle-node-agent --patch &apos;&#123;</span><br><span class="line">    &quot;spec&quot;: &#123;</span><br><span class="line">        &quot;template&quot;: &#123;</span><br><span class="line">            &quot;spec&quot;: &#123;</span><br><span class="line">                &quot;hostAliases&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;hostnames&quot;:</span><br><span class="line">                        [</span><br><span class="line">                            &quot;rancher.shining.com&quot;</span><br><span class="line">                        ],</span><br><span class="line">                            &quot;ip&quot;: &quot;192.168.5.237&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure><h3 id="相关文章："><a href="#相关文章：" class="headerlink" title="相关文章："></a>相关文章：</h3><p>rancher 官网:  <a href="https://rancher2.docs.rancher.cn/docs/installation/k8s-install/helm-rancher/_index" target="_blank" rel="noopener">https://rancher2.docs.rancher.cn/docs/installation/k8s-install/helm-rancher/_index</a><br>腾讯云文档 :  <a href="https://cloud.tencent.com/developer/article/1638170" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1638170</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RKE 安装 rancher HA server 一般要有4台机器， 一台是lvs、nginx代理机器，3台为K8S机器，做etc、rancher server。&lt;/p&gt;
&lt;p&gt;版本：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker: 19.03.5  &lt;/li&gt;
&lt;li&gt;rancher server： 2.4.5  &lt;/li&gt;
&lt;li&gt;kubrctl: 1.18.5  &lt;/li&gt;
&lt;li&gt;rke: 1.0.10  &lt;/li&gt;
&lt;li&gt;helm：2.16.6  &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="rancher" scheme="https://sukbeta.github.io/categories/rancher/"/>
    
    
      <category term="docker" scheme="https://sukbeta.github.io/tags/docker/"/>
    
      <category term="rancher" scheme="https://sukbeta.github.io/tags/rancher/"/>
    
  </entry>
  
  <entry>
    <title>docker容器里排错小方法</title>
    <link href="https://sukbeta.github.io/docker-share-troubleshooting/"/>
    <id>https://sukbeta.github.io/docker-share-troubleshooting/</id>
    <published>2020-05-27T02:52:53.000Z</published>
    <updated>2023-12-26T02:13:14.569Z</updated>
    
    <content type="html"><![CDATA[<p>docker 容器在封装的时候一般只会安装程序需要的软件包。一些工具类的软件包不会安装的，这样容器会很大。也不常用，无意义。</p><p>但是这样如果容器有问题，或想查看一些信息，如网络信息、文件内容、抓包等。这样就没办法做到了。</p><p>下面说一种方法，容器共享进程、网络资源，可以用用 –pid、–ipc、–net 等参数</p><p>这样就可以查看容器的进程信息、网络、文件等事情了。</p><p>首先，运行一个容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 7080:80 nginx:latest</span><br></pre></td></tr></table></figure><p>运行一个nginx容器，</p><p>直接用 docker exec 进到容器里的时候， 是不能用iptables、ps、vim等命令的。</p><a id="more"></a><p>获取容器ID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">CONTAINER ID        IMAGE                                        COMMAND                  CREATED             STATUS              PORTS                                          NAMES</span><br><span class="line">b99f5509819c        nginx:latest   &quot;nginx -g &apos;daemon of…&quot;   2 hours ago         Up 2 hours           0.0.0.0:7080-&gt;80/tcp   musing_kepler</span><br></pre></td></tr></table></figure><h4 id="我们开始进入到容器"><a href="#我们开始进入到容器" class="headerlink" title="我们开始进入到容器"></a>我们开始进入到容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CID=b99f5509819c</span><br><span class="line">docker run -it --net=container:$CID --ipc=container:$CID --pid=container:$CID alpine-tools:latest</span><br></pre></td></tr></table></figure><p>CID 是容器 ID， 后面都用 $CID  来代替</p><ul><li>alpine-tools:latest 是自己做的镜像， 可以把常用的命令放在里面，如（iptables、tcpdump、vim等）</li></ul><p>这样，容器的网络、磁盘、进程都和你启动这个容器共享了，所以就可以实时查看nginx容器里的信息。</p><p>运行ps 就可以看到nginx的进程了  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/ # ps</span><br><span class="line">PID   USER     TIME  COMMAND</span><br><span class="line">    1 root      0:00 nginx: master process nginx -g daemon off;</span><br><span class="line">    6 101       0:00 nginx: worker process</span><br><span class="line">   77 root      0:00 /bin/sh</span><br><span class="line">   82 root      0:00 ps</span><br><span class="line">/ #</span><br></pre></td></tr></table></figure><p>运行tcpdump 就可以实时抓包了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/ # tcpdump -XX -A</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class="line">listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">09:35:44.971181 IP 10.1.1.1.5045 &gt; b99f5509819c.80: Flags [S], seq 1170821353, win 65535, options [mss 1280,nop,wscale 6,nop,nop,TS val 53306312 ecr 0,sackOK,eol], length 0</span><br><span class="line">0x0000:  0242 ac11 0002 0242 bf93 7039 0800 45b8  .B.....B..p9..E.</span><br><span class="line">0x0010:  0040 0000 0000 2a06 1951 0a76 c026 ac11  .@....*..Q.v.&amp;..</span><br><span class="line">0x0020:  0002 13b5 0050 45c9 50e9 0000 0000 b002  .....PE.P.......</span><br><span class="line">0x0030:  ffff af53 0000 0204 0500 0103 0306 0101  ...S............</span><br><span class="line">0x0040:  080a 032d 63c8 0000 0000 0402 0000       ...-c.........</span><br><span class="line">09:35:44.971227 IP b99f5509819c.80 &gt; 10.1.11.5045: Flags [S.], seq 3301963106, ack 1170821354, win 28960, options [mss 1460,sackOK,TS val 237381948 ecr 53306312,nop,wscale 9], length 0</span><br><span class="line">0x0000:  0242 bf93 7039 0242 ac11 0002 0800 4500  .B..p9.B......E.</span><br><span class="line">0x0010:  003c 0000 4000 4006 c40c ac11 0002 0a76  .&lt;..@.@........v</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>但是这个时候运行 iptables 还是不行的， 提示没有权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/ # iptables -n -L</span><br><span class="line">iptables v1.8.3 (legacy): can&apos;t initialize iptables table `filter&apos;: Permission denied (you must be root)</span><br><span class="line">Perhaps iptables or your kernel needs to be upgraded.</span><br><span class="line">/ #</span><br></pre></td></tr></table></figure><h4 id="需要运行工具容器的时候提权才能行，添加-privileged-参数。-如："><a href="#需要运行工具容器的时候提权才能行，添加-privileged-参数。-如：" class="headerlink" title="需要运行工具容器的时候提权才能行，添加 privileged  参数。 如："></a>需要运行工具容器的时候提权才能行，添加 privileged  参数。 如：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --privileged --net=container:$CID --ipc=container:$CID --pid=container:$CID alpine-tools:latest</span><br></pre></td></tr></table></figure><p>运行 iptables 命令  (返回结果类似于这样)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> # iptables -t nat -nL</span><br><span class="line">Chain PREROUTING (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line"></span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">DOCKER_OUTPUT  all  --  0.0.0.0/0            127.0.0.11</span><br><span class="line"></span><br><span class="line">Chain POSTROUTING (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">DOCKER_POSTROUTING  all  --  0.0.0.0/0            127.0.0.11</span><br><span class="line"></span><br><span class="line">Chain DOCKER_OUTPUT (1 references)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">DNAT       tcp  --  0.0.0.0/0            127.0.0.11           tcp dpt:53 to:127.0.0.11:36820</span><br><span class="line">DNAT       udp  --  0.0.0.0/0            127.0.0.11           udp dpt:53 to:127.0.0.11:37685</span><br><span class="line"></span><br><span class="line">Chain DOCKER_POSTROUTING (1 references)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">SNAT       tcp  --  127.0.0.11           0.0.0.0/0            tcp spt:36820 to::53</span><br><span class="line">SNAT       udp  --  127.0.0.11           0.0.0.0/0            udp spt:37685 to::53</span><br></pre></td></tr></table></figure><p>如果你的容器是 -v 挂载volume 启动的话</p><p>容器启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 7080:80 nginx:latest</span><br></pre></td></tr></table></figure><h4 id="可以用下面的方式查看-volume-里数据。"><a href="#可以用下面的方式查看-volume-里数据。" class="headerlink" title="可以用下面的方式查看 volume 里数据。"></a>可以用下面的方式查看 volume 里数据。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --privileged --net=container:$CID --ipc=container:$CID --pid=container:$CID --volumes-from $CID:ro alpine-tools:latest</span><br></pre></td></tr></table></figure><p>这样就可以查看 volume 里的数据了， </p><ul><li>如果你的volume是NFS、ceph等网络存储，你可以这样做来吧数据备份到本地。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run --volumes-from $CID -v $(pwd):/backup alpine-tools:latest tar cvf /backup/backup.tar /home</span><br><span class="line"></span><br><span class="line"> # 将 $CID 容器上volume挂在到本容器上， 在讲当前目录挂在到容器的 /backup 目录， 进入容器执行 tar 备份目录</span><br></pre></td></tr></table></figure><p>另外 还有其他方式可以查看容器的方式，简单介绍一下。</p><h4 id="nsenter-方式"><a href="#nsenter-方式" class="headerlink" title="nsenter 方式"></a>nsenter 方式</h4><p>nsenter 需要做的容器里的进程 PID 的， </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PID=$(docker inspect --format &apos;&#123;&#123;.State.Pid&#125;&#125;&apos; $CID)</span><br><span class="line">nsenter --target $PID --mount --uts --ipc --net --pid</span><br></pre></td></tr></table></figure><p>这样就可以进图到容器里了。</p><p>这样的你程序镜像就不用安装一下系统工具的软件包了。 有问题可以用这一种容器共享的方式来排查了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;docker 容器在封装的时候一般只会安装程序需要的软件包。一些工具类的软件包不会安装的，这样容器会很大。也不常用，无意义。&lt;/p&gt;
&lt;p&gt;但是这样如果容器有问题，或想查看一些信息，如网络信息、文件内容、抓包等。这样就没办法做到了。&lt;/p&gt;
&lt;p&gt;下面说一种方法，容器共享进程、网络资源，可以用用 –pid、–ipc、–net 等参数&lt;/p&gt;
&lt;p&gt;这样就可以查看容器的进程信息、网络、文件等事情了。&lt;/p&gt;
&lt;p&gt;首先，运行一个容器：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run -d -p 7080:80 nginx:latest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行一个nginx容器，&lt;/p&gt;
&lt;p&gt;直接用 docker exec 进到容器里的时候， 是不能用iptables、ps、vim等命令的。&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="https://sukbeta.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://sukbeta.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker配置proxy代理用户名和密码</title>
    <link href="https://sukbeta.github.io/docker-proxy/"/>
    <id>https://sukbeta.github.io/docker-proxy/</id>
    <published>2020-05-25T08:46:50.000Z</published>
    <updated>2023-12-26T01:48:52.156Z</updated>
    
    <content type="html"><![CDATA[<p>当Docker的服务器无法直接访问Internet时，需要使用代理。将Docker守护程序配置为使用代理服务器来访问Docker Hub等镜像仓库。有两种方法可以为docker配置代理。</p><ul><li>在 /etc/sysconfig/docker 文件中配置代理变量</li><li>配置环境变量</li></ul><h4 id="方法一：-在-etc-sysconfig-docker-文件中配置代理变量"><a href="#方法一：-在-etc-sysconfig-docker-文件中配置代理变量" class="headerlink" title="方法一： 在 /etc/sysconfig/docker 文件中配置代理变量"></a>方法一： 在 /etc/sysconfig/docker 文件中配置代理变量</h4><p>1、在 /etc/sysconfig/docker 文件中添加以下配置：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HTTP_PROXY=&quot;http://USERNAME:PASSWORD@[your.proxy.server]:[port]&quot;</span><br><span class="line">export HTTPS_PROXY=&quot;https://USERNAME:PASSWORD@[your.proxy.server]:[port]&quot;</span><br></pre></td></tr></table></figure><p>For example :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cat /etc/sysconfig/docker</span><br><span class="line">HTTP_PROXY=&quot;http://username:password@192.168.1.1:8080&quot;</span><br><span class="line">HTTPS_PROXY=&quot;https://username:password@192.168.1.1:8080&quot;</span><br></pre></td></tr></table></figure><p>2、设置代理后，重新启动Docker守护程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># service docker restart</span><br></pre></td></tr></table></figure><h4 id="方法二：-配置环境变量方式"><a href="#方法二：-配置环境变量方式" class="headerlink" title="方法二： 配置环境变量方式"></a>方法二： 配置环境变量方式</h4><p>1、创建目录（如果没有）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mkdir /etc/systemd/system/docker.service.d</span><br></pre></td></tr></table></figure><p>2、编辑一个peoxy的配置文件   /etc/systemd/system/docker.service.d/http-proxy.conf  ，添加内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># vim /etc/systemd/system/docker.service.d/http-proxy.conf</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Environment=&quot;HTTP_PROXY=http://username:password@192.168.1.1:8080/&quot;</span><br><span class="line">Environment=&quot;HTTPS_PROXY=https://username:password@192.168.1.1:8080/&quot;</span><br><span class="line">Environment=&quot;NO_PROXY= hostname.example.com,172.16.0.12&quot;</span><br></pre></td></tr></table></figure><p>3、重新加载systemd守护程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>4、重启docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># systemctl restart docker</span><br></pre></td></tr></table></figure><p>5、验证配置是否已加载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># systemctl show docker --property Environment</span><br><span class="line">Environment=HTTP_PROXY=http://username:password@192.168.1.1:8080/ HTTPS_PROXY=https://username:password@192.168.1.1:8080/ NO_PROXY= hostname.example.com,172.16.0.12</span><br></pre></td></tr></table></figure><p>这样配置完成之后在 docker pull 镜像就可以了  </p><ul><li>验证第二种配置生效</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当Docker的服务器无法直接访问Internet时，需要使用代理。将Docker守护程序配置为使用代理服务器来访问Docker Hub等镜像仓库。有两种方法可以为docker配置代理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 /etc/sysconfig/docker 文件中配置代理变量&lt;/li&gt;
&lt;li&gt;配置环境变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;方法一：-在-etc-sysconfig-docker-文件中配置代理变量&quot;&gt;&lt;a href=&quot;#方法一：-在-etc-sysconfig-docker-文件中配置代理变量&quot; class=&quot;headerlink&quot; title=&quot;方法一： 在 /etc/sysconfig/docker 文件中配置代理变量&quot;&gt;&lt;/a&gt;方法一： 在 /etc/sysconfig/docker 文件中配置代理变量&lt;/h4&gt;&lt;p&gt;1、在 /etc/sysconfig/docker 文件中添加以下配置：&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="https://sukbeta.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://sukbeta.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>hbase在线平滑迁移region数据</title>
    <link href="https://sukbeta.github.io/region-data-migration/"/>
    <id>https://sukbeta.github.io/region-data-migration/</id>
    <published>2020-04-19T09:09:12.000Z</published>
    <updated>2023-12-26T02:09:54.006Z</updated>
    
    <content type="html"><![CDATA[<p>hbase regionserver 下线，做数据迁移。 这个方法可以在线上平滑迁移。   </p><p>hbase 版本： 1.2.4</p><p>####n首先 关闭 hbase 的 balance </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main)&gt; balance_switch false</span><br></pre></td></tr></table></figure><h4 id="将新的regionserver节点上线"><a href="#将新的regionserver节点上线" class="headerlink" title="将新的regionserver节点上线"></a>将新的regionserver节点上线</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase-daemon.sh start regionserver</span><br></pre></td></tr></table></figure><h4 id="之后就可以迁移数据了。"><a href="#之后就可以迁移数据了。" class="headerlink" title="之后就可以迁移数据了。"></a>之后就可以迁移数据了。</h4><p>到新的region server上执行 下面命令。<br>使用hbase自带的rb脚本，在hbase bin目录下面<br>unload：转移rs上的region；load：将所有region转移到此rs<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase org.jruby.Main $&#123;HBASE_HOME&#125;/bin/region_mover.rb unload  regionserver00.hostname.com</span><br></pre></td></tr></table></figure></p><ul><li>在需要迁移到的机器上执行， 如要将regionserver00.hostname.com上的数据迁移到regionserver03.hostname.com机器上， 那么就在regionserver03.hostname.com机器上执行命令，hostname写regionserver00.hostname.com  </li></ul><p>等待任务完成。</p><h4 id="之后就可以把数据迁移走的节点下线了"><a href="#之后就可以把数据迁移走的节点下线了" class="headerlink" title="之后就可以把数据迁移走的节点下线了"></a>之后就可以把数据迁移走的节点下线了</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase-daemon.sh stop regionserver</span><br></pre></td></tr></table></figure><h4 id="最后在开启hbase的balance"><a href="#最后在开启hbase的balance" class="headerlink" title="最后在开启hbase的balance"></a>最后在开启hbase的balance</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main)&gt; balance_switch true</span><br></pre></td></tr></table></figure><p>这样就完成了数据迁移。 之后需要的就是更新同步hbase 配置文件中的regionservers 文件。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hbase regionserver 下线，做数据迁移。 这个方法可以在线上平滑迁移。   &lt;/p&gt;
&lt;p&gt;hbase 版本： 1.2.4&lt;/p&gt;
&lt;p&gt;####n首先 关闭 hbase 的 balance &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hbase(main)&amp;gt; balance_switch false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;将新的regionserver节点上线&quot;&gt;&lt;a href=&quot;#将新的regionserver节点上线&quot; class=&quot;headerlink&quot; title=&quot;将新的regionserver节点上线&quot;&gt;&lt;/a&gt;将新的regionserver节点上线&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hbase-daemon.sh start regionserver&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;之后就可以迁移数据了。&quot;&gt;&lt;a href=&quot;#之后就可以迁移数据了。&quot; class=&quot;headerlink&quot; title=&quot;之后就可以迁移数据了。&quot;&gt;&lt;/a&gt;之后就可以迁移数据了。&lt;/h4&gt;&lt;p&gt;到新的region server上执行 下面命令。&lt;br&gt;使用hbase自带的rb脚本，在hbase bin目录下面&lt;br&gt;unload：转移rs上的region；load：将所有region转移到此rs&lt;br&gt;
    
    </summary>
    
      <category term="hadoop" scheme="https://sukbeta.github.io/categories/hadoop/"/>
    
    
      <category term="hbase" scheme="https://sukbeta.github.io/tags/hbase/"/>
    
  </entry>
  
  <entry>
    <title>docker启动容器的时候携带&quot;--restart=always&quot;参数后如何删除容器</title>
    <link href="https://sukbeta.github.io/docker-restart-always/"/>
    <id>https://sukbeta.github.io/docker-restart-always/</id>
    <published>2020-04-19T08:16:43.000Z</published>
    <updated>2023-12-26T02:11:29.067Z</updated>
    
    <content type="html"><![CDATA[<p>当容器启动的时候添加了 “–restart=always” 参数，那样容器有问题会一直重启， docker服务重启之后，这个容器也会自动起来。</p><p>这样的启动方式适合与一些监控程序，跟着机器一起启动，出问题也会自动重启。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always nginx:latest</span><br></pre></td></tr></table></figure><a id="more"></a> <p>如果这个时候我们不要这个容器了， 应该怎么停止呢？</p><p>我们需要更新 restart 的状态。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update --restart=no nginx:latest</span><br></pre></td></tr></table></figure><p>这样之后， 这个容器就不会在自动启动了。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当容器启动的时候添加了 “–restart=always” 参数，那样容器有问题会一直重启， docker服务重启之后，这个容器也会自动起来。&lt;/p&gt;
&lt;p&gt;这样的启动方式适合与一些监控程序，跟着机器一起启动，出问题也会自动重启。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run -d --restart=always nginx:latest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="docker" scheme="https://sukbeta.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://sukbeta.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>tls Cipher 算法和名字对应表</title>
    <link href="https://sukbeta.github.io/tls-ciphers-list/"/>
    <id>https://sukbeta.github.io/tls-ciphers-list/</id>
    <published>2019-12-10T03:46:04.000Z</published>
    <updated>2019-12-10T07:15:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>tls Cipher 算法和名字对应表  </p><p>可以用opensll命令得到加密套件，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl ciphers [-v] [-ssl2] [-ssl3] [-tls1] [cipherlist]</span><br></pre></td></tr></table></figure><h4 id="选项说明："><a href="#选项说明：" class="headerlink" title="选项说明："></a>选项说明：</h4><p>-v：详细列出所有加密套件。包括ssl版本（SSLv2 、SSLv3以及 TLS）、密钥交换算法、身份验证算法、对称算法、摘要算法以及该算法是否可以出口。</p><p>-ssl2：只列出SSLv2使用的加密套件。</p><p>-ssl3：只列出SSLv3使用的加密套件。<br><a id="more"></a>  </p><p>-tls1：只列出tls使用的加密套件。</p><p>cipherlist：列出一个cipher list的详细内容。用此项能列出所有符合规则的加密套件，如果不加-v选项，它只显示各个套件名字；</p><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><p>列举OpenSSL算法套件包括NULL算法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl ciphers -v &apos;ALL:eNULL&apos;</span><br></pre></td></tr></table></figure><p>包括所有的算法除空的以及匿名的DH算法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl ciphers -v &apos;ALL:!ADH:@STRENGTH&apos;</span><br></pre></td></tr></table></figure><p>包含3DES算法和RSA算法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl ciphers -v &apos;3DES:+RSA&apos;</span><br></pre></td></tr></table></figure><p>包含所有的RC4算法但是不包含验证算法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl ciphers -v &apos;RC4:!COMPLEMENTOFDEFAUL</span><br></pre></td></tr></table></figure><p>相关链接 <a href="https://blog.csdn.net/as3luyuan123/article/details/13609819" target="_blank" rel="noopener">https://blog.csdn.net/as3luyuan123/article/details/13609819</a></p><h4 id="Mapping-OpenSSL-cipher-suite-names-to-IANA-names"><a href="#Mapping-OpenSSL-cipher-suite-names-to-IANA-names" class="headerlink" title="Mapping OpenSSL cipher suite names to IANA names"></a>Mapping OpenSSL cipher suite names to IANA names</h4><p>List</p><p>相关链接 ： <a href="https://testssl.sh/openssl-iana.mapping.html" target="_blank" rel="noopener">https://testssl.sh/openssl-iana.mapping.html</a></p><table><thead><tr><th>Cipher Suite</th><th>Name (OpenSSL)</th><th>KeyExch.</th><th>Encryption</th><th>Bits</th><th>Cipher Suite Name (IANA)</th></tr></thead><tbody><tr><td>[0x00]</td><td></td><td>None</td><td>Null</td><td>0</td><td>TLS_NULL_WITH_NULL_NULL</td></tr><tr><td>[0x01]</td><td>NULL-MD5</td><td>RSA</td><td>Null</td><td>0</td><td>TLS_RSA_WITH_NULL_MD5</td></tr><tr><td>[0x02]</td><td>NULL-SHA</td><td>RSA</td><td>Null</td><td>0</td><td>TLS_RSA_WITH_NULL_SHA</td></tr><tr><td>[0x03]</td><td>EXP-RC4-MD5</td><td>RSA(512)</td><td>RC4</td><td>40, export</td><td>TLS_RSA_EXPORT_WITH_RC4_40_MD5</td></tr><tr><td>[0x04]</td><td>RC4-MD5</td><td>RSA</td><td>RC4</td><td>128</td><td>TLS_RSA_WITH_RC4_128_MD5</td></tr><tr><td>[0x05]</td><td>RC4-SHA</td><td>RSA</td><td>RC4</td><td>128</td><td>TLS_RSA_WITH_RC4_128_SHA</td></tr><tr><td>[0x06]</td><td>EXP-RC2-CBC-MD5</td><td>RSA(512)</td><td>RC2</td><td>40, export</td><td>TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5</td></tr><tr><td>[0x07]</td><td>IDEA-CBC-SHA</td><td>RSA</td><td>IDEA</td><td>128</td><td>TLS_RSA_WITH_IDEA_CBC_SHA</td></tr><tr><td>[0x08]</td><td>EXP-DES-CBC-SHA</td><td>RSA(512)</td><td>DES</td><td>40, export</td><td>TLS_RSA_EXPORT_WITH_DES40_CBC_SHA</td></tr><tr><td>[0x09]</td><td>DES-CBC-SHA</td><td>RSA</td><td>DES</td><td>56</td><td>TLS_RSA_WITH_DES_CBC_SHA</td></tr><tr><td>[0x0a]</td><td>DES-CBC3-SHA</td><td>RSA</td><td>3DES</td><td>168</td><td>TLS_RSA_WITH_3DES_EDE_CBC_SHA</td></tr><tr><td>[0x0b]</td><td>EXP-DH-DSS-DES-CBC-SHA</td><td>DH/DSS</td><td>DES</td><td>40, export</td><td>TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA</td></tr><tr><td>[0x0c]</td><td>DH-DSS-DES-CBC-SHA</td><td>DH/DSS</td><td>DES</td><td>56</td><td>TLS_DH_DSS_WITH_DES_CBC_SHA</td></tr><tr><td>[0x0d]</td><td>DH-DSS-DES-CBC3-SHA</td><td>DH/DSS</td><td>3DES</td><td>168</td><td>TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA</td></tr><tr><td>[0x0e]</td><td>EXP-DH-RSA-DES-CBC-SHA</td><td>DH/RSA</td><td>DES</td><td>40, export</td><td>TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA</td></tr><tr><td>[0x0f]</td><td>DH-RSA-DES-CBC-SHA</td><td>DH/RSA</td><td>DES</td><td>56</td><td>TLS_DH_RSA_WITH_DES_CBC_SHA</td></tr><tr><td>[0x10]</td><td>DH-RSA-DES-CBC3-SHA</td><td>DH/RSA</td><td>3DES</td><td>168</td><td>TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA</td></tr><tr><td>[0x11]</td><td>EXP-EDH-DSS-DES-CBC-SHA</td><td>DH(512)</td><td>DES</td><td>40, export</td><td>TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA</td></tr><tr><td>[0x12]</td><td>EDH-DSS-DES-CBC-SHA</td><td>DH</td><td>DES</td><td>56</td><td>TLS_DHE_DSS_WITH_DES_CBC_SHA</td></tr><tr><td>[0x13]</td><td>EDH-DSS-DES-CBC3-SHA</td><td>DH</td><td>3DES</td><td>168</td><td>TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA</td></tr><tr><td>[0x14]</td><td>EXP-EDH-RSA-DES-CBC-SHA</td><td>DH(512)</td><td>DES</td><td>40, export</td><td>TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA</td></tr><tr><td>[0x15]</td><td>EDH-RSA-DES-CBC-SHA</td><td>DH</td><td>DES</td><td>56</td><td>TLS_DHE_RSA_WITH_DES_CBC_SHA</td></tr><tr><td>[0x16]</td><td>EDH-RSA-DES-CBC3-SHA</td><td>DH</td><td>3DES</td><td>168</td><td>TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA</td></tr><tr><td>[0x17]</td><td>EXP-ADH-RC4-MD5</td><td>DH(512)</td><td>RC4</td><td>40, export</td><td>TLS_DH_anon_EXPORT_WITH_RC4_40_MD5</td></tr><tr><td>[0x18]</td><td>ADH-RC4-MD5</td><td>DH</td><td>RC4</td><td>128</td><td>TLS_DH_anon_WITH_RC4_128_MD5</td></tr><tr><td>[0x19]</td><td>EXP-ADH-DES-CBC-SHA</td><td>DH(512)</td><td>DES</td><td>40, export</td><td>TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA</td></tr><tr><td>[0x1a]</td><td>ADH-DES-CBC-SHA</td><td>DH</td><td>DES</td><td>56</td><td>TLS_DH_anon_WITH_DES_CBC_SHA</td></tr><tr><td>[0x1b]</td><td>ADH-DES-CBC3-SHA</td><td>DH</td><td>3DES</td><td>168</td><td>TLS_DH_anon_WITH_3DES_EDE_CBC_SHA</td></tr><tr><td>[0x1c]</td><td></td><td>FORTEZZA</td><td>Null</td><td>0</td><td>SSL_FORTEZZA_KEA_WITH_NULL_SHA</td></tr><tr><td>[0x1d]</td><td></td><td>FORTEZZA</td><td>FORTEZZA_CBC</td><td>80</td><td>SSL_FORTEZZA_KEA_WITH_FORTEZZA_CBC_SHA</td></tr><tr><td>[0x1e]</td><td></td><td>FORTEZZA</td><td>FORTEZZA_RC4</td><td>128</td><td>SSL_FORTEZZA_KEA_WITH_RC4_128_SHA</td></tr><tr><td>[0x1e]</td><td>KRB5-DES-CBC-SHA</td><td>KRB5</td><td>DES</td><td>56</td><td>TLS_KRB5_WITH_DES_CBC_SHA</td></tr><tr><td>[0x1f]</td><td>KRB5-DES-CBC3-SHA</td><td>KRB5</td><td>3DES</td><td>168</td><td>TLS_KRB5_WITH_3DES_EDE_CBC_SHA</td></tr><tr><td>[0x20]</td><td>KRB5-RC4-SHA</td><td>KRB5</td><td>RC4</td><td>128</td><td>TLS_KRB5_WITH_RC4_128_SHA</td></tr><tr><td>[0x21]</td><td>KRB5-IDEA-CBC-SHA</td><td>KRB5</td><td>IDEA</td><td>128</td><td>TLS_KRB5_WITH_IDEA_CBC_SHA</td></tr><tr><td>[0x22]</td><td>KRB5-DES-CBC-MD5</td><td>KRB5</td><td>DES</td><td>56</td><td>TLS_KRB5_WITH_DES_CBC_MD5</td></tr><tr><td>[0x23]</td><td>KRB5-DES-CBC3-MD5</td><td>KRB5</td><td>3DES</td><td>168</td><td>TLS_KRB5_WITH_3DES_EDE_CBC_MD5</td></tr><tr><td>[0x24]</td><td>KRB5-RC4-MD5</td><td>KRB5</td><td>RC4</td><td>128</td><td>TLS_KRB5_WITH_RC4_128_MD5</td></tr><tr><td>[0x25]</td><td>KRB5-IDEA-CBC-MD5</td><td>KRB5</td><td>IDEA</td><td>128</td><td>TLS_KRB5_WITH_IDEA_CBC_MD5</td></tr><tr><td>[0x26]</td><td>EXP-KRB5-DES-CBC-SHA</td><td>KRB5</td><td>DES</td><td>40, export</td><td>TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA</td></tr><tr><td>[0x27]</td><td>EXP-KRB5-RC2-CBC-SHA</td><td>KRB5</td><td>RC2</td><td>40, export</td><td>TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA</td></tr><tr><td>[0x28]</td><td>EXP-KRB5-RC4-SHA</td><td>KRB5</td><td>RC4</td><td>40, export</td><td>TLS_KRB5_EXPORT_WITH_RC4_40_SHA</td></tr><tr><td>[0x29]</td><td>EXP-KRB5-DES-CBC-MD5</td><td>KRB5</td><td>DES</td><td>40, export</td><td>TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5</td></tr><tr><td>[0x2a]</td><td>EXP-KRB5-RC2-CBC-MD5</td><td>KRB5</td><td>RC2</td><td>40, export</td><td>TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5</td></tr><tr><td>[0x2b]</td><td>EXP-KRB5-RC4-MD5</td><td>KRB5</td><td>RC4</td><td>40, export</td><td>TLS_KRB5_EXPORT_WITH_RC4_40_MD5</td></tr><tr><td>[0x2c]</td><td>PSK-NULL-SHA</td><td>PSK</td><td>Null</td><td>0</td><td>TLS_PSK_WITH_NULL_SHA</td></tr><tr><td>[0x2d]</td><td>DHE-PSK-NULL-SHA</td><td>DH/PSK</td><td>Null</td><td>0</td><td>TLS_DHE_PSK_WITH_NULL_SHA</td></tr><tr><td>[0x2e]</td><td>RSA-PSK-NULL-SHA</td><td>RSA/PSK</td><td>Null</td><td>0</td><td>TLS_RSA_PSK_WITH_NULL_SHA</td></tr><tr><td>[0x2f]</td><td>AES128-SHA</td><td>RSA</td><td>AES</td><td>128</td><td>TLS_RSA_WITH_AES_128_CBC_SHA</td></tr><tr><td>[0x30]</td><td>DH-DSS-AES128-SHA</td><td>DH/DSS</td><td>AES</td><td>128</td><td>TLS_DH_DSS_WITH_AES_128_CBC_SHA</td></tr><tr><td>[0x31]</td><td>DH-RSA-AES128-SHA</td><td>DH/RSA</td><td>AES</td><td>128</td><td>TLS_DH_RSA_WITH_AES_128_CBC_SHA</td></tr><tr><td>[0x32]</td><td>DHE-DSS-AES128-SHA</td><td>DH</td><td>AES</td><td>128</td><td>TLS_DHE_DSS_WITH_AES_128_CBC_SHA</td></tr><tr><td>[0x33]</td><td>DHE-RSA-AES128-SHA</td><td>DH</td><td>AES</td><td>128</td><td>TLS_DHE_RSA_WITH_AES_128_CBC_SHA</td></tr><tr><td>[0x34]</td><td>ADH-AES128-SHA</td><td>DH</td><td>AES</td><td>128</td><td>TLS_DH_anon_WITH_AES_128_CBC_SHA</td></tr><tr><td>[0x35]</td><td>AES256-SHA</td><td>RSA</td><td>AES</td><td>256</td><td>TLS_RSA_WITH_AES_256_CBC_SHA</td></tr><tr><td>[0x36]</td><td>DH-DSS-AES256-SHA</td><td>DH/DSS</td><td>AES</td><td>256</td><td>TLS_DH_DSS_WITH_AES_256_CBC_SHA</td></tr><tr><td>[0x37]</td><td>DH-RSA-AES256-SHA</td><td>DH/RSA</td><td>AES</td><td>256</td><td>TLS_DH_RSA_WITH_AES_256_CBC_SHA</td></tr><tr><td>[0x38]</td><td>DHE-DSS-AES256-SHA</td><td>DH</td><td>AES</td><td>256</td><td>TLS_DHE_DSS_WITH_AES_256_CBC_SHA</td></tr><tr><td>[0x39]</td><td>DHE-RSA-AES256-SHA</td><td>DH</td><td>AES</td><td>256</td><td>TLS_DHE_RSA_WITH_AES_256_CBC_SHA</td></tr><tr><td>[0x3a]</td><td>ADH-AES256-SHA</td><td>DH</td><td>AES</td><td>256</td><td>TLS_DH_anon_WITH_AES_256_CBC_SHA</td></tr><tr><td>[0x3b]</td><td>NULL-SHA256</td><td>RSA</td><td>Null</td><td>0</td><td>TLS_RSA_WITH_NULL_SHA256</td></tr><tr><td>[0x3c]</td><td>AES128-SHA256</td><td>RSA</td><td>AES</td><td>128</td><td>TLS_RSA_WITH_AES_128_CBC_SHA256</td></tr><tr><td>[0x3d]</td><td>AES256-SHA256</td><td>RSA</td><td>AES</td><td>256</td><td>TLS_RSA_WITH_AES_256_CBC_SHA256</td></tr><tr><td>[0x3e]</td><td>DH-DSS-AES128-SHA256</td><td>DH/DSS</td><td>AES</td><td>128</td><td>TLS_DH_DSS_WITH_AES_128_CBC_SHA256</td></tr><tr><td>[0x3f]</td><td>DH-RSA-AES128-SHA256</td><td>DH/RSA</td><td>AES</td><td>128</td><td>TLS_DH_RSA_WITH_AES_128_CBC_SHA256</td></tr><tr><td>[0x40]</td><td>DHE-DSS-AES128-SHA256</td><td>DH</td><td>AES</td><td>128</td><td>TLS_DHE_DSS_WITH_AES_128_CBC_SHA256</td></tr><tr><td>[0x41]</td><td>CAMELLIA128-SHA</td><td>RSA</td><td>Camellia</td><td>128</td><td>TLS_RSA_WITH_CAMELLIA_128_CBC_SHA</td></tr><tr><td>[0x42]</td><td>DH-DSS-CAMELLIA128-SHA</td><td>DH/DSS</td><td>Camellia</td><td>128</td><td>TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA</td></tr><tr><td>[0x43]</td><td>DH-RSA-CAMELLIA128-SHA</td><td>DH/RSA</td><td>Camellia</td><td>128</td><td>TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA</td></tr><tr><td>[0x44]</td><td>DHE-DSS-CAMELLIA128-SHA</td><td>DH</td><td>Camellia</td><td>128</td><td>TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA</td></tr><tr><td>[0x45]</td><td>DHE-RSA-CAMELLIA128-SHA</td><td>DH</td><td>Camellia</td><td>128</td><td>TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA</td></tr><tr><td>[0x46]</td><td>ADH-CAMELLIA128-SHA</td><td>DH</td><td>Camellia</td><td>128</td><td>TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA</td></tr><tr><td>[0x60]</td><td>EXP1024-RC4-MD5</td><td>RSA(1024)</td><td>RC4</td><td>56, export</td><td>TLS_RSA_EXPORT1024_WITH_RC4_56_MD5</td></tr><tr><td>[0x61]</td><td>EXP1024-RC2-CBC-MD5</td><td>RSA(1024)</td><td>RC2</td><td>56, export</td><td>TLS_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5</td></tr><tr><td>[0x62]</td><td>EXP1024-DES-CBC-SHA</td><td>RSA(1024)</td><td>DES</td><td>56, export</td><td>TLS_RSA_EXPORT1024_WITH_DES_CBC_SHA</td></tr><tr><td>[0x63]</td><td>EXP1024-DHE-DSS-DES-CBC-SHA</td><td>DH(1024)</td><td>DES</td><td>56, export</td><td>TLS_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA</td></tr><tr><td>[0x64]</td><td>EXP1024-RC4-SHA</td><td>RSA(1024)</td><td>RC4</td><td>56, export</td><td>TLS_RSA_EXPORT1024_WITH_RC4_56_SHA</td></tr><tr><td>[0x65]</td><td>EXP1024-DHE-DSS-RC4-SHA</td><td>DH(1024)</td><td>RC4</td><td>56, export</td><td>TLS_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA</td></tr><tr><td>[0x66]</td><td>DHE-DSS-RC4-SHA</td><td>DH</td><td>RC4</td><td>128</td><td>TLS_DHE_DSS_WITH_RC4_128_SHA</td></tr><tr><td>[0x67]</td><td>DHE-RSA-AES128-SHA256</td><td>DH</td><td>AES</td><td>128</td><td>TLS_DHE_RSA_WITH_AES_128_CBC_SHA256</td></tr><tr><td>[0x68]</td><td>DH-DSS-AES256-SHA256</td><td>DH/DSS</td><td>AES</td><td>256</td><td>TLS_DH_DSS_WITH_AES_256_CBC_SHA256</td></tr><tr><td>[0x69]</td><td>DH-RSA-AES256-SHA256</td><td>DH/RSA</td><td>AES</td><td>256</td><td>TLS_DH_RSA_WITH_AES_256_CBC_SHA256</td></tr><tr><td>[0x6a]</td><td>DHE-DSS-AES256-SHA256</td><td>DH</td><td>AES</td><td>256</td><td>TLS_DHE_DSS_WITH_AES_256_CBC_SHA256</td></tr><tr><td>[0x6b]</td><td>DHE-RSA-AES256-SHA256</td><td>DH</td><td>AES</td><td>256</td><td>TLS_DHE_RSA_WITH_AES_256_CBC_SHA256</td></tr><tr><td>[0x6c]</td><td>ADH-AES128-SHA256</td><td>DH</td><td>AES</td><td>128</td><td>TLS_DH_anon_WITH_AES_128_CBC_SHA256</td></tr><tr><td>[0x6d]</td><td>ADH-AES256-SHA256</td><td>DH</td><td>AES</td><td>256</td><td>TLS_DH_anon_WITH_AES_256_CBC_SHA256</td></tr><tr><td>[0x80]</td><td>GOST94-GOST89-GOST89</td><td>VKO GOST 34.10-94</td><td>GOST89</td><td>256</td><td>TLS_GOSTR341094_WITH_28147_CNT_IMIT</td></tr><tr><td>[0x81]</td><td>GOST2001-GOST89-GOST89</td><td>VKO GOST 34.10-2001</td><td>GOST89</td><td>256</td><td>TLS_GOSTR341001_WITH_28147_CNT_IMIT</td></tr><tr><td>[0x82]</td><td>GOST94-NULL-GOST94</td><td>VKO GOST 34.10-94</td><td>Null</td><td>0</td><td>TLS_GOSTR341001_WITH_NULL_GOSTR3411</td></tr><tr><td>[0x83]</td><td>GOST2001-GOST89-GOST89</td><td>VKO GOST 34.10-2001</td><td>Null</td><td>0</td><td>TLS_GOSTR341094_WITH_NULL_GOSTR3411</td></tr><tr><td>[0x84]</td><td>CAMELLIA256-SHA</td><td>RSA</td><td>Camellia</td><td>256</td><td>TLS_RSA_WITH_CAMELLIA_256_CBC_SHA</td></tr><tr><td>[0x85]</td><td>DH-DSS-CAMELLIA256-SHA</td><td>DH/DSS</td><td>Camellia</td><td>256</td><td>TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA</td></tr><tr><td>[0x86]</td><td>DH-RSA-CAMELLIA256-SHA</td><td>DH/RSA</td><td>Camellia</td><td>256</td><td>TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA</td></tr><tr><td>[0x87]</td><td>DHE-DSS-CAMELLIA256-SHA</td><td>DH</td><td>Camellia</td><td>256</td><td>TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA</td></tr><tr><td>[0x88]</td><td>DHE-RSA-CAMELLIA256-SHA</td><td>DH</td><td>Camellia</td><td>256</td><td>TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA</td></tr><tr><td>[0x89]</td><td>ADH-CAMELLIA256-SHA</td><td>DH</td><td>Camellia</td><td>256</td><td>TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA</td></tr><tr><td>[0x8a]</td><td>PSK-RC4-SHA</td><td>PSK</td><td>RC4</td><td>128</td><td>TLS_PSK_WITH_RC4_128_SHA</td></tr><tr><td>[0x8b]</td><td>PSK-3DES-EDE-CBC-SHA</td><td>PSK</td><td>3DES</td><td>168</td><td>TLS_PSK_WITH_3DES_EDE_CBC_SHA</td></tr><tr><td>[0x8c]</td><td>PSK-AES128-CBC-SHA</td><td>PSK</td><td>AES</td><td>128</td><td>TLS_PSK_WITH_AES_128_CBC_SHA</td></tr><tr><td>[0x8d]</td><td>PSK-AES256-CBC-SHA</td><td>PSK</td><td>AES</td><td>256</td><td>TLS_PSK_WITH_AES_256_CBC_SHA</td></tr><tr><td>[0x8e]</td><td></td><td>PSK/DHE</td><td>RC4</td><td>128</td><td>TLS_DHE_PSK_WITH_RC4_128_SHA</td></tr><tr><td>[0x8f]</td><td></td><td>PSK/DHE</td><td>3DES</td><td>168</td><td>TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA</td></tr><tr><td>[0x90]</td><td></td><td>PSK/DHE</td><td>AES</td><td>128</td><td>TLS_DHE_PSK_WITH_AES_128_CBC_SHA</td></tr><tr><td>[0x91]</td><td></td><td>PSK/DHE</td><td>AES</td><td>256</td><td>TLS_DHE_PSK_WITH_AES_256_CBC_SHA</td></tr><tr><td>[0x92]</td><td></td><td>PSK/RSA</td><td>RC4</td><td>128</td><td>TLS_RSA_PSK_WITH_RC4_128_SHA</td></tr><tr><td>[0x93]</td><td></td><td>PSK/RSA</td><td>3DES</td><td>168</td><td>TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA</td></tr><tr><td>[0x94]</td><td></td><td>PSK/RSA</td><td>AES</td><td>128</td><td>TLS_RSA_PSK_WITH_AES_128_CBC_SHA</td></tr><tr><td>[0x95]</td><td></td><td>PSK/RSA</td><td>AES</td><td>256</td><td>TLS_RSA_PSK_WITH_AES_256_CBC_SHA</td></tr><tr><td>[0x96]</td><td>SEED-SHA</td><td>RSA</td><td>SEED</td><td>128</td><td>TLS_RSA_WITH_SEED_CBC_SHA</td></tr><tr><td>[0x97]</td><td>DH-DSS-SEED-SHA</td><td>DH/DSS</td><td>SEED</td><td>128</td><td>TLS_DH_DSS_WITH_SEED_CBC_SHA</td></tr><tr><td>[0x98]</td><td>DH-RSA-SEED-SHA</td><td>DH/RSA</td><td>SEED</td><td>128</td><td>TLS_DH_RSA_WITH_SEED_CBC_SHA</td></tr><tr><td>[0x99]</td><td>DHE-DSS-SEED-SHA</td><td>DH</td><td>SEED</td><td>128</td><td>TLS_DHE_DSS_WITH_SEED_CBC_SHA</td></tr><tr><td>[0x9a]</td><td>DHE-RSA-SEED-SHA</td><td>DH</td><td>SEED</td><td>128</td><td>TLS_DHE_RSA_WITH_SEED_CBC_SHA</td></tr><tr><td>[0x9b]</td><td>ADH-SEED-SHA</td><td>DH</td><td>SEED</td><td>128</td><td>TLS_DH_anon_WITH_SEED_CBC_SHA</td></tr><tr><td>[0x9c]</td><td>AES128-GCM-SHA256</td><td>RSA</td><td>AESGCM</td><td>128</td><td>TLS_RSA_WITH_AES_128_GCM_SHA256</td></tr><tr><td>[0x9d]</td><td>AES256-GCM-SHA384</td><td>RSA</td><td>AESGCM</td><td>256</td><td>TLS_RSA_WITH_AES_256_GCM_SHA384</td></tr><tr><td>[0x9e]</td><td>DHE-RSA-AES128-GCM-SHA256</td><td>DH</td><td>AESGCM</td><td>128</td><td>TLS_DHE_RSA_WITH_AES_128_GCM_SHA256</td></tr><tr><td>[0x9f]</td><td>DHE-RSA-AES256-GCM-SHA384</td><td>DH</td><td>AESGCM</td><td>256</td><td>TLS_DHE_RSA_WITH_AES_256_GCM_SHA384</td></tr><tr><td>[0xa0]</td><td>DH-RSA-AES128-GCM-SHA256</td><td>DH/RSA</td><td>AESGCM</td><td>128</td><td>TLS_DH_RSA_WITH_AES_128_GCM_SHA256</td></tr><tr><td>[0xa1]</td><td>DH-RSA-AES256-GCM-SHA384</td><td>DH/RSA</td><td>AESGCM</td><td>256</td><td>TLS_DH_RSA_WITH_AES_256_GCM_SHA384</td></tr><tr><td>[0xa2]</td><td>DHE-DSS-AES128-GCM-SHA256</td><td>DH</td><td>AESGCM</td><td>128</td><td>TLS_DHE_DSS_WITH_AES_128_GCM_SHA256</td></tr><tr><td>[0xa3]</td><td>DHE-DSS-AES256-GCM-SHA384</td><td>DH</td><td>AESGCM</td><td>256</td><td>TLS_DHE_DSS_WITH_AES_256_GCM_SHA384</td></tr><tr><td>[0xa4]</td><td>DH-DSS-AES128-GCM-SHA256</td><td>DH/DSS</td><td>AESGCM</td><td>128</td><td>TLS_DH_DSS_WITH_AES_128_GCM_SHA256</td></tr><tr><td>[0xa5]</td><td>DH-DSS-AES256-GCM-SHA384</td><td>DH/DSS</td><td>AESGCM</td><td>256</td><td>TLS_DH_DSS_WITH_AES_256_GCM_SHA384</td></tr><tr><td>[0xa6]</td><td>ADH-AES128-GCM-SHA256</td><td>DH</td><td>AESGCM</td><td>128</td><td>TLS_DH_anon_WITH_AES_128_GCM_SHA256</td></tr><tr><td>[0xa7]</td><td>ADH-AES256-GCM-SHA384</td><td>DH</td><td>AESGCM</td><td>256</td><td>TLS_DH_anon_WITH_AES_256_GCM_SHA384</td></tr><tr><td>[0xba]</td><td>CAMELLIA128-SHA256</td><td>RSA</td><td>Camellia</td><td>128</td><td>TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256</td></tr><tr><td>[0xbb]</td><td>DH-DSS-CAMELLIA128-SHA256</td><td>DH/DSS</td><td>Camellia</td><td>128</td><td>TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256</td></tr><tr><td>[0xbc]</td><td>DH-RSA-CAMELLIA128-SHA256</td><td>DH/RSA</td><td>Camellia</td><td>128</td><td>TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256</td></tr><tr><td>[0xbd]</td><td>DHE-DSS-CAMELLIA128-SHA256</td><td>DH</td><td>Camellia</td><td>128</td><td>TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256</td></tr><tr><td>[0xbe]</td><td>DHE-RSA-CAMELLIA128-SHA256</td><td>DH</td><td>Camellia</td><td>128</td><td>TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256</td></tr><tr><td>[0xbf]</td><td>ADH-CAMELLIA128-SHA256</td><td>DH</td><td>Camellia</td><td>128</td><td>TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256</td></tr><tr><td>[0x5600]</td><td>TLS_FALLBACK_SCSV</td><td></td><td></td><td></td><td>TLS_EMPTY_RENEGOTIATION_INFO_SCSV</td></tr><tr><td>[0x1301]</td><td>TLS_AES_128_GCM_SHA256</td><td>ECDH</td><td>AESGCM</td><td>128</td><td>TLS_AES_128_GCM_SHA256</td></tr><tr><td>[0x1302]</td><td>TLS_AES_256_GCM_SHA384</td><td>ECDH</td><td>AESGCM</td><td>256</td><td>TLS_AES_256_GCM_SHA384</td></tr><tr><td>[0x1303]</td><td>TLS_CHACHA20_POLY1305_SHA256</td><td>ECDH</td><td>ChaCha20-Poly1305</td><td>256</td><td>TLS_CHACHA20_POLY1305_SHA256</td></tr><tr><td>[0x1304]</td><td>TLS_AES_128_CCM_SHA256</td><td>ECDH</td><td>AESCCM</td><td>128</td><td>TLS_AES_128_CCM_SHA256</td></tr><tr><td>[0x1305]</td><td>TLS_AES_128_CCM_8_SHA256</td><td>ECDH</td><td>AESCCM8</td><td>128</td><td>TLS_AES_128_CCM_8_SHA256</td></tr><tr><td>[0xc001]</td><td>ECDH-ECDSA-NULL-SHA</td><td>ECDH/ECDSA</td><td>Null</td><td>0</td><td>TLS_ECDH_ECDSA_WITH_NULL_SHA</td></tr><tr><td>[0xc002]</td><td>ECDH-ECDSA-RC4-SHA</td><td>ECDH/ECDSA</td><td>RC4</td><td>128</td><td>TLS_ECDH_ECDSA_WITH_RC4_128_SHA</td></tr><tr><td>[0xc003]</td><td>ECDH-ECDSA-DES-CBC3-SHA</td><td>ECDH/ECDSA</td><td>3DES</td><td>168</td><td>TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA</td></tr><tr><td>[0xc004]</td><td>ECDH-ECDSA-AES128-SHA</td><td>ECDH/ECDSA</td><td>AES</td><td>128</td><td>TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA</td></tr><tr><td>[0xc005]</td><td>ECDH-ECDSA-AES256-SHA</td><td>ECDH/ECDSA</td><td>AES</td><td>256</td><td>TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA</td></tr><tr><td>[0xc006]</td><td>ECDHE-ECDSA-NULL-SHA</td><td>ECDH</td><td>Null</td><td>0</td><td>TLS_ECDHE_ECDSA_WITH_NULL_SHA</td></tr><tr><td>[0xc007]</td><td>ECDHE-ECDSA-RC4-SHA</td><td>ECDH</td><td>RC4</td><td>128</td><td>TLS_ECDHE_ECDSA_WITH_RC4_128_SHA</td></tr><tr><td>[0xc008]</td><td>ECDHE-ECDSA-DES-CBC3-SHA</td><td>ECDH</td><td>3DES</td><td>168</td><td>TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA</td></tr><tr><td>[0xc009]</td><td>ECDHE-ECDSA-AES128-SHA</td><td>ECDH</td><td>AES</td><td>128</td><td>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA</td></tr><tr><td>[0xc00a]</td><td>ECDHE-ECDSA-AES256-SHA</td><td>ECDH</td><td>AES</td><td>256</td><td>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA</td></tr><tr><td>[0xc00b]</td><td>ECDH-RSA-NULL-SHA</td><td>ECDH/RSA</td><td>Null</td><td>0</td><td>TLS_ECDH_RSA_WITH_NULL_SHA</td></tr><tr><td>[0xc00c]</td><td>ECDH-RSA-RC4-SHA</td><td>ECDH/RSA</td><td>RC4</td><td>128</td><td>TLS_ECDH_RSA_WITH_RC4_128_SHA</td></tr><tr><td>[0xc00d]</td><td>ECDH-RSA-DES-CBC3-SHA</td><td>ECDH/RSA</td><td>3DES</td><td>168</td><td>TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA</td></tr><tr><td>[0xc00e]</td><td>ECDH-RSA-AES128-SHA</td><td>ECDH/RSA</td><td>AES</td><td>128</td><td>TLS_ECDH_RSA_WITH_AES_128_CBC_SHA</td></tr><tr><td>[0xc00f]</td><td>ECDH-RSA-AES256-SHA</td><td>ECDH/RSA</td><td>AES</td><td>256</td><td>TLS_ECDH_RSA_WITH_AES_256_CBC_SHA</td></tr><tr><td>[0xc010]</td><td>ECDHE-RSA-NULL-SHA</td><td>ECDH</td><td>Null</td><td>0</td><td>TLS_ECDHE_RSA_WITH_NULL_SHA</td></tr><tr><td>[0xc011]</td><td>ECDHE-RSA-RC4-SHA</td><td>ECDH</td><td>RC4</td><td>128</td><td>TLS_ECDHE_RSA_WITH_RC4_128_SHA</td></tr><tr><td>[0xc012]</td><td>ECDHE-RSA-DES-CBC3-SHA</td><td>ECDH</td><td>3DES</td><td>168</td><td>TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA</td></tr><tr><td>[0xc013]</td><td>ECDHE-RSA-AES128-SHA</td><td>ECDH</td><td>AES</td><td>128</td><td>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA</td></tr><tr><td>[0xc014]</td><td>ECDHE-RSA-AES256-SHA</td><td>ECDH</td><td>AES</td><td>256</td><td>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA</td></tr><tr><td>[0xc015]</td><td>AECDH-NULL-SHA</td><td>ECDH</td><td>Null</td><td>0</td><td>TLS_ECDH_anon_WITH_NULL_SHA</td></tr><tr><td>[0xc016]</td><td>AECDH-RC4-SHA</td><td>ECDH</td><td>RC4</td><td>128</td><td>TLS_ECDH_anon_WITH_RC4_128_SHA</td></tr><tr><td>[0xc017]</td><td>AECDH-DES-CBC3-SHA</td><td>ECDH</td><td>3DES</td><td>168</td><td>TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA</td></tr><tr><td>[0xc018]</td><td>AECDH-AES128-SHA</td><td>ECDH</td><td>AES</td><td>128</td><td>TLS_ECDH_anon_WITH_AES_128_CBC_SHA</td></tr><tr><td>[0xc019]</td><td>AECDH-AES256-SHA</td><td>ECDH</td><td>AES</td><td>256</td><td>TLS_ECDH_anon_WITH_AES_256_CBC_SHA</td></tr><tr><td>[0xc01a]</td><td>SRP-3DES-EDE-CBC-SHA</td><td>SRP</td><td>3DES</td><td>168</td><td>TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA</td></tr><tr><td>[0xc01b]</td><td>SRP-RSA-3DES-EDE-CBC-SHA</td><td>SRP</td><td>3DES</td><td>168</td><td>TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA</td></tr><tr><td>[0xc01c]</td><td>SRP-DSS-3DES-EDE-CBC-SHA</td><td>SRP</td><td>3DES</td><td>168</td><td>TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA</td></tr><tr><td>[0xc01d]</td><td>SRP-AES-128-CBC-SHA</td><td>SRP</td><td>AES</td><td>128</td><td>TLS_SRP_SHA_WITH_AES_128_CBC_SHA</td></tr><tr><td>[0xc01e]</td><td>SRP-RSA-AES-128-CBC-SHA</td><td>SRP</td><td>AES</td><td>128</td><td>TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA</td></tr><tr><td>[0xc01f]</td><td>SRP-DSS-AES-128-CBC-SHA</td><td>SRP</td><td>AES</td><td>128</td><td>TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA</td></tr><tr><td>[0xc020]</td><td>SRP-AES-256-CBC-SHA</td><td>SRP</td><td>AES</td><td>256</td><td>TLS_SRP_SHA_WITH_AES_256_CBC_SHA</td></tr><tr><td>[0xc021]</td><td>SRP-RSA-AES-256-CBC-SHA</td><td>SRP</td><td>AES</td><td>256</td><td>TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA</td></tr><tr><td>[0xc022]</td><td>SRP-DSS-AES-256-CBC-SHA</td><td>SRP</td><td>AES</td><td>256</td><td>TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA</td></tr><tr><td>[0xc023]</td><td>ECDHE-ECDSA-AES128-SHA256</td><td>ECDH</td><td>AES</td><td>128</td><td>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256</td></tr><tr><td>[0xc024]</td><td>ECDHE-ECDSA-AES256-SHA384</td><td>ECDH</td><td>AES</td><td>256</td><td>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384</td></tr><tr><td>[0xc025]</td><td>ECDH-ECDSA-AES128-SHA256</td><td>ECDH/ECDSA</td><td>AES</td><td>128</td><td>TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256</td></tr><tr><td>[0xc026]</td><td>ECDH-ECDSA-AES256-SHA384</td><td>ECDH/ECDSA</td><td>AES</td><td>256</td><td>TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384</td></tr><tr><td>[0xc027]</td><td>ECDHE-RSA-AES128-SHA256</td><td>ECDH</td><td>AES</td><td>128</td><td>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256</td></tr><tr><td>[0xc028]</td><td>ECDHE-RSA-AES256-SHA384</td><td>ECDH</td><td>AES</td><td>256</td><td>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384</td></tr><tr><td>[0xc029]</td><td>ECDH-RSA-AES128-SHA256</td><td>ECDH/RSA</td><td>AES</td><td>128</td><td>TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256</td></tr><tr><td>[0xc02a]</td><td>ECDH-RSA-AES256-SHA384</td><td>ECDH/RSA</td><td>AES</td><td>256</td><td>TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384</td></tr><tr><td>[0xc02b]</td><td>ECDHE-ECDSA-AES128-GCM-SHA256</td><td>ECDH</td><td>AESGCM</td><td>128</td><td>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</td></tr><tr><td>[0xc02c]</td><td>ECDHE-ECDSA-AES256-GCM-SHA384</td><td>ECDH</td><td>AESGCM</td><td>256</td><td>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</td></tr><tr><td>[0xc02d]</td><td>ECDH-ECDSA-AES128-GCM-SHA256</td><td>ECDH/ECDSA</td><td>AESGCM</td><td>128</td><td>TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256</td></tr><tr><td>[0xc02e]</td><td>ECDH-ECDSA-AES256-GCM-SHA384</td><td>ECDH/ECDSA</td><td>AESGCM</td><td>256</td><td>TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384</td></tr><tr><td>[0xc02f]</td><td>ECDHE-RSA-AES128-GCM-SHA256</td><td>ECDH</td><td>AESGCM</td><td>128</td><td>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</td></tr><tr><td>[0xc030]</td><td>ECDHE-RSA-AES256-GCM-SHA384</td><td>ECDH</td><td>AESGCM</td><td>256</td><td>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</td></tr><tr><td>[0xc031]</td><td>ECDH-RSA-AES128-GCM-SHA256</td><td>ECDH/RSA</td><td>AESGCM</td><td>128</td><td>TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256</td></tr><tr><td>[0xc032]</td><td>ECDH-RSA-AES256-GCM-SHA384</td><td>ECDH/RSA</td><td>AESGCM</td><td>256</td><td>TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384</td></tr><tr><td>[0xc033]</td><td>ECDHE-PSK-RC4-SHA</td><td>PSK/ECDHE</td><td>RC4</td><td>128</td><td>TLS_ECDHE_PSK_WITH_RC4_128_SHA</td></tr><tr><td>[0xc034]</td><td>ECDHE-PSK-3DES-EDE-CBC-SHA</td><td>PSK/ECDHE</td><td>3DES</td><td>168</td><td>TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA</td></tr><tr><td>[0xc035]</td><td>ECDHE-PSK-AES128-CBC-SHA</td><td>PSK/ECDHE</td><td>AES</td><td>128</td><td>TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA</td></tr><tr><td>[0xc036]</td><td>ECDHE-PSK-AES256-CBC-SHA</td><td>PSK/ECDHE</td><td>AES</td><td>256</td><td>TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA</td></tr><tr><td>[0xc037]</td><td>ECDHE-PSK-AES128-CBC-SHA256</td><td>PSK/ECDHE</td><td>AES</td><td>128</td><td>TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256</td></tr><tr><td>[0xc038]</td><td>ECDHE-PSK-AES256-CBC-SHA384</td><td>PSK/ECDHE</td><td>AES</td><td>256</td><td>TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384</td></tr><tr><td>[0xc039]</td><td>ECDHE-PSK-NULL-SHA</td><td>PSK/ECDHE</td><td>Null</td><td>0</td><td>TLS_ECDHE_PSK_WITH_NULL_SHA</td></tr><tr><td>[0xc03A]</td><td>ECDHE-PSK-NULL-SHA256</td><td>PSK/ECDHE</td><td>Null</td><td>0</td><td>TLS_ECDHE_PSK_WITH_NULL_SHA256</td></tr><tr><td>[0xc03B]</td><td>ECDHE-PSK-NULL-SHA384</td><td>PSK/ECDHE</td><td>Null</td><td>0</td><td>TLS_ECDHE_PSK_WITH_NULL_SHA384</td></tr><tr><td>[0xc03C]</td><td></td><td></td><td></td><td></td><td>TLS_RSA_WITH_ARIA_128_CBC_SHA256</td></tr><tr><td>[0xc03D]</td><td></td><td></td><td></td><td></td><td>TLS_RSA_WITH_ARIA_256_CBC_SHA384</td></tr><tr><td>[0xc03E]</td><td></td><td></td><td></td><td></td><td>TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256</td></tr><tr><td>[0xc03F]</td><td></td><td></td><td></td><td></td><td>TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384</td></tr><tr><td>[0xc040]</td><td></td><td></td><td></td><td></td><td>TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256</td></tr><tr><td>[0xc041]</td><td></td><td></td><td></td><td></td><td>TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384</td></tr><tr><td>[0xc042]</td><td></td><td></td><td></td><td></td><td>TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256</td></tr><tr><td>[0xc043]</td><td></td><td></td><td></td><td></td><td>TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384</td></tr><tr><td>[0xc044]</td><td></td><td></td><td></td><td></td><td>TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256</td></tr><tr><td>[0xc045]</td><td></td><td></td><td></td><td></td><td>TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384</td></tr><tr><td>[0xc046]</td><td></td><td></td><td></td><td></td><td>TLS_DH_anon_WITH_ARIA_128_CBC_SHA256</td></tr><tr><td>[0xc047]</td><td></td><td></td><td></td><td></td><td>TLS_DH_anon_WITH_ARIA_256_CBC_SHA384</td></tr><tr><td>[0xc048]</td><td></td><td></td><td></td><td></td><td>TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256</td></tr><tr><td>[0xc049]</td><td></td><td></td><td></td><td></td><td>TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384</td></tr><tr><td>[0xc04A]</td><td></td><td></td><td></td><td></td><td>TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256</td></tr><tr><td>[0xc04B]</td><td></td><td></td><td></td><td></td><td>TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384</td></tr><tr><td>[0xc04C]</td><td></td><td></td><td></td><td></td><td>TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256</td></tr><tr><td>[0xc04D]</td><td></td><td></td><td></td><td></td><td>TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384</td></tr><tr><td>[0xc04E]</td><td></td><td></td><td></td><td></td><td>TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256</td></tr><tr><td>[0xc04F]</td><td></td><td></td><td></td><td></td><td>TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384</td></tr><tr><td>[0xc050]</td><td></td><td></td><td></td><td></td><td>TLS_RSA_WITH_ARIA_128_GCM_SHA256</td></tr><tr><td>[0xc051]</td><td></td><td></td><td></td><td></td><td>TLS_RSA_WITH_ARIA_256_GCM_SHA384</td></tr><tr><td>[0xc052]</td><td></td><td></td><td></td><td></td><td>TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256</td></tr><tr><td>[0xc053]</td><td></td><td></td><td></td><td></td><td>TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384</td></tr><tr><td>[0xc054]</td><td></td><td></td><td></td><td></td><td>TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256</td></tr><tr><td>[0xc055]</td><td></td><td></td><td></td><td></td><td>TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384</td></tr><tr><td>[0xc056]</td><td></td><td></td><td></td><td></td><td>TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256</td></tr><tr><td>[0xc057]</td><td></td><td></td><td></td><td></td><td>TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384</td></tr><tr><td>[0xc058]</td><td></td><td></td><td></td><td></td><td>TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256</td></tr><tr><td>[0xc059]</td><td></td><td></td><td></td><td></td><td>TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384</td></tr><tr><td>[0xc05A]</td><td></td><td></td><td></td><td></td><td>TLS_DH_anon_WITH_ARIA_128_GCM_SHA256</td></tr><tr><td>[0xc05B]</td><td></td><td></td><td></td><td></td><td>TLS_DH_anon_WITH_ARIA_256_GCM_SHA384</td></tr><tr><td>[0xc05C]</td><td></td><td></td><td></td><td></td><td>TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256</td></tr><tr><td>[0xc05D]</td><td></td><td></td><td></td><td></td><td>TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384</td></tr><tr><td>[0xc05E]</td><td></td><td></td><td></td><td></td><td>TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256</td></tr><tr><td>[0xc05F]</td><td></td><td></td><td></td><td></td><td>TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384</td></tr><tr><td>[0xc060]</td><td></td><td></td><td></td><td></td><td>TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256</td></tr><tr><td>[0xc061]</td><td></td><td></td><td></td><td></td><td>TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384</td></tr><tr><td>[0xc062]</td><td></td><td></td><td></td><td></td><td>TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256</td></tr><tr><td>[0xc063]</td><td></td><td></td><td></td><td></td><td>TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384</td></tr><tr><td>[0xc064]</td><td></td><td></td><td></td><td></td><td>TLS_PSK_WITH_ARIA_128_CBC_SHA256</td></tr><tr><td>[0xc065]</td><td></td><td></td><td></td><td></td><td>TLS_PSK_WITH_ARIA_256_CBC_SHA384</td></tr><tr><td>[0xc066]</td><td></td><td></td><td></td><td></td><td>TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256</td></tr><tr><td>[0xc067]</td><td></td><td></td><td></td><td></td><td>TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384</td></tr><tr><td>[0xc068]</td><td></td><td></td><td></td><td></td><td>TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256</td></tr><tr><td>[0xc069]</td><td></td><td></td><td></td><td></td><td>TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384</td></tr><tr><td>[0xc06A]</td><td></td><td></td><td></td><td></td><td>TLS_PSK_WITH_ARIA_128_GCM_SHA256</td></tr><tr><td>[0xc06B]</td><td></td><td></td><td></td><td></td><td>TLS_PSK_WITH_ARIA_256_GCM_SHA384</td></tr><tr><td>[0xc06C]</td><td></td><td></td><td></td><td></td><td>TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256</td></tr><tr><td>[0xc06D]</td><td></td><td></td><td></td><td></td><td>TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384</td></tr><tr><td>[0xc06E]</td><td></td><td></td><td></td><td></td><td>TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256</td></tr><tr><td>[0xc06F]</td><td></td><td></td><td></td><td></td><td>TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384</td></tr><tr><td>[0xc070]</td><td></td><td></td><td></td><td></td><td>TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256</td></tr><tr><td>[0xc071]</td><td></td><td></td><td></td><td></td><td>TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384</td></tr><tr><td>[0xc072]</td><td>ECDHE-ECDSA-CAMELLIA128-SHA256</td><td>ECDH</td><td>Camellia</td><td>128</td><td>TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256</td></tr><tr><td>[0xc073]</td><td>ECDHE-ECDSA-CAMELLIA256-SHA38</td><td>ECDH</td><td>Camellia</td><td>256</td><td>TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384</td></tr><tr><td>[0xc074]</td><td>ECDH-ECDSA-CAMELLIA128-SHA256</td><td>ECDH/ECDSA</td><td>Camellia</td><td>128</td><td>TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256</td></tr><tr><td>[0xc075]</td><td>ECDH-ECDSA-CAMELLIA256-SHA384</td><td>ECDH/ECDSA</td><td>Camellia</td><td>256</td><td>TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384</td></tr><tr><td>[0xc076]</td><td>ECDHE-RSA-CAMELLIA128-SHA256</td><td>ECDH</td><td>Camellia</td><td>128</td><td>TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256</td></tr><tr><td>[0xc077]</td><td>ECDHE-RSA-CAMELLIA256-SHA384</td><td>ECDH</td><td>Camellia</td><td>256</td><td>TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384</td></tr><tr><td>[0xc078]</td><td>ECDH-RSA-CAMELLIA128-SHA256</td><td>ECDH/RSA</td><td>Camellia</td><td>128</td><td>TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256</td></tr><tr><td>[0xc079]</td><td>ECDH-RSA-CAMELLIA256-SHA384</td><td>ECDH/RSA</td><td>Camellia</td><td>256</td><td>TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384</td></tr><tr><td>[0xc07A]</td><td></td><td></td><td></td><td></td><td>TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256</td></tr><tr><td>[0xc07B]</td><td></td><td></td><td></td><td></td><td>TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384</td></tr><tr><td>[0xc07C]</td><td></td><td></td><td></td><td></td><td>TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256</td></tr><tr><td>[0xc07D]</td><td></td><td></td><td></td><td></td><td>TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384</td></tr><tr><td>[0xc07E]</td><td></td><td></td><td></td><td></td><td>TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256</td></tr><tr><td>[0xc07F]</td><td></td><td></td><td></td><td></td><td>TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384</td></tr><tr><td>[0xc080]</td><td></td><td></td><td></td><td></td><td>TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256</td></tr><tr><td>[0xc081]</td><td></td><td></td><td></td><td></td><td>TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384</td></tr><tr><td>[0xc082]</td><td></td><td></td><td></td><td></td><td>TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256</td></tr><tr><td>[0xc083]</td><td></td><td></td><td></td><td></td><td>TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384</td></tr><tr><td>[0xc084]</td><td></td><td></td><td></td><td></td><td>TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256</td></tr><tr><td>[0xc085]</td><td></td><td></td><td></td><td></td><td>TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384</td></tr><tr><td>[0xc086]</td><td></td><td></td><td></td><td></td><td>TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256</td></tr><tr><td>[0xc087]</td><td></td><td></td><td></td><td></td><td>TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384</td></tr><tr><td>[0xc088]</td><td></td><td></td><td></td><td></td><td>TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256</td></tr><tr><td>[0xc089]</td><td></td><td></td><td></td><td></td><td>TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384</td></tr><tr><td>[0xc08A]</td><td></td><td></td><td></td><td></td><td>TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256</td></tr><tr><td>[0xc08B]</td><td></td><td></td><td></td><td></td><td>TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384</td></tr><tr><td>[0xc08C]</td><td></td><td></td><td></td><td></td><td>TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256</td></tr><tr><td>[0xc08D]</td><td></td><td></td><td></td><td></td><td>TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384</td></tr><tr><td>[0xc08E]</td><td></td><td></td><td></td><td></td><td>TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256</td></tr><tr><td>[0xc08F]</td><td></td><td></td><td></td><td></td><td>TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384</td></tr><tr><td>[0xc090]</td><td></td><td></td><td></td><td></td><td>TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256</td></tr><tr><td>[0xc091]</td><td></td><td></td><td></td><td></td><td>TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384</td></tr><tr><td>[0xc092]</td><td></td><td></td><td></td><td></td><td>TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256</td></tr><tr><td>[0xc093]</td><td></td><td></td><td></td><td></td><td>TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384</td></tr><tr><td>[0xc094]</td><td>PSK-CAMELLIA128-SHA256</td><td>PSK</td><td>CAMELLIA</td><td>128</td><td>TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256</td></tr><tr><td>[0xc095]</td><td>PSK-CAMELLIA256-SHA384</td><td>PSK</td><td>CAMELLIA</td><td>256</td><td>TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384</td></tr><tr><td>[0xc096]</td><td>DHE-PSK-CAMELLIA128-SHA256</td><td>PSK/DHE</td><td>CAMELLIA</td><td>128</td><td>TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256</td></tr><tr><td>[0xc097]</td><td>DHE-PSK-CAMELLIA256-SHA384</td><td>PSK/DHE</td><td>CAMELLIA</td><td>256</td><td>TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384</td></tr><tr><td>[0xc098]</td><td>RSA-PSK-CAMELLIA128-SHA256</td><td>PSK/RSA</td><td>CAMELLIA</td><td>128</td><td>TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256</td></tr><tr><td>[0xc099]</td><td>RSA-PSK-CAMELLIA256-SHA384</td><td>PSK/RSA</td><td>CAMELLIA</td><td>256</td><td>TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384</td></tr><tr><td>[0xc09A]</td><td>ECDHE-PSK-CAMELLIA128-SHA25</td><td>PSK/ECDHE</td><td>CAMELLIA</td><td>128</td><td>TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256</td></tr><tr><td>[0xc09B]</td><td>ECDHE-PSK-CAMELLIA256-SHA38</td><td>PSK/ECDHE</td><td>CAMELLIA</td><td>256</td><td>TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384</td></tr><tr><td>[0xc09c]</td><td>AES128-CCM</td><td>RSA</td><td>AESCCM</td><td>128</td><td>TLS_RSA_WITH_AES_128_CCM</td></tr><tr><td>[0xc09d]</td><td>AES256-CCM</td><td>RSA</td><td>AESCCM</td><td>256</td><td>TLS_RSA_WITH_AES_256_CCM</td></tr><tr><td>[0xc09e]</td><td>DHE-RSA-AES128-CCM</td><td>DH</td><td>AESCCM</td><td>128</td><td>TLS_DHE_RSA_WITH_AES_128_CCM</td></tr><tr><td>[0xc09f]</td><td>DHE-RSA-AES256-CCM</td><td>DH</td><td>AESCCM</td><td>256</td><td>TLS_DHE_RSA_WITH_AES_256_CCM</td></tr><tr><td>[0xc0a0]</td><td>AES128-CCM8</td><td>RSA</td><td>AESCCM8</td><td>128</td><td>TLS_RSA_WITH_AES_128_CCM_8</td></tr><tr><td>[0xc0a1]</td><td>AES256-CCM8</td><td>RSA</td><td>AESCCM8</td><td>256</td><td>TLS_RSA_WITH_AES_256_CCM_8</td></tr><tr><td>[0xc0a2]</td><td>DHE-RSA-AES128-CCM8</td><td>DH</td><td>AESCCM8</td><td>128</td><td>TLS_DHE_RSA_WITH_AES_128_CCM_8</td></tr><tr><td>[0xc0a3]</td><td>DHE-RSA-AES256-CCM8</td><td>DH</td><td>AESCCM8</td><td>256</td><td>TLS_DHE_RSA_WITH_AES_256_CCM_8</td></tr><tr><td>[0xc0a4]</td><td>PSK-AES128-CCM</td><td>PSK</td><td>AESCCM</td><td>128</td><td>TLS_PSK_WITH_AES_128_CCM</td></tr><tr><td>[0xc0a5]</td><td>PSK-AES256-CCM</td><td>PSK</td><td>AESCCM</td><td>256</td><td>TLS_PSK_WITH_AES_256_CCM</td></tr><tr><td>[0xc0a6]</td><td>DHE-PSK-AES128-CCM</td><td>PSK/DHE</td><td>AESCCM</td><td>128</td><td>TLS_DHE_PSK_WITH_AES_128_CCM</td></tr><tr><td>[0xc0a7]</td><td>DHE-PSK-AES256-CCM</td><td>PSK/DHE</td><td>AESCCM</td><td>256</td><td>TLS_DHE_PSK_WITH_AES_256_CCM</td></tr><tr><td>[0xc0a8]</td><td>PSK-AES128-CCM8</td><td>PSK</td><td>AESCCM</td><td>128</td><td>TLS_PSK_WITH_AES_128_CCM_8</td></tr><tr><td>[0xc0a9]</td><td>PSK-AES256-CCM8</td><td>PSK</td><td>AESCCM</td><td>256</td><td>TLS_PSK_WITH_AES_256_CCM_8</td></tr><tr><td>[0xc0aa]</td><td>DHE-PSK-AES128-CCM8</td><td>PSK/DHE</td><td>AESCCM</td><td>128</td><td>TLS_PSK_DHE_WITH_AES_128_CCM_8</td></tr><tr><td>[0xc0ab]</td><td>DHE-PSK-AES256-CCM8</td><td>PSK/DHE</td><td>AESCCM</td><td>256</td><td>TLS_PSK_DHE_WITH_AES_256_CCM_8</td></tr><tr><td>[0xc0ac]</td><td>ECDHE-ECDSA-AES128-CCM</td><td>ECDH</td><td>AESCCM</td><td>128</td><td>TLS_ECDHE_ECDSA_WITH_AES_128_CCM</td></tr><tr><td>[0xc0ad]</td><td>ECDHE-ECDSA-AES256-CCM</td><td>ECDH</td><td>AESCCM</td><td>256</td><td>TLS_ECDHE_ECDSA_WITH_AES_256_CCM</td></tr><tr><td>[0xc0ae]</td><td>ECDHE-ECDSA-AES128-CCM8</td><td>ECDH</td><td>AESCCM</td><td>128</td><td>TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8</td></tr><tr><td>[0xc0af]</td><td>ECDHE-ECDSA-AES256-CCM8</td><td>ECDH</td><td>AESCCM</td><td>256</td><td>TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8</td></tr><tr><td>[0xcc13]</td><td>ECDHE-RSA-CHACHA20-POLY1305-OLD</td><td>ECDH</td><td>ChaCha20-Poly1305</td><td></td><td>TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256_OLD</td></tr><tr><td>[0xcc14]</td><td>ECDHE-ECDSA-CHACHA20-POLY1305-OLD</td><td>ECDH</td><td>ChaCha20-Poly1305</td><td></td><td>TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256_OLD</td></tr><tr><td>[0xcc15]</td><td>DHE-RSA-CHACHA20-POLY1305-OLD</td><td>DH</td><td>ChaCha20-Poly1305</td><td></td><td>TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256_OLD</td></tr><tr><td>[0xff00]</td><td>GOST-MD5</td><td>RSA</td><td>GOST89</td><td>256</td><td>TLS_GOSTR341094_RSA_WITH_28147_CNT_MD5</td></tr><tr><td>[0xff01]</td><td>GOST-GOST94</td><td>RSA</td><td>GOST89</td><td>256</td><td>TLS_RSA_WITH_28147_CNT_GOST94</td></tr><tr><td>[0xff02]</td><td>GOST-GOST89MAC</td><td>RSA</td><td>GOST89</td><td>256</td><td></td></tr><tr><td>[0xff03]</td><td>GOST-GOST89STREAM</td><td>RSA</td><td>GOST89</td><td>256</td><td></td></tr><tr><td>[0xfefe]</td><td></td><td>RSA</td><td>DES</td><td>56</td><td>SSL_RSA_FIPS_WITH_DES_CBC_SHA</td></tr><tr><td>[0xfeff]</td><td></td><td>RSA</td><td>3DES</td><td>168</td><td>SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA</td></tr><tr><td>[0xfee0]</td><td></td><td>RSA</td><td>3DES</td><td>168</td><td>SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA</td></tr><tr><td>[0xfee1]</td><td></td><td>RSA</td><td>DES</td><td>56</td><td>SSL_RSA_FIPS_WITH_DES_CBC_SHA</td></tr><tr><td>[0x010080]</td><td>RC4-MD5</td><td>RSA</td><td>RC4</td><td>128</td><td>SSL_CK_RC4_128_WITH_MD5</td></tr><tr><td>[0x020080]</td><td>EXP-RC4-MD5</td><td>RSA(512)</td><td>RC4</td><td>40, export</td><td>SSL_CK_RC4_128_EXPORT40_WITH_MD5</td></tr><tr><td>[0x030080]</td><td>RC2-CBC-MD5</td><td>RSA</td><td>RC2</td><td>128</td><td>SSL_CK_RC2_128_CBC_WITH_MD5</td></tr><tr><td>[0x040080]</td><td>EXP-RC2-CBC-MD5</td><td>RSA(512)</td><td>RC2</td><td>40, export</td><td>SSL_CK_RC2_128_CBC_EXPORT40_WITH_MD5</td></tr><tr><td>[0x050080]</td><td>IDEA-CBC-MD5</td><td>RSA</td><td>IDEA</td><td>128</td><td>SSL_CK_IDEA_128_CBC_WITH_MD5</td></tr><tr><td>[0x060040]</td><td>DES-CBC-MD5</td><td>RSA</td><td>DES</td><td>56</td><td>SSL_CK_DES_64_CBC_WITH_MD5</td></tr><tr><td>[0x060140]</td><td>DES-CBC-SHA</td><td>RSA</td><td>DES</td><td>56</td><td>SSL_CK_DES_64_CBC_WITH_SHA</td></tr><tr><td>[0x0700c0]</td><td>DES-CBC3-MD5</td><td>RSA</td><td>3DES</td><td>168</td><td>SSL_CK_DES_192_EDE3_CBC_WITH_MD5</td></tr><tr><td>[0x0701c0]</td><td>DES-CBC3-SHA</td><td>RSA</td><td>3DES</td><td>168</td><td>SSL_CK_DES_192_EDE3_CBC_WITH_SHA</td></tr><tr><td>[0x080080]</td><td>RC4-64-MD5</td><td>RSA</td><td>RC4</td><td>64</td><td>SSL_CK_RC4_64_WITH_MD5</td></tr><tr><td>[0xff0800]</td><td>DES-CFB-M1</td><td>RSA</td><td>DES</td><td>64</td><td>SSL_CK_DES_64_CFB64_WITH_MD5_1</td></tr><tr><td>[0xff0810]</td><td>NULL</td><td>None</td><td>Null</td><td>0</td><td>SSL_CK_NULL</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tls Cipher 算法和名字对应表  &lt;/p&gt;
&lt;p&gt;可以用opensll命令得到加密套件，如&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;openssl ciphers [-v] [-ssl2] [-ssl3] [-tls1] [cipherlist]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;选项说明：&quot;&gt;&lt;a href=&quot;#选项说明：&quot; class=&quot;headerlink&quot; title=&quot;选项说明：&quot;&gt;&lt;/a&gt;选项说明：&lt;/h4&gt;&lt;p&gt;-v：详细列出所有加密套件。包括ssl版本（SSLv2 、SSLv3以及 TLS）、密钥交换算法、身份验证算法、对称算法、摘要算法以及该算法是否可以出口。&lt;/p&gt;
&lt;p&gt;-ssl2：只列出SSLv2使用的加密套件。&lt;/p&gt;
&lt;p&gt;-ssl3：只列出SSLv3使用的加密套件。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="https://sukbeta.github.io/categories/linux/"/>
    
    
      <category term="openssl" scheme="https://sukbeta.github.io/tags/openssl/"/>
    
  </entry>
  
  <entry>
    <title>nginx通过x_forwarded_for实现黑白名单访问策略</title>
    <link href="https://sukbeta.github.io/nginx-deny-ip/"/>
    <id>https://sukbeta.github.io/nginx-deny-ip/</id>
    <published>2019-08-01T11:01:51.000Z</published>
    <updated>2019-08-01T11:04:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>nginx通过防护墙、F5设备过来之后，remote_addr 的地址是防护墙、F5的地址， 客户端真是的IP地址是在 x_forwarded_for中的， 这样这样 nginx 默认的 deny 和 allow 就不能用了。</p><p>我们需要在每个域名中判断一个 x_forwarded_for 钟是否有我们要拒绝的IP地址，如果有就返回403，不在往后代理。</p><p>我们定义一个map 拒绝的IP地址列表。</p><a id="more"></a><p>cat x_forwarded_for_deny.conf </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">map $http_x_forwarded_for $allowed &#123;</span><br><span class="line">    default allow;</span><br><span class="line">    #~\s*192.168.0.100$ deny;   # 拒绝一个IP地址</span><br><span class="line">    #~\s*192.168.0.\d+$ deny;    #  拒绝一个网段IP地址</span><br><span class="line">    include x_forwarded_for_deny_list/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>include x_forwarded_for_deny_list/*.conf<br>这个目录下禁止IP地址的文件<br>如：</p><p>cat x_forwarded_for_deny_list/2019-07-08.conf </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~\s*192.168.0.100$ deny;</span><br><span class="line">~\s*8.8.8.8$ deny;</span><br></pre></td></tr></table></figure><p>nginx 配置文件需要 include  x_forwarded_for_deny.conf </p><p>vim nginx.conf   添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.......</span><br><span class="line">include x_forwarded_for_deny.conf;</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p>每个域名的location中需要添加判断<br>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  ....;</span><br><span class="line">    location / &#123;</span><br><span class="line">        if ( $allowed = &quot;deny&quot; ) &#123; return 403; &#125;</span><br><span class="line">        proxy_pass    .....;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以拒绝你设置好的IP地址访问， nginx access日志用会有拒绝的IP得知日志，放回状态是403</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nginx通过防护墙、F5设备过来之后，remote_addr 的地址是防护墙、F5的地址， 客户端真是的IP地址是在 x_forwarded_for中的， 这样这样 nginx 默认的 deny 和 allow 就不能用了。&lt;/p&gt;
&lt;p&gt;我们需要在每个域名中判断一个 x_forwarded_for 钟是否有我们要拒绝的IP地址，如果有就返回403，不在往后代理。&lt;/p&gt;
&lt;p&gt;我们定义一个map 拒绝的IP地址列表。&lt;/p&gt;
    
    </summary>
    
      <category term="nginx" scheme="https://sukbeta.github.io/categories/nginx/"/>
    
    
      <category term="nginx" scheme="https://sukbeta.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>mesos master和slave的配置参数说明</title>
    <link href="https://sukbeta.github.io/mesos-configure-arg/"/>
    <id>https://sukbeta.github.io/mesos-configure-arg/</id>
    <published>2019-07-29T11:20:06.000Z</published>
    <updated>2023-12-26T01:48:30.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Master-和-Slave-的配置选项（转）"><a href="#Master-和-Slave-的配置选项（转）" class="headerlink" title="Master 和 Slave 的配置选项（转）"></a>Master 和 Slave 的配置选项（转）</h2><p>可以通过运行 mesos-master –help 或者 mesos-slave –help 可以查看相关的可用选项。每个选项可以通过以下两种方式设置</p><ul><li>执行命令的时候使用 –-option_name=value 来传递配置选项。value 既可以是数值，也可以指定包含参数的文件 (–opthon_name=file://文件路径)。 该路径既可以是绝对路径，也可以是相对当前工作目录的相对路径。</li><li>通过设定环境变量 MESOSOPTION_NAME (变量名都以 MESOS 开头)<br>执行时会先读取环境变量，然后才看命令行参数</li></ul><a id="more"></a><h2 id="下列选项-都被-master-和-slave-所支持："><a href="#下列选项-都被-master-和-slave-所支持：" class="headerlink" title="下列选项 都被 master 和 slave 所支持："></a>下列选项 都被 master 和 slave 所支持：</h2><table><thead><tr><th></th><th>Flag</th><th>说明</th></tr></thead><tbody><tr><td></td><td>–advertise_ip=VALUE</td><td>用来触达 mesos master/slave 的 IP 广播地址。 Mesos master/slave 不会与这个 IP 地址绑定。 但是，这个 IP 地址可以被用来访问 Mesos master/slave.</td><td></td></tr><tr><td></td><td>–advertise_port=VALUE</td><td>用来触达 mesos master/slave 的广播端口 (配合 advertise_ip). Mesos master/slave 不与这个端口绑定。 但是，这个端口 (配合 advertise_ip) 可以用于访问 Mesos master/slave.</td><td></td></tr><tr><td></td><td>–firewall_rules=VALUE</td><td>该值是终端防火墙的规则（rules），可以为JSON 类型的 rules 或包含 JSON 类型 rules 的文件。文件路径可以为 file:///path/to/file 或者 /path/to/file。<br>规则的格式请参考文件 flags.proto 中的 Firewall 信息。<br>例如:<br>{<br>  “disabled_endpoints” : {<br>    “paths” : [<br>      “/files/browse”,<br>      “/metrics/snapshot”<br>    ]<br>  }<br>}<br></td><td></td></tr><tr><td></td><td>–[no-]help</td><td>输出帮助信息 (默认值: false)</td><td></td></tr><tr><td></td><td>–ip=VALUE</td><td>监听的 IP 地址. 这个不能与–ip_discovery_command一起使用. (master默认5050，slave默认5051)</td><td></td></tr><tr><td></td><td>–ip_discovery_command=VALUE</td><td>IP 发现可选项: 如果设置 IP 地址，master/slave 将会尝试绑定这个 IP 地址。 不能与 –ip 一起使用.</td><td></td></tr><tr><td></td><td>–port=VALUE</td><td>监听端口</td><td></td></tr><tr><td></td><td>–[no-]version</td><td>显示版本并退出 (默认: false)</td><td></td></tr><tr><td></td><td>–hooks=VALUE</td><td>一个由逗号分隔的 hook 模块列表将被安装到 master/slave。</td><td></td></tr><tr><td></td><td>–hostname=VALUE</td><td>slave 节点报告或 master 节点在 ZooKeeper 里广播的 hostname. 如果不做设置，hostname 将解析为 master/slave 绑定的 IP 地址。 除非用户已经使用 –no-hostname_lookup 明确禁止了此功能, in which case the IP itself is used.</td><td></td></tr><tr><td></td><td>–[no-]hostname_lookup</td><td>当没有明确指定 hostname 时(例如 –hostname)，是否查询找出服务器的 hostname。 默认值是 true; 如果设置为 false Mesos 将会使用 IP 地址信息，除非 hostname 被明确指出了。 (默认值: true)</td><td></td></tr><tr><td></td><td>–modules=VALUE</td><td>List of modules to be loaded and be available to the internal subsystems.<br>Use –modules=filepath to specify the list of modules via a file containing a JSON-formatted string. filepath can be of the form file:///path/to/file or /path/to/file.<br>Use –modules=”{…}” to specify the list of modules inline.<br>Example:<br>{<br>  “libraries”: [<br>    {<br>      “file”: “/path/to/libfoo.so”,<br>      “modules”: [<br>        {<br>          “name”: “org_apache_mesos_bar”,<br>          “parameters”: [<br>            {<br>              “key”: “X”,<br>              “value”: “Y”<br>            }<br>          ]<br>        },<br>        {<br>          “name”: “org_apache_mesos_baz”<br>        }<br>      ]<br>    },<br>    {<br>      “name”: “qux”,<br>      “modules”: [<br>        {<br>          “name”: “org_apache_mesos_norf”<br>        }<br>      ]<br>    }<br>  ]<br>}<br></td><td></td></tr></tbody></table><p>masters 和 slaves 同时支持以下这些日志选项 更多日志信息，请访问<br><a href="http://mesos.apache.org/documentation/latest/logging/" target="_blank" rel="noopener">http://mesos.apache.org/documentation/latest/logging/</a></p><table><thead><tr><th></th><th>Flag</th><th>说明</th></tr></thead><tbody><tr><td></td><td>–[no-]quiet</td><td>禁用输出日志到 sterr （默认:false）</td><td></td></tr><tr><td></td><td>–log_dir=VALUE</td><td>输出日志文件的位置。默认方式下，不生成日志文件。这个参数不影响输出到 stderr 的日志。 如果特别指定了，就可以通过 Mesos webUI 看到这个日志文件。 注意: 第三方日志信息 (比如，ZooKeeper) 将只能写入到 stderr!</td><td></td></tr><tr><td></td><td>–logbufsecs=VALUE</td><td>缓冲日志的时长（秒数）默认：0秒</td><td></td></tr><tr><td></td><td>–logging_level=VALUE</td><td>输出日志的起始级别，包括 INFO, WARNING, ERROR。如果使用了–quiet 标记，只会影响到输出到 –log_dir 的日志的级别（默认：INFO）</td><td></td></tr><tr><td></td><td>–[no-]initialize_driver_logging</td><td>master/slave 是否为 Mesos scheduler 和 executor driver 初始化 Google logging. scheduler/executor drivers 将分别记录日志，不会写入 master/slave 的日志中。<br>如果使用的是 HTTP scheduler/executor APIs，这个选项将无效。 （默认：true）</td><td></td></tr><tr><td></td><td>–external_log_file=VALUE</td><td>定位外部管理的日志文件位置。Mesos 不会直接写入这个文件，仅会通过 WebUI 和 HTTP API 将其 暴露出来。这个仅用于混合外部日志机制来记录日志到 stderr 的情况。比如，syslog 或 journald。<br>当通过 –quiet 指定后，这个选项将无效。<br>此选项在 WebUI 的优先级高于 –log_dir . 但即使这个选项被指定了，日志任然会被 写入到 –log_dir。</td><td></td></tr></tbody></table><h3 id="Master-配置选项"><a href="#Master-配置选项" class="headerlink" title="Master 配置选项"></a>Master 配置选项</h3><p>必选参数</p><table><thead><tr><th></th><th>Flag</th><th>说明</th></tr></thead><tbody><tr><td></td><td>–quorum=VALUE</td><td>使用基于 replicated-Log 的注册表时，复制的个数。 此值需要设置为masters总数量的一半以上，也就是：quorum &gt; (number of masters)/2。 注意：单机模式下不需要设置此参数。（非HA模式）</td><td></td></tr><tr><td></td><td>–work_dir=VALUE</td><td>Registry 中持久化信息存储的位置。（如：/var/lib/mesos/master）</td><td></td></tr><tr><td></td><td>–zk=VALUE</td><td>ZooKeeper 的 URL地址 （用于在masters中做领导选举）可能是下面所列形式中的一种：<br><br>zk://host1:port1,host2:port2,…/path<br>zk://username:password@host1:port1,host2:port2,…/path<br>file:///path/to/file (where file contains one of the above)<br><br>注意: 单机模式下不需要设置此参数。（非HA模式）.</td></tr></tbody></table><p>可选参数</p><table><thead><tr><th></th><th>Flag</th><th>说明</th></tr></thead><tbody><tr><td></td><td>–acls=VALUE</td><td>此参数用于认证。一般是 JSON 格式的 ACLs 的字符串或者文件。 路径一般是这样的格式：file:///path/to/file 或 /path/to/file<br>注意：如果参数 –authorizers 的值与 local 的不相同，ACLs 的内容将被忽略。<br>在 authorizer.proto 中查看 ACLs protobuf 参考格式。<br>举例:<br>{<br>  “register_frameworks”: [<br>    {<br>      “principals”: { “type”: “ANY” },<br>      “roles”: { “values”: [“a”] }<br>    }<br>  ],<br>  “run_tasks”: [<br>    {<br>      “principals”: { “values”: [“a”, “b”] },<br>      “users”: { “values”: [“c”] }<br>    }<br>  ],<br>  “teardown_frameworks”: [<br>    {<br>      “principals”: { “values”: [“a”, “b”] },<br>      “framework_principals”: { “values”: [“c”] }<br>    }<br>  ],<br>  “set_quotas”: [<br>    {<br>      “principals”: { “values”: [“a”] },<br>      “roles”: { “values”: [“a”, “b”] }<br>    }<br>  ],<br>  “remove_quotas”: [<br>    {<br>      “principals”: { “values”: [“a”] },<br>      “quota_principals”: { “values”: [“a”] }<br>    }<br>  ]<br>}<br></td><td></td></tr><tr><td></td><td>–allocation_interval=VALUE</td><td>（批次）执行分配（allocations）的间隔时间。（如：500ms,1秒……） 默认值：1秒</td><td></td></tr><tr><td></td><td>–allocator=VALUE</td><td>分配器，用于给框架分配资源。默认使用 HierarchicalDRF 分配器，也可以通过 –modules 模块来选择其他的分配器。 （默认值：HierarchicalDRF）</td><td></td></tr><tr><td></td><td>–[no-]authenticate</td><td>如果是 true，则只有认证过的框架可以注册。 如果是 false，则未认证的框架也可以注册。（默认：false）</td><td></td></tr><tr><td></td><td>–[no-]authenticate_http</td><td>如果是 true，则只有支持认证机制的已认证的 HTTP endpoints 请求被允许访问。 如果是 false，则未认证的 HTTP endpoint 请求也会被允许访问。 （默认：false）</td><td></td></tr><tr><td></td><td>–[no-]authenticate_slaves</td><td>如果是 true，只有认证过的 slaves 才能注册。 如果是 false，未认证的 slaves 也可以注册。 （默认：false）</td><td></td></tr><tr><td></td><td>–authenticators=VALUE</td><td>框架或 slave 进行认证时使用的认证器。默认是 crammd5，也可以通过使用 –modules 更换其他认证模块。 （默认：crammd5）</td><td></td></tr><tr><td></td><td>–authorizers=VALUE</td><td>用于进行授权的 Authorizer。默认使用 local,也可以通过使用 –modules 替换成其他的 authorizer。<br>注意：如果参数 –authorizers 提供了一个与 local 不一样的值。 则通过–acls 设置的 ACLs 参数将被忽略。<br>目前并不支持多个 authorizers. （默认：local）</td><td></td></tr><tr><td></td><td>–cluster=VALUE</td><td>集群别名，会在 WebUI上显示。</td><td></td></tr><tr><td></td><td>–credentials=VALUE</td><td>一个存取凭证的路径。这个路径可以指向一个内容为凭证列表的文本文件，在这个文件中每一行包括由空格隔开的principal和secret。也可以指向一个包含凭证信息的 JSON 格式文件。 路径的格式可以是：file:///path/to/file 或 /path/to/file JSON 文件举例:<br>{<br>  “credentials”: [<br>    {<br>      “principal”: “sherman”,<br>      “secret”: “kitesurf”<br>    }<br>  ]<br>}<br>文本文件举例:<br><br>username secret<br></td><td></td></tr><tr><td></td><td>–framework_sorter=VALUE</td><td>给定 framework 之间的资源分配策略。选项与 user_allocator 相同。 （默认：drf）</td><td></td></tr><tr><td></td><td>–http_authenticators=VALUE</td><td>HTTP 认证器用于处理已验证的 endpoints 的请求。默认值是 basic，或者通过 –modules 加载一个其他的 HTTP 认证器。</td></tr><tr><td>目前不支持多种 HTTP 认证器。（默认：basic）</td><td></td></tr><tr><td></td><td>–[no-]log_auto_initialize</td><td>是否自动初始化注册使用的 <em>replicated log</em> 。如果设置为否，日志将在每次使用时手动初始化。 （默认值：true）</td><td></td></tr><tr><td></td><td>–max_completed_frameworks=VALUE</td><td>存储在内存中的完成框架的最大数量。（默认：50）</td><td></td></tr><tr><td></td><td>–max_completed_tasks_per_framework =VALUE</td><td>存储在内存的每个框架中已完成任务的最大数量。（默认：1000）</td><td></td></tr><tr><td></td><td>–max_slave_ping_timeouts=VALUE</td><td>一个 slave 对于master的 ping 响应失败的最大次数。 如果 slaves 没有在 max_slave_ping_timeouts 之内响应，就会尝试关机。 （默认：5）</td><td></td></tr><tr><td></td><td>–offer_timeout=VALUE</td><td>一个 offer 撤销的超时时间。 这可以让不同的 frameworks 提供的 offer 获得更公平的响应。 如果不设置， offers 没有超时限制。</td><td></td></tr><tr><td></td><td>–rate_limits=VALUE</td><td>该值可以为一个 JSON 格式的速率限制或一个文件路径包含了被 framework 限速 所使用的 JSON 格式的速率限制。请记住你也可以是使用 file:///path/to/file 或 /path/to/file 参数值格式来将该 JSON 写入至一个文件。<br>期望的格式请参考 mesos.proto 中的 RateLimits protobuf.<br>Example:<br>{<br>  “limits”: [<br>    {<br>      “principal”: “foo”,<br>      “qps”: 55.5<br>    },<br>    {<br>      “principal”: “bar”<br>    }<br>  ],<br>  “aggregate_default_qps”: 33.3<br>}<br></td></tr><tr><td></td><td>–recovery_slave_removal_limit=VALUE</td><td>针对故障转移，限制上的百分比的 slaves 可以从注册中移除并关机在重新注册的超时时间到了之后。 如果该限制被突破， master 将实行故障转移而不是移除 slaves. 这可被用来针对生产环境提供安全保障。生产环境可能期望在 Master 故障转移过程中， 最多一定百分比的 slaves 将永久性的挂掉 (比如, 由于 rack-level 的故障)。 设定该限制可以保证一个人需要参与进来当在该集群中一个非预期的大范围的 slave 故障发生。值: [0%-100%] (默认: 100%)</td><td></td></tr><tr><td></td><td>–registry=VALUE</td><td>注册表持久化策略。可用选项有 replicated_log,in_memory（用于测试）。 默认：replicated_log。</td><td></td></tr><tr><td></td><td>–registry_fetch_timeout=VALUE</td><td>在操作被认为是一个失败后的为了从注册中提取数据的等待的时间间隔.(默认： 1mins)</td><td></td></tr><tr><td></td><td>–registry_store_timeout=VALUE</td><td>等待的时间周期为了当操作被认为一个失败的时候将数据存储入注册机。 (默认：20secs)</td><td></td></tr><tr><td></td><td>–[no-]registry_strict</td><td>无论 Master 是否将基于注册机中存储的持久信息来采取行动。设定改值为 false 意味着注册员将永远拒绝入列，出列和一个 slave 的移除。所以， false 可以用来在一个运行的集群上来引导持久化的状态。注意： 该标志位是 <em>experimental</em> 而且还不能在应用中使用.(默认: false)</td><td></td></tr><tr><td></td><td>–roles=VALUE</td><td>其 frameworks 在这个集群中可能归属于的用逗号分离的一系列指派的角色。</td><td></td></tr><tr><td></td><td>–[no-]root_submissions</td><td>root 是否可以提交 frameworks? (默认: true)</td><td></td></tr><tr><td></td><td>–slave_ping_timeout=VALUE</td><td>在每个 slave 被期望从一个 master 回应一个 ping 值的超时时间。 Slaves 如果不是在 max_slave_ping_timeouts 回复，ping 从新尝试将被移除. (默认: 15secs)</td><td></td></tr><tr><td></td><td>–slave_removal_rate_limit=VALUE</td><td>最大的比例(e.g., 1/10mins, 2/3hrs, etc) 对于那个 slaves 将被从 master 中移除当他们遇到健康检测失败。默认的是 slave 将尽可能快的被移除当它们遇到健康监测失败。值为 (Number of slaves)/(Duration) 的模式。</td><td></td></tr><tr><td></td><td>–slave_reregister_timeout=VALUE</td><td>在所有的 slaves 被期望重新注册当一个新的 master 被选举为 leader 的超时时间。 Slaves 其不会在此超时时间内被重新注册将被从注册中移除并将被关掉如果它们尝试去与 master 通信。 注意： 该值将被设置为最少 10mins. (默认: 10mins)</td><td></td></tr><tr><td></td><td>–user_sorter=VALUE</td><td>被用来在用户中分配资源的策略。可以为以下之一：dominant_resource_fairness (drf) (default: drf)</td><td></td></tr><tr><td></td><td>–webui_dir=VALUE</td><td>管理页面的网页文件的目录，默认：/usr/local/share/mesos/webui</td><td></td></tr><tr><td></td><td>–weights=VALUE</td><td>逗号分割的角色/权重列表，成对表单 role=weight,role=weight。 weights是用来表达优先级。</td><td></td></tr><tr><td></td><td>–whitelist=VALUE</td><td>一个 文件名器包含一系列的 slaves （每行一个）来通告 offers.该文件被观测，并周期性的重读取来刷新 slave 白名单。 默认的这里没有白名单/所有机器被接收. (默认: None) 文件路径可以是这样的形式： file:///path/to/file 或 /path/to/file.</td><td></td></tr><tr><td></td><td>–zk_session_timeout=VALUE</td><td>zookeeper 的 session 超时时长。 (默认: 10secs)</td><td></td></tr></tbody></table><p>通过 –with-network-isolator 配置时可用的标记</p><table><thead><tr><th></th><th>Flag</th><th>说明</th></tr></thead><tbody><tr><td></td><td>–max_executors_per_slave=VALUE</td><td>每个 Slave 上最大允许的执行器数量。网络监控和隔离机制强行限制每个执行器使用的端口资源，所以每个 slave 上只能跑一定数量的执行器。</td><td></td></tr></tbody></table><h3 id="Slave-选项"><a href="#Slave-选项" class="headerlink" title="Slave 选项"></a>Slave 选项</h3><p>必选项</p><table><thead><tr><th></th><th>Flag</th><th>说明</th></tr></thead><tbody><tr><td></td><td>–master=VALUE</td><td>可能是其中的一种： host:port <br>zk://host1:port1,host2:port2,…/path <br>zk://username:password@host1:port1,host2:port2,…/path <br>file:///path/to/file (包含以上中的一个)</td><td></td></tr></tbody></table><p>可选项</p><table><thead><tr><th></th><th>Flag</th><th>说明</th></tr></thead><tbody><tr><td></td><td>–appc_store_dir=VALUE</td><td>appc 提供者存储镜像的目录 (默认: /tmp/mesos/store/appc)</td><td></td></tr><tr><td></td><td>–attributes=VALUE</td><td>slave 机器的属性,格式为： rack:2 或者rack:2;u:1</td></tr><tr><td>–authenticatee=VALUE</td><td>用于主节点身份验证，默认crammd5，或者用-—modules加载备用模块。（默认：crammd5）</td><td></td></tr><tr><td></td><td>–[no]-cgroups_cpu_enable_pids_and_tids_count</td><td>Cgroups 的功能标记，可以统计容器内的进程和线程的数量。（默认：false）</td><td></td></tr><tr><td></td><td>–[no]-cgroups_enable_cfs</td><td>Cgroups 的功能标记，通过限制CFS带宽来限制CPU资源. (默认: defult)</td><td></td></tr><tr><td></td><td>–cgroups_hierarchy=VALUE</td><td>cgroups的根路径位置. 默认: /sys/fs/cgroup</td><td></td></tr><tr><td></td><td>–[no]-cgroups_limit_swap</td><td>Cgroups 的功能标记，可以对内存和swap进行限制，而不仅限制内存。（默认: false）</td><td></td></tr><tr><td></td><td>–cgroups_net_cls_primary_handle    一</td><td>个非零，16位的句柄。形式类似于：<code>0xAAAA</code>. 这将作为 net_cls cgroup 的主句柄来使用。</td><td></td></tr><tr><td></td><td>–cgroups_net_cls_secondary_handles</td><td>一系列的类似 0xAAAA,0xBBBB 形式的次要句柄，将与主句柄配合使用。只有在设置了 –cgroups_net_cls_primary_handle 之后，才会生效。</td><td></td></tr><tr><td></td><td>–cgroups_root=VALUE</td><td>根cgroup的命名. 默认: mesos</td><td></td></tr><tr><td></td><td>–container_disk_watch_interval=VALUE</td><td>用于查询容器中磁盘配额的时间间隔. 被用于posix/disk的时间间隔, 默认: 15秒</td><td></td></tr><tr><td></td><td>–container_logger=VALUE</td><td>容器日志记录器的名称，日志记录器用来记录容器（如：执行器，任务）的标准输出和错误日志。 默认的日志记录器将会写入到沙盒目录中的 stdout 和 stderr。</td><td></td></tr><tr><td></td><td>–containerizer_path=VALUE</td><td>当外部隔离机制被激活时(–isolation=external), 外部容器被执行的路径</td><td></td></tr><tr><td></td><td>–containerizers=VALUE</td><td>由逗号分隔的容器化实现方式列表。可选项有 mesos, external, and docker (on Linux). 排列的顺序就是容器化过程中尝试的顺序。 （默认：mesos）</td><td></td></tr><tr><td></td><td>–credential=VALUE</td><td>一行包含principal和secret由空格隔开的文本路径. 或是包含一条凭证的JSON格式文件的路径. 路径的格式是file://path/to/file 或 /path/to/file. 例如:<br>{<br>  “principal”: “username”,<br>  “secret”: “secret”<br>}<br></td><td></td></tr><tr><td></td><td>–default_container_image=VALUE</td><td>当使用外部容器化器时，在任务没有特别指定的情况下所使用的默认容器镜像。 没有在一个 task 上指定 ，则使用默认的容器镜像。</td><td></td></tr><tr><td></td><td>–default_container_info=VALUE</td><td>JSON格式的 CONTAINERINFO 将包含到任何没有指定 ContainerInfo 的 ExecutorInfo 中。<br>See the ContainerInfo protobuf in mesos.proto for the expected format.<br>例如:<br>{<br>  “type”: “MESOS”,<br>  “volumes”: [<br>    {<br>      “host_path”: “./.private/tmp”,<br>      “container_path”: “/tmp”,<br>      “mode”: “RW”<br>    }<br>  ]<br>}<br></td><td></td></tr><tr><td></td><td>–default_role=VALUE</td><td>任何用 –resources 标志位将忽略一个 role ，以及在 –resources 标记位中出现，但被自动检测到的资源。都将使用默认的这个 role。</td><td></td></tr><tr><td></td><td>–disk_watch_interval=VALUE</td><td>周期性时间间隔(例如 10 S ,2 MIN 等)检查slave管理的硬盘使用情况。 这个会对存档信息和沙盒做垃圾回收。(默认: 1mins)</td><td></td></tr><tr><td></td><td>–docker=VALUE</td><td>docker容器化的可执行文件的绝对路径。( 默认: docker )</td><td></td></tr><tr><td></td><td>–[no-]docker_kill_orphans</td><td>允许 docker kill 掉 orphaned containers 。当你相同的 OS 中启动多个 slave，你应该考虑将此值设为 false 。 以规避 DockerContainerizer 中的一个实例移除被其他 slaves 所启用的 docker 任务。然而，你还应该确保为 slave 启用　checkpoint，这样相同 slave id 可以被重用 。否则当 slave 重启后，docker 任务不会被清除掉。( 默认为　true ) 。</td><td></td></tr><tr><td></td><td>–docker_mesos_image=VALUE</td><td>docker 镜像用于启动这个 mesos slave 实例。如果一个镜像被指定，docker containerizer 假定 slave 运行在 docker 容器中，并当 slave 重启和恢复时启动 executor 来恢复他们。</td><td></td></tr><tr><td></td><td>–docker_registry=VALUE</td><td>一个下拉 Docker 镜像的默认 url. 可以是一个 Docker registry 服务的 URL（例如：<a href="https://registry.docker.io），也可以是" target="_blank" rel="noopener">https://registry.docker.io），也可以是</a> 一个包含Docker存档的本地路径（例如：/tmp/docker/images） （默认：<a href="https://registry-1.docker.io" target="_blank" rel="noopener">https://registry-1.docker.io</a> ）</td><td></td></tr><tr><td></td><td>–docker_remove_delay=VALUE</td><td>移除 docker 前等待的时间 （ 如 3 天，2 周 等）。默认为 6 小时。</td><td></td></tr><tr><td></td><td>–docker_socket=VALUE</td><td>一个安装在 Docker executor 容器内部的 UNIX 套接字路径。用来提供通过 CLI 访问 docker daemon 的能力。 这个必须是 slave docker 镜像用的路径。（默认：/var/run/docker.sock）</td><td></td></tr><tr><td></td><td>–docker_stop_timeout=VALUE</td><td>杀死实例后，在停止它之前 docker 需要等待的间隔时间 （ 默认： 0 Secs ）。</td><td></td></tr><tr><td></td><td>–docker_store_dir=VALUE</td><td>Docker provisioner 用来存储镜像的目录。（默认：/tmp/mesos/store/docker）</td><td></td></tr><tr><td></td><td>–[no-]enforce_container_disk_quota</td><td>否为容器启用磁盘限额。这个标记位用来为 posix/disk 隔离。 （ 默认: false ）。</td><td></td></tr><tr><td></td><td>–executor_environment_variables=VALUE</td><td>使用 JSON 对象格式的环境变量。会通过 executor 来传递之后的 task。 默认情况下，executor 会继承 slave 的环境变量。 例如:<br>{<br>  “PATH”: “/bin:/usr/bin”,<br>  “LD_LIBRARY_PATH”: “/usr/local/lib”<br>}<br></td><td></td></tr><tr><td></td><td>–executor_registration_timeout=VALUE</td><td>executor 挂起或者关闭前，等待其注册 slave 的时间。（ 例如，60 S，3 mins 等 ）。默认为 1 MIN 。</td><td></td></tr><tr><td></td><td>–executor_shutdown_grace_period=VALUE</td><td>等待 executor 关闭的时间。( 例如, 60 S, 3 mins 等 )。默认为 5 S 。</td><td></td></tr><tr><td></td><td>–fetcher_cache_dir=VALUE</td><td>fetcher cache 的父目录。（每一个slave有一个子目录）。 （默认：/tmp/mesos/fetch）</td><td></td></tr><tr><td></td><td>–fetcher_cache_size=VALUE</td><td>以字节为单位的 fetcher cache 大小。( 默认: 2 GB )</td><td></td></tr><tr><td></td><td>–frameworks_home=VALUE</td><td>相对于 executor 的路径前缀的 URI 。</td><td></td></tr><tr><td></td><td>–gc_delay=VALUE</td><td>清理 executor 目录的延迟时间（ 例如，3 天 或 2 周 等）。 注意，根据实际可用磁盘的情况，这个值可能会小些（ 默认：1 周 ）。</td><td></td></tr><tr><td></td><td>–gc_disk_headroom=VALUE</td><td>Adjust disk headroom used to calculate maximum executor directory age. Age is calculated by: gc_delay * max(0.0, (1.0 - gc_disk_headroom - disk usage)) every –disk_watch_interval duration. gc_disk_headroom must be a value between 0.0 and 1.0 (default: 0.1)</td><td></td></tr><tr><td></td><td>–hadoop_home=VALUE</td><td>Hadoop 的安装路径。（用于从 HDFS 提取框架 executors ） （没有默认项，在环境中查找HADOOP_HOME，或者在PATH 查询 hadoop）</td><td></td></tr><tr><td></td><td>–image_providers=VALUE</td><td>由逗号分割的支持的镜像供应商列表。如：APPC,DOCKER.</td><td></td></tr><tr><td></td><td>–image_provisioner_backend=VALUE</td><td>从镜像中提取容器 rootfs 的策略。 如：bind, copy. (默认: copy)</td><td></td></tr><tr><td></td><td>–isolation=VALUE</td><td>所采用的隔离机制，如：posix/cpu,posix/mem 或 cgroups/cpu,cgroups/mem 或 network/port_mapping（通过 –with-network-isolator 标记来开启） 或 external 或者通过code&gt;–modules标记替换成另一个隔离模块。 注意：这个标记仅用于 Mesos 容器化器。（默认：posix/cpu,posix/mem）</td><td></td></tr><tr><td></td><td>–launcher=VALUE</td><td>Mesos 容器化器所使用的启动器。可以是 linux 或 posix。 Linux 启动器需要cgroups隔离机制。每个隔离器需要 Linux 的 namespaces 如 网络，pid,等。 如果没有特别指定，slave 将选择一个作为root运行的 Linux 启动器。</td><td></td></tr><tr><td></td><td>–launcher_dir=VALUE</td><td>Mesos 二进制目录路径。 Mesos 可以在这个目录下找到 健康检查，fetcher，容器化器，executor 的二进制文件。（ 默认： /usr/local/lib/mesos ）。</td><td></td></tr><tr><td></td><td>–oversubscribed_resources_interval=VALUE</td><td>Slave 会定期向 master 更新自己有效的，可以分配的资源。 更新的间隔时间是由这个 flag 控制的。 （ 默认：15 S ）。</td><td></td></tr><tr><td></td><td>–perf_duration=VALUE</td><td>一个 perf stat 例子的执行周期。持续时间必须比 perf_interval 少。（默认： 10 secs）</td><td></td></tr><tr><td></td><td>–perf_events=VALUE</td><td>一系列命令分离的 perf 事件当使用 perf_event 分离器时候来精简每个容器。默认为 None。运行  perf list 命令查看所有事件。当在 PerfStatistics protobuf 中被通告时候事件名称将被悲观性的消除并使用下划线代替连字符。 例如，cpu-cycles 变为 cpu_cycles。在 PerfStatistics protobuf 中可以看到所有名字。</td><td></td></tr><tr><td></td><td>–perf_interval=VALUE</td><td>Interval between the start of perf stat samples. Perf samples are obtained periodically according to perf_interval and the most recently obtained sample is returned rather than sampling on demand. For this reason, perf_interval is independent of the resource monitoring interval. (default: 60secs)</td><td></td></tr><tr><td></td><td>–qos_controller=VALUE</td><td>Qos 控制器的名称被用来超额订阅。</td><td></td></tr><tr><td></td><td>–qos_correction_interval_min=VALUE</td><td>slave 从 Qos 控制器投票和执行 QoS 的更正基于其已运行 tasks 的观察到的性能 这些校正之间的最小间隔有此标记位指定。 （ 默认： 0 secs ）。</td><td></td></tr><tr><td></td><td>–recover=VALUE</td><td>是否恢复更新状态并与老的 executors 重新连接。 recover 可用的值有： reconnect：与老的还存活的 executors 重新连接。 cleanup：杀掉所有的老的还存活的 executors 并退出。 当 slave 不兼容 或 executor 更新时，使用这个选项。 （默认：reconnect）</td><td></td></tr><tr><td></td><td>–recovery_timeout=VALUE</td><td>分配给 slave 恢复的时间。如果　slave 恢复所用的时间超过 recovery_timeout，将会被终止。( 默认：15 min )</td><td></td></tr><tr><td></td><td>–registration_backoff_factor=VALUE</td><td>Slave initially picks a random amount of time between [0, b], where b = registration_backoff_factor, to (re-)register with a new master. Subsequent retries are exponentially backed off based on this interval (e.g., 1st retry uses a random value between [0, b <em> 2^1], 2nd retry between [0, b </em> 2^2], 3rd retry between [0, b * 2^3], etc) up to a maximum of 1mins (default: 1secs)</td><td></td></tr><tr><td></td><td>–resource_estimator=VALUE</td><td>用于 过度订阅 的 资源评估者 的名称。</td><td></td></tr><tr><td></td><td>–resources=VALUE</td><td>每个 slave 总的可消耗资源。可以用 JSON 格式提供，也可以是使用分号隔开的 key:value 键值对列表，配合指定角色选项。<br>key:value 列表: name(role):value;name:value…<br>To use JSON, pass a JSON-formatted string or use –resources=filepath to specify the resources via a file containing a JSON-formatted string. ‘filepath’ can be of the form file:///path/to/file or /path/to/file.<br>Example JSON:<br>[<br>  {<br>    “name”: “cpus”,<br>    “type”: “SCALAR”,<br>    “scalar”: {<br>      “value”: 24<br>    }<br>  },<br>  {<br>    “name”: “mem”,<br>    “type”: “SCALAR”,<br>    “scalar”: {<br>      “value”: 24576<br>    }<br>  }<br>]<br></td><td></td></tr><tr><td></td><td>–[no-]revocable_cpu_low_priority</td><td>通过 revocable CPU 以相对低的优先级运行 containers 。 目前只支持 cgroups/cpu isolator 。( 默认: true )</td><td></td></tr><tr><td></td><td>–sandbox_directory=VALUE</td><td>沙盒被映射到容器中的绝对目录路径。 (默认: /mnt/mesos/sandbox)</td><td></td></tr><tr><td></td><td>–slave_subsystems=VALUE</td><td>一系列的逗号分隔的 cgroup 子系统来从二进制运行slave。例如，memory,cpuacct 。默认为 none 。此功能用于资源的监视以及 no cgroup 下限制设置，它们从 root mesos cgroup 继承而来。</td><td></td></tr><tr><td></td><td>–[no-]strict</td><td>如果 strict=true，任何以及所有错误恢复都被认为是致命的。反之，恢复期间，任何预期的错误都会被忽略。 ( 默认： true )</td><td></td></tr><tr><td></td><td>–[no-]switch_user</td><td>是否用提交它们的用户来运行 tasks 而不是使用运行 slave 的用户. ( 需要 setuid 权限)。 ( 默认: true ) If set to true, the slave will attempt to run tasks as the user who submitted them (as defined in FrameworkInfo) (this requires setuid permission and that the given user exists on the slave). If the user does not exist, an error occurs and the task will fail. If set to false, tasks will be run as the same user as the Mesos slave process. NOTE: This feature is not yet supported on Windows slave, and therefore the flag currently does not exist on that platform. (default: true)</td><td></td></tr><tr><td></td><td>–[no-]systemd_enable_support</td><td>系统支持的最高级控制。当设置为 enabled，像 executor life-time 延期这样的功能都会设置为 enabled，除非有一个明确的 flag 设置其为 disable。这个会在 agent 作为 systemd unit 发布 时设置为 enabled。 （默认：true）</td><td></td></tr><tr><td></td><td>–systemd_runtime_directory=VALUE</td><td>systemd 系统运行时目录路径。 （默认：/run/systemd/system）</td><td></td></tr><tr><td></td><td>–work_dir=VALUE</td><td>framework 工作目录的路径。( 默认: /tmp/mesos )</td><td></td></tr></tbody></table><p>当配置了 ‘ –with-network-isolator ‘, 以下标记位才会生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--ephemeral_ports_per_container=VALUE   有网络隔离器分配临时端口给一个容器。此端口号必须是 2 的倍数。( 默认: 1024 )</span><br><span class="line">--eth0_name = VALUE             公网接口的名称 ( 如 eth0 )。如果没有指定，网络隔离器会尝试基于主机的默认网关来猜测它。</span><br><span class="line">--lo_name=VALUE                 网络 loopback 接口的名称( 例如, lo )。如果没有指定，网络隔离器会尝试猜测它。</span><br><span class="line">--egress_rate_limit_per_container=VALUE 每个容器的出口流量限制，单位是 字节/每秒。如果没有指定或指定为零，网络隔离器不会强制限制容器的出口流量。这个标记使用字节类型, 定义在 stout 。</span><br><span class="line">--[no-]network_enable_socket_statistics_summary 是否从每个容器收集 socket 统计摘要。这个标记位被用在  &apos;network/port_mapping&apos; 隔离器。 ( 默认: false )</span><br><span class="line">--[no-]network_enable_socket_statistics_details 是否从每个容器收集 socket 细节信息。该标记用于 &apos; network/port_mapping &apos; 隔离器。( 默认: false )</span><br></pre></td></tr></table></figure><p>参考文章：<a href="https://mesos-cn.gitbooks.io/mesos-cn/content/document/runing-Mesos/Configuration.html" target="_blank" rel="noopener">https://mesos-cn.gitbooks.io/mesos-cn/content/document/runing-Mesos/Configuration.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Master-和-Slave-的配置选项（转）&quot;&gt;&lt;a href=&quot;#Master-和-Slave-的配置选项（转）&quot; class=&quot;headerlink&quot; title=&quot;Master 和 Slave 的配置选项（转）&quot;&gt;&lt;/a&gt;Master 和 Slave 的配置选项（转）&lt;/h2&gt;&lt;p&gt;可以通过运行 mesos-master –help 或者 mesos-slave –help 可以查看相关的可用选项。每个选项可以通过以下两种方式设置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行命令的时候使用 –-option_name=value 来传递配置选项。value 既可以是数值，也可以指定包含参数的文件 (–opthon_name=file://文件路径)。 该路径既可以是绝对路径，也可以是相对当前工作目录的相对路径。&lt;/li&gt;
&lt;li&gt;通过设定环境变量 MESOSOPTION_NAME (变量名都以 MESOS 开头)&lt;br&gt;执行时会先读取环境变量，然后才看命令行参数&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="mesos" scheme="https://sukbeta.github.io/categories/mesos/"/>
    
    
      <category term="mesos" scheme="https://sukbeta.github.io/tags/mesos/"/>
    
  </entry>
  
  <entry>
    <title>marathon-lb上添加多证书并实现泛解析代理域名-1</title>
    <link href="https://sukbeta.github.io/lb-https-certs-1/"/>
    <id>https://sukbeta.github.io/lb-https-certs-1/</id>
    <published>2019-07-19T06:14:51.000Z</published>
    <updated>2019-07-19T06:36:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="marathon-lb上添加多证书并实现泛解析代理域名-之-nginx实现marathon-lb的vhosts泛域名代理"><a href="#marathon-lb上添加多证书并实现泛解析代理域名-之-nginx实现marathon-lb的vhosts泛域名代理" class="headerlink" title="marathon-lb上添加多证书并实现泛解析代理域名 之 nginx实现marathon-lb的vhosts泛域名代理"></a>marathon-lb上添加多证书并实现泛解析代理域名 之 nginx实现marathon-lb的vhosts泛域名代理</h2><p>marathon-lb代理https域名， 需要将证书当道lb上。nginx不需要开启443端口，nginx需要配置 vhost  才能访问。</p><p>marathon添加证书连接： <a href="https://sukbeta.github.io/lb-https-certs-2/">marathon-lb上添加多个证书</a></p><p>域名都是通过 vhost 虚拟主机方式访问。这样nginx才能拿到 x_forwarded_for 客户端的IP地址。LB才会通过HTTP方式代理，否则会走TCP代理。</p><p>nginx上回有很多个域名，我们不能添加一个域名就修改一次 vhosts ，所以我们尝试添加 泛域名。</p><a id="more"></a><p>nginx 发布的json文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: &quot;/lb-nginx/nginx-shining-test1,</span><br><span class="line">  &quot;cmd&quot;: null,</span><br><span class="line">  &quot;cpus&quot;: 0.1,</span><br><span class="line">  &quot;mem&quot;: 4096,</span><br><span class="line">  &quot;disk&quot;: 0,</span><br><span class="line">  &quot;instances&quot;: 1,</span><br><span class="line">  &quot;constraints&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;nginx&quot;,</span><br><span class="line">      &quot;LIKE&quot;,</span><br><span class="line">      &quot;true&quot;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  &quot;container&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;DOCKER&quot;,</span><br><span class="line">    &quot;volumes&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;containerPath&quot;: &quot;/etc/nginx&quot;,</span><br><span class="line">        &quot;hostPath&quot;: &quot;/home/nginx-conf/conf&quot;,</span><br><span class="line">        &quot;mode&quot;: &quot;RW&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;docker&quot;: &#123;</span><br><span class="line">      &quot;image&quot;: &quot;nginx:1.13&quot;,</span><br><span class="line">      &quot;network&quot;: &quot;BRIDGE&quot;,</span><br><span class="line">      &quot;portMappings&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;containerPort&quot;: 80,</span><br><span class="line">          &quot;hostPort&quot;: 0,</span><br><span class="line">          &quot;servicePort&quot;: 0,</span><br><span class="line">          &quot;protocol&quot;: &quot;tcp&quot;,</span><br><span class="line">          &quot;labels&quot;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">        &quot;forcePullImage&quot;: false</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;env&quot;: &#123;</span><br><span class="line">    &quot;TZ&quot;: &quot;Asia/Shanghai&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;healthChecks&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;gracePeriodSeconds&quot;: 60,</span><br><span class="line">      &quot;intervalSeconds&quot;: 10,</span><br><span class="line">      &quot;timeoutSeconds&quot;: 5,</span><br><span class="line">      &quot;maxConsecutiveFailures&quot;: 3,</span><br><span class="line">      &quot;portIndex&quot;: 0,</span><br><span class="line">      &quot;protocol&quot;: &quot;TCP&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;labels&quot;: &#123;</span><br><span class="line">    &quot;HAPROXY_0_BACKEND_WEIGHT&quot;: &quot;-1&quot;,</span><br><span class="line">    &quot;HAPROXY_GROUP&quot;: &quot;lbgroupname&quot;,</span><br><span class="line">    &quot;HAPROXY_0_HTTP_FRONTEND_ACL_ONLY&quot;: &quot;  acl host_&#123;cleanedUpHostname&#125; hdr(host) -m end .&#123;hostname&#125;\n&quot;,</span><br><span class="line">    &quot;HAPROXY_0_HTTPS_FRONTEND_ACL&quot;: &quot;  use_backend &#123;backend&#125; if &#123;&#123; ssl_fc_sni -m end .&#123;hostname&#125; &#125;&#125;\n&quot;,</span><br><span class="line">    &quot;HAPROXY_0_VHOST&quot;: &quot;shiningtest1.com,shiningtest2.com&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中参数说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;HAPROXY_0_HTTP_FRONTEND_ACL_ONLY&quot;: &quot;  acl host_&#123;cleanedUpHostname&#125; hdr(host) -m end .&#123;hostname&#125;\n&quot;,</span><br></pre></td></tr></table></figure><p>这个是http的默认解析。因为http会有很多二级域名，所以配置默认解析。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;HAPROXY_0_HTTPS_FRONTEND_ACL&quot;: &quot;  use_backend &#123;backend&#125; if &#123;&#123; ssl_fc_sni -m end .&#123;hostname&#125; &#125;&#125;\n&quot;,</span><br></pre></td></tr></table></figure><p>这个是配置https的泛解析，会在LB的配置的vhosts域名前面加“.”点， “end .{hostname} ”  那个点。</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>可以查看LB的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> curl 192.168.53.200:9090/_haproxy_getconfig </span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">frontend marathon_http_in</span><br><span class="line">  bind *:80</span><br><span class="line">  mode http</span><br><span class="line">  acl host_shiningtest1_com_lb-nginx_nginx-shining-test1 hdr(host) -m end .shiningtest1.com</span><br><span class="line">  acl host_shiningtest1_com_lb-nginx_nginx-shining-test1 hdr(host) -m end .shiningtest2.com</span><br><span class="line">  use_backend lb-nginx_nginx-shining-test1_10111 if host_shiningtest1_com_lb-nginx_nginx-shining-test1</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">frontend marathon_https_in</span><br><span class="line">  bind *:443 ssl crt /mnt/mesos/sandbox/shiningtest1.com.pem crt /mnt/mesos/sandbox/shiningtest2.com.pem</span><br><span class="line">  mode http</span><br><span class="line">  use_backend lb-nginx_nginx-shining-test1_10111  if &#123; ssl_fc_sni -m end .shiningtest1.com &#125;</span><br><span class="line">  use_backend lb-nginx_nginx-shining-test1_10111 if &#123; ssl_fc_sni -m end .shiningtest2.com &#125;</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><ul><li><p>可以看到 http 的 use_backend  是marathon上nginx的id</p></li><li><p>https 的end 后面的二级域名前面都添加了 “.” </p></li></ul><p>这样 shiningtest1.com 和 shiningtest2.com 所有的域名都会转发到nginx上了。</p><p>相关参考文档：<a href="https://docs.mesosphere.com/services/marathon-lb/1.13/mlb-configuration/" target="_blank" rel="noopener">https://docs.mesosphere.com/services/marathon-lb/1.13/mlb-configuration/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;marathon-lb上添加多证书并实现泛解析代理域名-之-nginx实现marathon-lb的vhosts泛域名代理&quot;&gt;&lt;a href=&quot;#marathon-lb上添加多证书并实现泛解析代理域名-之-nginx实现marathon-lb的vhosts泛域名代理&quot; class=&quot;headerlink&quot; title=&quot;marathon-lb上添加多证书并实现泛解析代理域名 之 nginx实现marathon-lb的vhosts泛域名代理&quot;&gt;&lt;/a&gt;marathon-lb上添加多证书并实现泛解析代理域名 之 nginx实现marathon-lb的vhosts泛域名代理&lt;/h2&gt;&lt;p&gt;marathon-lb代理https域名， 需要将证书当道lb上。nginx不需要开启443端口，nginx需要配置 vhost  才能访问。&lt;/p&gt;
&lt;p&gt;marathon添加证书连接： &lt;a href=&quot;https://sukbeta.github.io/lb-https-certs-2/&quot;&gt;marathon-lb上添加多个证书&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;域名都是通过 vhost 虚拟主机方式访问。这样nginx才能拿到 x_forwarded_for 客户端的IP地址。LB才会通过HTTP方式代理，否则会走TCP代理。&lt;/p&gt;
&lt;p&gt;nginx上回有很多个域名，我们不能添加一个域名就修改一次 vhosts ，所以我们尝试添加 泛域名。&lt;/p&gt;
    
    </summary>
    
      <category term="marathon" scheme="https://sukbeta.github.io/categories/marathon/"/>
    
    
      <category term="marathon-lb" scheme="https://sukbeta.github.io/tags/marathon-lb/"/>
    
      <category term="nginx" scheme="https://sukbeta.github.io/tags/nginx/"/>
    
  </entry>
  
</feed>
